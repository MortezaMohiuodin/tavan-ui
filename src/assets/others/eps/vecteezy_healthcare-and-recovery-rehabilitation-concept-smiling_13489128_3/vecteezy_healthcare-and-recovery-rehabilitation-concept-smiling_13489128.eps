%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Pol_Nov21_024.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Admin
%%CreationDate: 12/3/2021
%%BoundingBox: 0 0 2742 1828
%%HiResBoundingBox: 0 0 2742 1828
%%CropBox: 0 0 2742 1828
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2019-05-18T09:11:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-05-18T09:11:40+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-05-18T09:11:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>172</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgArAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9AZjuW7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FVjzQo6I7qrybRqSAWp4A9cUL8UuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuJAFT0xVgmpfnP5Mtbprez+tawY2KTTafD6sKkdaTO0&#xA;cb0/4rZsB2UAnkoR/nt5AkuREJLtIUKreXclrLHFbO24SfmFdfEsFKgblqYUPQQQQCDUHcEYpbxV&#xA;2KsU/M/zLqflzyfdalpnH68GSG3aSF541eU8FLqjIVHIgBt96fCcIDGRoMF80ecvNM+s6r5fSeeV&#xA;NLRfrlppnGG+e2gt7ae7u2m+F1XlchUSEK7g/D7VzJHJsgB1Y3Bfflmhvl1PS7KOGOQD9Jzwi7hu&#xA;I2RZI2e6dHPMpICVkblvtUb5jnxDyJckHGOYDMdB1CfytqummznZvKmpzR2t1Zys8q2stx8FtNbF&#xA;yTHG8rKjp9kVDADetmHKTsebXmxCPqHJ6xl7Q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FVK7na3tZZ0hkuGiRnEEXH1HKivFOZReR7VIxQluj+ZI9TuHt/wBHX9lIic63ls8SEVA+&#xA;GTeMnf7PKvtjSgvMfzg8462fM9t5T05J5rGWAfpC1skEs1w1xFcSNEy0ZzHHBbMzKnxNy79CDyTH&#xA;nuwqw1DTbi4t9N090mu5XEFvYQCsoYELx9JfiQL+1yAC96ZSYlyeOKS315bjXE9aBra6juv0Rqdv&#xA;JQhxNEZI1JXkr8WpQjbdqEg1M62+1r4gTfwe/fk9q73/AJHtbWeT1LzRnfS7gnrS2IEBb3e2aJj8&#xA;8su92mq2Ztil2KoTVNJ03VbQ2eo2yXVszK5ikFRyQhlYeBBGKKeXebdA8pWv5t/pzVr2DRVudKi+&#xA;sXN6yCC8aK7iDRReoVUSLDEqP8XKjoUFVJyMyaoJiBxWUv8AOf5W/ly3lnUvPflfTX1C4eEXdsLS&#xA;eQRiOOQPJJbUlhMRCI3Hgxp2Rh8BqjklfCWcoRriDfL9O+XtS0RpvU1CC2jgkuhQB5ZbZJY7mL/J&#xA;5t8J/mU5R9MgXM+qJi9X8rayNb8taXq4HE39rDcOn8ryIGdT7q1Qczi68Jpil2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRvbpbW0muWjklEKFzFChkkagrREXdiewxQl2i61qWpTSGf&#xA;RbrTLRVrFNePbh5DXoIoZJmUf69D7YqC8a/O7T7rT/NE+pASRLqFpHJpt4pYD67aLIHg5LQgvFx2&#xA;rV1LgdDgPRkOoZn5a/MTybpn+GvLmlvHqV1qaokktgsAhtVmEjxrI0KxR7OjIFUcvhLNv1oljkbL&#xA;ZHJEUEr8+flroHn2PU9W8pTLa+ZNLv2juJW5fVrq8tIwOMgDUDRlwokA2IoQRjCZjseSyhxbjmxX&#xA;yF58Xyx5huJLyORbS8jSPXdOUGS4tJ4ahLhYh8UiUYo5QHkvFlrTLo7bMJ77j4ve9J1nSdYskvtK&#xA;vIb60f7M8DrItR1BKk0I7g7jJMEZil2KsE/ODR7G88uRahPdWlpc6TI1xa/X5Wt4J2MbL9XaVJIH&#xA;TmxVlZXqGVfcYQxklP5I+Z9W8ywX63Jt7bR9LgtbOy0e2sZLSKMSQiQ8vXeZmKj4AFbjT4t+QzGz&#xA;Q4efNuw5BMbGw881XWLDyl5rEmlyvqfluxBs7nVLVHmjitQzNHazMAFdrRiQksTNRTwcBjXLfy05&#xA;wMqaxrccMggZC3pf5S+adLlFxoFvcpNbM81/oc6n4ZLaaQyTw77iS2nkYFDuEZPejAmt+YZTAvbk&#xA;XpOTYuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjaa75h1PVBb6Pp31bTLafhe&#xA;6rqSPGJFjakiWluCkrk0IEr8U7qJBhpjar578rDzV5Vv9C9cWr3ap6V2U9QxSRyLIsgWq1Kldtxg&#xA;CSGDeTfyUvtG0iKOTWZdN1rndRahqOm+k5uoJ5ZGWQNcwyPbT+m6qXiNfhG7UWjKiiIIef6zbwWH&#xA;mDV/y8tJJB5b0S4+srZmQn6wb+CGfjcn7UwjkaQKHJrXevEZjaqZiARzLtOydPHJIiW4j096Ra7o&#xA;umWssN99ViWyUrFdCKNYpIQzUW4iljCyKVY/Fv8AZ37b42LLI7Xv+Nnb6nS441LhHByO1V5gjf3+&#xA;SD0vXNZ8j+a3v47qRpFH1ppORAu4IlZ5IZwPhcNGjjf7D8WWnLjmdhyccXn9bpThmQfeD+Px832D&#xA;ljjKV3dW1pazXd1IsNtbo0s8zmioiAszMewAFcUPBLHWj5t17UNev4WZ4JRFpkc1CtrAyLIkaJuE&#xA;lKMjyt15Nx6KM3OjwiI5bvLdqamU5UD6VVNI1R21K3uNUkGi6lci6m0u2X0VkYQx29J5QWkdSkK1&#xA;QFVPcHJS0kZT45btMO0pwxDHDbzUYory81SS2gZrDRtLaOJYYVVPrEnFZCtSNoUVgtFpU1FaCmX0&#xA;Sa5AOMSIxs7yl9n7UDpvlkWXmLV/0E31O8jgttV0tF2iivleZKheySKnBwOqsw6caaXtIDHMEdXq&#xA;exJyzYpCXOPJ9AeX9Xi1nQdN1iJDHFqVrBdxo3VVnjWQA/INmO54R+KXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FWmJVSQpYgEhRSp9hUgYqx/ynpOqRfWtZ1zbXNVKtNbq3OO0t0r6N&#xA;pGQeJ9PkS7D7Tlj040SxAVvLmr3mqXWtyPx+o2l+9lp/EULLbxRrOzNXf/SfVT/Y4lIL541ifl+c&#xA;PmtuPH6xM6eNfqqW6fj6lcxNZyHl+13fYu0j539lfrb8xOBpE6MqukxjgkRq0KTyLE/Sn7LnMLF9&#xA;TutUf3Z86HzNJb5y8ty6pp0clrIVvbBZGgUjl6qsnF4m3H94BTLdPm4Jb8i4vaOi8bHt9UeXn5fF&#xA;9I/l5fatf+S9IvNUnt7q6ntopBdWpfhKjICkjCRVZXYfbXsc2ZeUDDPz28129lYWmgGZAt6st3qE&#xA;RO729opkjt2p9kXMq8d/tKrqK1zI00QZWejh66chCo8zt7vNjvlzTxYaNbQl/VmdfWuZz1knmPqS&#xA;yH/Wdj+rN3CNB5DNPikT+KQGqaLrk817JBqKwpPT6vJyuEe2X01QhVWX0HoymSrR1qadMqyYpk2J&#xA;U5WHU4ow4ZQs96M8rXFxdaDa3lw7O94HulLdRHO7Sxr/ALFHVR8stxm4242cATIHTb5Mc8z6rcW2&#xA;u3aWVGv5F05bVCQBztmu7jcnorSSQo3+sO2aftIXkHuel7CPDhkf6X3Po7y/pEWjaDpujxOZItNt&#xA;YLSORurLBGsYJ+YXMQu1CPxS7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqpW&#xA;9rbW0Zjt4khjZ5JWSNQoMkrmSR6D9p3csx7k1xQ+V/NMxtfzY1MOCoudVuBHJ2YGArIlfFXSI071&#xA;9sxdSLB8h+P0u47MlwmPnI/dv/vUV5m20C+f/fUZl/5FEPX/AIXMLD9Yd5rP7qXkL+SZ5U5LM/yg&#xA;TzDqEWq+W4Nch0bS9KcXkci26y3f1e+Z2KxSTN6EapOsm7RP1A2zc6UicAXjO1MZxZiByO/z/azX&#xA;zraflp5R/L7XrbU54bmTWLWWSU3sgur3UJxERCQDV3KEDhwULH1HECuZYdWS840lGTSrJH+2sEQb&#xA;eu4QA75vI8g8ZkPqPvQ3mSYpot3DEa3d1E1vZxA0aSeYelEi+7O6jI5ZVEtumgZZIgd7KX/Kz8xd&#xA;ItFiUaPfWVrGF+tC6msiEjXdnieCZEAA/wB+nMOOsoUQ7XJ2TZsSYZ5f/KbWPOD6V5u1NLNtI1cp&#xA;cz6NPJcJNFZSwrHWK4t/TYvKiiQD4QPsmoZswM+XjmS7jR6bwsYjze+2lrFaWkNrCXMUCLHGZJHl&#xA;figoOUkhd3O27MST3yhy1XFLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqnc&#xA;XEFtby3E7iKCFGklkY0VUUVZifAAYofKl/OuoPp9/JGTPqWrS6lHE326XDzT1bw9OOTf5UzX5JXO&#xA;XdT02DFw4sQPPiv7z9gRnmgj/DupJ3mt5IV/1pVMaj/gmGUYfrHvc7Wf3Mh3xI+eyZkkAkCp7DKn&#xA;IYAuuaJP5ghvtbQ2Nyn7prCeCDmQpJBSeeO/Vev++F5eI2zcYcfDGgbeM12oOTJco8JHT8fqe36q&#xA;v5Mfo+81XT/LV3d6XJDxv73RopbK0kSb4CpZJbOKblyo3Dl13wQjkO1tE5YwLpG/lxYfkrfan5kO&#xA;uWGni5a9hGmW3mQRTXIshZQ7xC/aWTibj168T+rM6pj6/qdfCWI/3dcPk9H0rTPyW0u6S80m08t2&#xA;N1Gax3NrHYwyKaEVDxhWHU4Gxjv54/mLokHkLUdG0bU7W713XYjp9pbQSpK6x3H7uaZxGWKokTN8&#xA;R/a4jqcIFsZSAZPYWVvYWNtY2y8La1iSCFPBI1CqPuGYzmK+KXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq83/OjzB6elQeV7Y/6TrnL66ymhjsIiPWr/AMZiRCB3DMf2cqy5&#xA;OCNuVotP42QR6cz7nkGnUvtUn1Ib21uGs7HwNG/fyD5uoT/Y++a6fpjXxP6Hp8XrmZ9B6R+k/Pb4&#xA;NTMdU1dbdd7DTXWS5b9mS5G8cfyi+23+Vx8DiPTG+p+5ZfvMlfww5+cug+HP30nGUuWgdZlS2shq&#xA;DIrnTZYb8BwGH+iSrORQ+Ijocv08qmHB7RxiWCXkL+W72382mp5GuIhsZ7vToAvisl/ArUHeiEmn&#xA;hm6wC5j3vEaw1ikfIsHmtbacUnhSUUpR1DbfTnQEW8SJEckP+hdG/wCWC3/5FJ/TBwDuZeLLvKX+&#xA;Y7W0sfLmo3Frbxwm3i+ssI0C1FuRLvxA/kyvLEcBbtLkPixs9X0ACCAQag7gjOfe3bxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksd8w+dItFvVtDpV/floxIZbNYGRakjg3qzRNy2r06HIHJEc&#xA;ykRJ5BK/+Vow/wDUuax/yLtP+ynB4se9PBLud/ytGH/qXNY/5F2n/ZTj4se9eCXc7/laMP8A1Lms&#xA;f8i7T/spx8WPevBLud/ytGH/AKlzWP8AkXaf9lOPix714JdyRebvzk1fT7COTSfLk8TSSJDJe6s0&#xA;MNtC00ixRFxDLI7AySDluvEb79MlGcT1YyjIdHlXnvzhpurWdnrVnrE9/wCYruWHT7zV0RLbSreC&#xA;QM3pRW8tLg8HZnRnAbqWbjRchOPF9Q5b+bfps0oSHDKuLYnp+AqTrLaW1ro+iwPJeSqI7aKJRI0c&#xA;SUEk5DMgIQHuw5MQK75r8ceOVy5dXpNXnGnxCMPq5D9ap5Y8rX8miQXOmam0FtctLPDDfW63DBJJ&#xA;ndCzxSQliVIJJY75u5dnQyb8i8rh7bzYfSKI801/wv5lPXV7MDvxsJQfordkfhkP5Ih3lu/0SZv5&#xA;sft/Wg9c8lXc+iX6XGrzzStbTenBCkcEbt6ZoGFHkK16jnuOuXQ7Oxw36uLm7bz5Rwk1E9zM/O/5&#xA;gP5j8qWEen6NewXF1e6XJbS3YgS0ZpbuFUEkkUs0iqTIKMsZ7bUrlGDKBkHe16rEZ4iOQIQ06eaL&#xA;RHe88vz+nGC0k8FxZvEAO9ZJoZP+EzdjVDqHlz2ZPoQt9TzCdl8takWOwH+iDf5tcAD6Tj+Zj3FH&#xA;8m5O+P4+CA8y2vnNvLWrSjQPq0UdncPIb26gB4LExai2zXPJqDYch8xkMmpsGg3YezSJAmXXoz/T&#xA;PzLgg020g/QOsz+lDGnrmK0BfioHKn1nbl1zQnLHverEJdyJ/wCVow/9S5rH/Iu0/wCynHxY96eC&#xA;Xc7/AJWjD/1Lmsf8i7T/ALKcfFj3rwS7nf8AK0Yf+pc1j/kXaf8AZTj4se9eCXc7/laMP/Uuax/y&#xA;LtP+ynHxY968Eu5OvLfmqLXTcKun3mntBxNLxYVLhq/Y9KWb7NN606jDGYPIoMSOaeZNDsVdirsV&#xA;dirsVdirsVdirsVSLznrU2k6JJPbyNDdyMsdtKtrNegMTyPKKD4qcFbckYDfTddurx6/NtqF5Le6&#xA;hY6XeXkx5TXM/lK4llc0pVnerNsO5yHHP+b9q8EO/wCxD/UNH/6tGjf+EdN/TD4k+77V4Id/2KVx&#xA;H5cthGbjTdDhEr+nHz8oSrycgtxFepopOA5J932rwQ7/ALG7aHy/cwrPb6Zoc0L7pInlCVlNDTYj&#xA;D4k+77V4Id/2Kn1DR/8Aq0aN/wCEdN/THxJ932rwQ7/sSDzZpPlu4Wxhv7CxtNOSZri7nsNFbQ5y&#xA;kETOY47qRXUswqRHxPLjQUNMlGc+oYyhHvZTYar+Xnli2li0zyvHc+ZLhTptv9Ykm1AOfWvYJweQ&#xA;mlEMa2DO6xp8SuoAoaisiUuuzYDGPTdIBoug6dpNxHeLYMJi/O/vPLFw7xtO3FRE0nwRKrOFjRFC&#xA;jbbJCc+kftYmMesvsRNlfLZWcFnb6/xgto0hiX9C3myRqFUfa8BmSNRmH8DjHT4f56v+mZP+ph/7&#xA;kt5/zVh/M5/5iPy+H+egPrlrd6gL/wDxIJngjltAg0a7ZF5splFOX2j6ag/LI/mM38xP5fD/ADmr&#xA;TTtAg0TSjatYRJaGwls9bi8sTpcyNBLE8EhuV3YzsihiD8fI+OUDJkv6ftbzjhXP7GQatr+r6rpd&#xA;5pl1rBNtewyW83HQb8NwlUqeJ5bGh2OW+Pl/mtIw4v5yta+eNbmt45INeE8RFFlGhXzBqbVqH9sf&#xA;Hy/zV8DF/OUNZ8z6reaRfWl7rnp2dxbyxXMh0K+ULE6FXNS9BRSeuJz5f5qjBi/nIKGw0QQxhdK0&#xA;eRQoAc+T5mLCnUmm9cp8Sfd9rkcEO/7F/wBR0b/q0aN/4R039MfEn3favBDv+x31HRf+rPo3/hHT&#xA;f0x8Sf8AN+1eCHf9ilcR+XbaL1bjTNEhi5InOTyhKq8pGCItSOrMwA98fEn3favBDv8Asdbx+Xbm&#xA;L1bfTNEmi5OnOPyhKy8o2KOtQOqspB98fEn3favBDv8AsTDS7iLSbxb3SrTTrC8QEJc2vlO5hlAY&#xA;UYB4+LCo674OOf8AN+1eCPf9j2Lynrg1jR4rhjI1xFSK6eS2mtA0qqCzLHMA3E1rsT4VyYvqpron&#xA;OFXYq7FXYq7FXYq7FXYq7FXYq7FXYqwr80P7jy7/ANtiP/qEucry/SWUPqCL/K7/AJQLSf8AUk/5&#xA;PPk2DKsKVG7s7S8tpLW8gjubaUcZYJlV0YdaMrAg4oSvSvJPk3SLlbrStC0+wukBCXFtawxSKGUK&#xA;QHRQwqood8bUAMb/ADbuucGhaQD/AL3agtxOvjDYo1xX6LgQ5fp43Jo1MqixzNk6xLPMOpy6fpxa&#xA;2USX9y621hEejTy7LX/JXd2/yQcEjQZRFojSdNi03ToLKJi6wrRpG+07k8nkb/KdyWPucQKCCbT6&#xA;Ov8Ayo/yeR2j8rE/IXliSfuzVw+t2k/o+DLMzXXsc8m/6M2taQdv0dqU7RD/AIpvaXqU/wAkG4ZB&#xA;/q4Ako3zfI0XlPWpVoWSwumAO4qIWO+J5KObL9L/AOObaf8AGGP/AIgM17tAicUuxViP5qf8oh/2&#xA;89H/AO6ta5GXI+4qOY94d+Vf/KIf9vPWP+6tdYx5D3BTzPvLLskrsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVYV+aH9x5d/7bEf8A1CXOV5fpLKH1BF/ld/ygWk/6kn/J58mwZVhS7FXYq8t8+zm5/MCC&#xA;Dqml6WGHgHv7g8h8+Nkv0H3zM0g5lwdWeQQGZrhMZs7o6l5yleVGW0sIHTSnP2JpRIYryVPExMFh&#xA;9qt45WJAy9zYYkR97Jssa0wikWT8g9JZdxYWWmrJ89PnhD18N4DU9s1Q2m7U7wZfma69g2j3csX5&#xA;pa6rf7zX0cdqh7CfT7e3uCvzaPU6/wCxyAPqIbDH0gsj83RNN5U1qFSA0lhcopPSrQsN8keTAc2V&#xA;6JMs+jWEyV4S20LrXrRowRmvLtAjcUuxViP5qf8AKIf9vPR/+6ta5GXI+4qOY94d+Vf/ACiH/bz1&#xA;j/urXWMeQ9wU8z7yy7JK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWFfmh/ceXf8AtsR/9QlzleX6&#xA;Syh9QRf5Xf8AKBaT/qSf8nnybBlWFLsVdiryTzECfP2vOWBolkgFdwBCW+6rmn05n6X6XXav6kq1&#xA;++lsNEv72EcpreCSSFT0MgU8Aa/5VMyZGhbjxFmmQ+d/KkHl/wAoeXrq0+JfK5SC7lNeT2l0Fhup&#xA;G9/V9Odz/knNdhyVP3uxz47h7ktzZOsVtBk+t/l/5x8oE8b20gvprEV3a3v1lnhkUdfguGkj9uI8&#xA;c1uaPDN2WCXFCmY6bepfada3sdOF1DHMlNxSRQw/XmU4RYfNF6Wk6jrwFJ9G8z/WZwO0EkUVlNUe&#xA;AtpvV38AfDMYyqbliN42bSxJLE8Ug5RyKVdfEEUIzJcRb+WlxJL5F0iKU1msYm06Zj1MmnyNaOT7&#xA;loDmBMUXZwNgMmyLN2KsR/NT/lEP+3no/wD3VrXIy5H3FRzHvDvyr/5RD/t56x/3VrrGPIe4KeZ9&#xA;5ZdkldirsVdirsVdirsVdirsVdirsVdirsVdirCvzQ/uPLv/AG2I/wDqEucry/SWUPqCL/K7/lAt&#xA;J/1JP+Tz5NgyrCl2KuxV5H5jQp+YOu12MkNjIv8AqmN0r96HM/SfS67V/Uk3mZOeiXC7UYxhgehU&#xA;yLyG/iNsvyfSWjH9Qe3X9ja39jcWN5GJrS7ieC4ibo8cilXU/NTTNS7d4vp0N5p893oN+xa+0eQW&#xA;5lbrPbkcra4/56R05U/bDDtm0wz4ouqzQ4ZLpb0aLremeYhtFaSfVdTBpxewu2WObnXtE/Cb/YHx&#xA;yOohcfcz086kyzyHyTylp9o9S+nLJpz168rCVrU196w75CBsImKJdpeljU9K/MLRCK/XbqWJF78b&#xA;rSbUV/5GFqfLMbN9TmYN4I7y3qX6U8u6XqVeX120guK+Pqxq/wDHMsOERur/AJdfBY6xbdBb6xe0&#xA;XuPXcXJr8zPXMLKPU5+A+llmVtzsVYj+an/KIf8Abz0f/urWuRlyPuKjmPeHflX/AMoh/wBvPWP+&#xA;6tdYx5D3BTzPvLLskrsVdirsVdirsVdirsVdirsVdirsVdirsVYV+aH9x5d/7bEf/UJc5Xl+ksof&#xA;UEX+V3/KBaT/AKkn/J58mwZVhS7FXYq8o83qE/MfUVH7eladKa+JnvUp8qRjM7Sci4Gr5hJNcj9e&#xA;1trQfavL6xtV7/393FGT9AauX5jUS0YRcg9yzVO2ed/mtpgtJLDzXCu1qVsdWp3s53pHIf8AjBOw&#xA;Psrucv0+ThlXe42px3G+5jd/Zw31jc2UwrDdRPDIP8mRSp/A5siLdcDSN/J7Ubi+8rTtctyuor2Y&#xA;XR/5eJVSe4/5LTPX3zEhypvyc7Zb5HHLWfNsgOw1KCIj/KXTbV/1SjMbP9Tl6f6Ut8kp9X0WTTjs&#xA;dMvb2xAPaOC6kWH74eBzJxm4hxMoqRTP8vv73zN/22X/AOoO2zGzfU5mn+lluVN7sVYj+an/ACiH&#xA;/bz0f/urWuRlyPuKjmPeHflX/wAoh/289Y/7q11jHkPcFPM+8suySuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxVhX5of3Hl3/ALbEf/UJc5Xl+ksofUEX+V3/ACgWk/6kn/J58mwZVhS7FXYq8r877fmN&#xA;LTblo9py9+N1dU+7kczdJ1cDV8wl9lALvzh5YtCKp9ee6lH+Ta2s0in6JvTyzUn0sNKPU9kzXOyQ&#xA;2p6dZ6np11p17GJbO9he3uIj0aOVSjr9IOKHi+i/W4baXTr5ueoaVNJYXchFC7wGiy0/4tj4Sf7L&#xA;NrinxRt1OWHDIhH/AJbyafpV/wCZtMeRIZJr9dVQOwXlHeQRoWFaf7ut5MgRRLLmAzL8upoLmXzR&#xA;eQSLLBc6weEiEMh9GwtLduLDY/FCa+B27ZhZvqc7APShNJAg80ea7ToPr8N1GP8AIuLKCv3yxyHL&#xA;8B9Lj6gepG/l+y/WvNcYPL09ZIYjpV9Ps5Pw50yjN9Tkaf6WXZU3uxViP5qf8oh/289H/wC6ta5G&#xA;XI+4qOY94d+Vf/KIf9vPWP8AurXWMeQ9wU8z7yy7JK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWF&#xA;fmh/ceXf+2xH/wBQlzleX6Syh9QRf5Xf8oFpP+pJ/wAnnybBlWFLsVdiryT8xr6zsPzFga+mS1S9&#xA;0qKO0eYhFleC5maVEZqAsgmQletDmZpZAW4WriTTvIU1rqX5hxvbSx3MWl6bctO8TBxHNdSwLCGI&#xA;rxLRxS0GOqkCBSNJEgl63mG5zsVeYeffLms2vmy21TR47aaPzC8VjdRXM0kCx3cMMrRzlkinqskU&#xA;SxHatQnatL8Wo4AbcfLp+MikjTTtH8t+czP54FjqttNYLHqEwtPUs9JYyM1oJZZQ9frVJVViFPJQ&#xA;OPxZRlyyyixtTbixRxGjvbOvylurG48kwPYJ6dot5qKwR8DEVjGoTlKxkKUqhB4026YByZ1WyH1r&#xA;yvoGsfmVa/X7NJyNHmaZwWRiVuYhDzZCpagMnGvTfI5JmI2TCAlLdW/KyOwttK1nTLG3FvBpmuan&#xA;bhQAK8rlp1+YCzBRXsMkDYDGqJZnhS7FWI/mp/yiH/bz0f8A7q1rkZcj7io5j3h35V/8oh/289Y/&#xA;7q11jHkPcFPM+8suySuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtMyr9ogfPArCPzOmiaLy6qsCf0xH&#xA;0/5hLnIZT6SygPUER+WN3CnkTSlNahJK0H/Fz5K2IDJjqEXZW/DHiTwtfpBeyH78eJPCxDWfze8u&#xA;aewjgR712lNusyFIbMTKaGNr65MNqGB2KiQt/k1yVHmw4hyQena5pVxq0+oa1Paa1r17bra2XljR&#xA;T+k2gtg/qMGIA5NI5UySuqRjio7cjVISlsAzBjHclF+WTqen+cNdtrzR4NFeax027isIZUm4JI93&#xA;EDIYkSNXJgNVQsvfkanLOExDCMhIllv6Ql/lX8cjxM+FC6prV3aaZd3cFt9Zmt4ZJYrZTxMjIhZU&#xA;BOw5EUw2vC8h8r6z+ZHmKe28+a3ayRaDZxG50gX0tvpejwyyo0Zupmd5Ll0jR2EZ4vyryHAUrI45&#xA;EUdms5Ig2LKXa75r82a75d1by15K0ebWbLVZXfzB5onhEP164NEf6us3wwxQ+mkcabyBB1RxyNli&#xA;IpqAlI2zz8l7DzPovlOeDzBb+hfXF7JOsTOruEMcacnZCRyd42c/PKABEUHLnIzNlCaZ+aflVfOX&#xA;mHVbtrkxRW9tp+ltBazzpcrbSTtOYHiR1JM8vp7kfZB6GuVZpDlY+bPFilzAJvlsiPyW12S80bXr&#xA;ia3MF1Lrt9NcwlgfTe44T+nUVB4LKF+Yy0SBArk1yxmMiDzt6GNQXuh+/DxI4Vwv4e4Yfd/XHiRw&#xA;sU/NC6ik8pBVJ5HU9HoCP+1ta4JHY+4qBuPeF/5WTRDykVLAMNT1ioO3/S2usMTsPcFI3PvLMAQR&#xA;UGo9sKG8KuxV2KuxV2KuxV2KuxV2KuxV2KtOpZSAeJPQjtgVAPZT1qCH+nf8cjTLiYt570TXLyz0&#xA;6bTbM3k+n3yXT2wdY2dBFLEQrPRaj1QdyMEo2CE8W4Kv5L0nUNK8rafY38Yju4kJmjU8grO7Px5D&#xA;Y05U2wlQnWBKG1GyS+0+6spGZI7qKSF3U0YCRSpII774hBDENI0T829H0yDRrXzXDPpdqiwW0TWl&#xA;rHxhQBVj4m3n2AHVnY5f4rR4BdHoX5v04wedYNMhH+6LbTbVkJrXkTEtm1fnUYPFXwPNNPK/l3zJ&#xA;YalqGp+Yde/T9/ew21sk31b6t6cNq0zqlBLMGq1yx7ZCc7bIQ4WSZBsQOt6b+lNFv9M9Zrf69bTW&#xA;31iP7cfrRlOa+68qjCDSCLDDh+WeqaxdQT+d/MM+vQ2dBZ6bEgsrOMIAF/dQkKCOPVApI+Fiw62H&#xA;KejVHCOrOrW1trS2jtrWJILaFQkMMahERVFAqqKAAZU3KuKvHoPyP80WMS2Ol+cWttKjqLeFrKOR&#xA;0WtQpYvyb5hl+WVywY5GyN2/Hq80I8MZUA9B8leTbHynpMlhazy3UlzO93eXU5q8s8iqrN7CiAAf&#xA;icsHKmkmySerIMUOxVIfPOk6pqflx7fTbf6zeR3VjdRwFgnqC0vYbl0DN8ILLEQK7Vxq0Ff5D0PW&#xA;NP8ALiQahbfV7uS6vrp4OSvwF3ezXKKWX4SQkoBptXDSAWSxWU4NS3D5dcaUyR2TYuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KtFQeorgVoxRnqin6BittGCH+RfuGNLbX1aD+QY0ttfVbf+QY0tu+&#xA;q2/8g/HGlt31W3/kH440tu+q2/8AIPxxpbd9Vt/5B+ONLbvqtv8AyDGltsW8A/YGNLbfoQ/77X7h&#xA;jS236cY6KPuGKrgAOgwq7FXYq7FXYq7FXYq7FXYq7FUb/uJ/4t/DJelr9Tv9xP8Axb+GPpX1O/3E&#xA;/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8A&#xA;xb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/&#xA;hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+&#xA;lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1&#xA;O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9&#xA;xP8Axb+GPpX1O/3E/wDFv4Y+lfU7/cT/AMW/hj6V9Tv9xP8Axb+GPpX1P//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F117407206811822AB2A6B75D99AD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8072EAEFE205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>2742.000000</stDim:w>
            <stDim:h>1828.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1828 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1828 li
2742 1828 li
2742 0 li
cp
clp
0 0 mo
2742 0 li
2742 1828 li
0 1828 li
0 0 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.933333 .866667 .831373 rgb
ef
496.329 1655.23 mo
496.329 1612.72 884.697 1578.26 1363.77 1578.26 cv
1842.85 1578.26 2231.23 1612.72 2231.23 1655.23 cv
2231.23 1697.73 1842.85 1732.19 1363.77 1732.19 cv
884.697 1732.19 496.329 1697.73 496.329 1655.23 cv
cp
.882353 .788235 .737255 rgb
ef
465.263 830.977 mo
2178.02 830.1 li
2196.51 861.715 li
451.734 862.168 li
465.263 830.977 li
cp
.8 .647059 .498039 rgb
ef
1449.49 730.528 mo
1449.49 730.528 1470.66 738.077 1492.17 742.041 cv
1517.91 746.78 1547.05 748.128 1580.37 748.964 cv
1641.55 750.5 1694.22 736.669 1694.22 736.669 cv
1694.22 736.669 1696.49 750.536 1698.87 764.393 cv
1703.9 793.836 1711.4 845.289 1712.68 918.557 cv
1713.5 964.721 1711.8 1033.5 1714.61 1093.9 cv
1716.65 1137.68 1731.96 1188.5 1734.73 1230.55 cv
1739.7 1306.24 1738.12 1361.97 1738.04 1402.27 cv
1737.98 1429.02 1739.97 1454.5 1739.97 1454.5 cv
1739.97 1454.5 1729.07 1465.02 1705.56 1468.02 cv
1676 1471.79 1661.13 1460.02 1661.13 1460.02 cv
1661.13 1460.02 1659.62 1401.46 1638.28 1298.99 cv
1633.75 1277.26 1627.84 1226.58 1622.12 1202.72 cv
1600.84 1114.06 1575.78 1050.17 1575.78 1050.17 cv
1575.78 1050.17 1564.09 1121.24 1564.12 1165.83 cv
1564.12 1165.83 1570.54 1213.61 1570.64 1284.42 cv
1570.75 1355.22 1564.56 1449.06 1564.56 1449.06 cv
1564.56 1449.06 1557.27 1457.33 1539.82 1459.46 cv
1522.38 1461.59 1494.77 1457.55 1494.77 1457.55 cv
1484.33 1418.5 li
1484.33 1418.5 1484.07 1374.79 1475.61 1308.59 cv
1466.85 1239.96 1449.77 1147.35 1443.46 1065.06 cv
1431.06 903.398 1449.49 730.528 1449.49 730.528 cv
cp
.729412 .8 .839216 rgb
ef
1125.17 827.179 mo
1124.8 808.076 li
1131.13 796.427 li
1361.67 788.818 li
1361.67 788.818 1373.08 831.434 1375.91 886.763 cv
1377.8 923.698 1374.13 960.637 1375.13 1004.13 cv
1376.19 1049.8 1382 1102.05 1387.74 1141.04 cv
1392.63 1174.2 1410.68 1190.67 1426.1 1223.75 cv
1443.41 1260.9 1457.95 1312.84 1457.95 1312.84 cv
1500.24 1470.98 li
1500.24 1470.98 1488.9 1494.22 1467.87 1500.21 cv
1427.02 1511.84 1413.2 1499.89 1413.2 1499.89 cv
1413.2 1499.89 1401.91 1461.26 1356.64 1355.98 cv
1337.68 1311.9 1310.25 1266.51 1287.68 1216.58 cv
1256.35 1147.25 1232.07 1078.77 1232.07 1078.77 cv
1232.07 1078.77 1197.35 1132.27 1192.67 1171.78 cv
1188.03 1210.84 1192.96 1259.04 1187.36 1313.86 cv
1182.05 1365.92 1173.94 1409.75 1167.44 1450.85 cv
1160.82 1492.72 1155.87 1531.4 1155.87 1531.4 cv
1155.87 1531.4 1132.73 1545.75 1105.28 1541.73 cv
1072.44 1536.92 1067.45 1521.97 1067.45 1521.97 cv
1067.45 1521.97 1068.93 1445.76 1066.2 1356.72 cv
1063.97 1284.59 1056.91 1205.33 1060.42 1141.31 cv
1063.86 1078.47 1081.35 1017.33 1094.75 960.548 cv
1111.85 888.08 1125.17 827.179 1125.17 827.179 cv
cp
.521569 .615686 .701961 rgb
ef
416.463 891.282 mo
2236.62 891.786 li
2256.8 928.959 li
2073.23 930.125 li
2072.8 1680.15 li
2072.8 1680.15 2065.8 1684.2 2057.67 1684.11 cv
2049.54 1684.02 2040.29 1679.81 2040.29 1679.81 cv
2039.78 930.334 li
695.508 928.982 li
695.271 1679.26 li
695.271 1679.26 687.881 1684.01 679.582 1683.93 cv
671.284 1683.86 662.079 1678.95 662.079 1678.95 cv
661.563 929.058 li
402.068 926.112 li
416.463 891.282 li
cp
.8 .647059 .498039 rgb
ef
1497.16 117.084 mo
1522.51 112.371 1561.71 86.397 1607.82 89.5234 cv
1653.93 92.6494 1681.59 126.409 1681.59 126.409 cv
1681.59 126.409 1695.96 151.417 1706.55 186.286 cv
1716.51 219.045 1722.15 260.479 1739.33 298.964 cv
1758.53 341.974 1793.18 367.417 1803.88 402.814 cv
1816.37 444.098 1788.91 476.148 1787.15 495.68 cv
1784.63 523.827 1803.56 529.549 1803.56 529.549 cv
1803.56 529.549 1792.09 532.94 1782.14 530.216 cv
1772.18 527.496 1765.51 516.401 1765.51 516.401 cv
1765.51 516.401 1761.27 526.597 1766.02 536.613 cv
1770.78 546.63 1782.76 558.727 1782.76 558.727 cv
1782.76 558.727 1765.47 562.032 1754 553.497 cv
1742.52 544.963 1736.85 524.59 1736.85 524.59 cv
1555.15 329.094 li
1555.15 329.094 1548.44 322.718 1543.62 315.551 cv
1538.8 308.383 1535.86 300.424 1535.86 300.424 cv
1501.31 163.112 li
1501.31 163.112 1497.86 166.763 1495.36 173.966 cv
1493.1 180.488 1493.37 192.52 1490.12 187.957 cv
1482.3 176.994 1473.13 121.551 1497.16 117.084 cv
cp
.831373 .631373 .509804 rgb
ef
1050.11 159.769 mo
1050.11 159.769 1067.37 133.878 1104.46 160.2 cv
1109.03 163.44 1118.39 184.549 1125.45 207.904 cv
1134.79 238.836 1143.44 275.99 1164.41 303.204 cv
1179.87 323.278 1203.09 332.889 1223.69 341.893 cv
1242.46 350.098 1258.8 357.563 1269.81 376.715 cv
1280.3 394.93 1278.14 418.389 1283.02 439.983 cv
1286.1 453.63 1297.34 469.32 1299.44 473.626 cv
1300.83 476.492 1289.37 475.075 1278.74 467.013 cv
1269.98 460.376 1261.79 447.021 1261.79 447.021 cv
1256.13 462.369 li
1256.13 462.369 1253.01 417.421 1216.76 377.556 cv
1196.48 355.257 1158.57 346.461 1135.5 332.541 cv
1117.33 321.576 1111.14 302.91 1111.14 302.91 cv
1092.02 249.031 li
1088.33 283.023 li
964.736 343.875 li
964.736 343.875 957.768 354.619 957.091 366.651 cv
956.416 378.681 962.03 392 962.03 392 cv
962.03 392 955.527 389.309 950.647 384.266 cv
945.762 379.223 942.498 371.828 942.498 371.828 cv
932.791 382.409 li
932.791 382.409 933.378 356.779 926.389 346.376 cv
918.182 334.157 901.812 335.277 895.597 310.11 cv
889.68 286.131 889.405 244.303 894.359 223.359 cv
897.978 208.064 914.645 199.226 928.853 187.044 cv
950.04 168.874 973.113 150.101 998.559 146.434 cv
1024.81 142.652 1050.11 159.769 1050.11 159.769 cv
cp
.572549 .427451 .360784 rgb
ef
1067.23 425.51 mo
1067.23 425.51 1064.62 384.469 1076.6 366.251 cv
1093.15 341.085 1134.79 344.263 1161.94 346.41 cv
1183.15 348.083 1208.58 369.061 1226.6 391.512 cv
1241.41 409.965 1252.21 443.966 1254.33 454.831 cv
1256.45 465.696 1260.76 447.894 1260.76 447.894 cv
1260.76 447.894 1279.61 476.715 1296.91 516.095 cv
1314.21 555.474 1329.97 605.416 1329.97 605.416 cv
1351.26 686.651 li
1351.26 686.651 1362.06 728.279 1366.43 757.321 cv
1368.49 771.065 1369.65 778.103 1366.56 783.764 cv
1358.9 797.817 1341.5 796.479 1317.05 800.709 cv
1268.28 809.151 1196.97 811.467 1157.59 804.311 cv
1138.52 800.848 1129.1 791.953 1129.1 791.953 cv
1125.86 782.097 li
1065.32 865.993 li
1065.32 865.993 1049.37 869.264 1026.67 860.555 cv
1011.27 854.646 1005.03 839.18 1005.03 839.18 cv
1019.17 807.404 li
1019.17 807.404 1001.73 801.756 992.105 794.055 cv
982.481 786.35 980.676 776.59 980.676 776.59 cv
980.676 776.59 1005.26 733.354 1020.6 699.315 cv
1035.95 665.279 1042.05 640.44 1042.05 640.44 cv
1039.88 623.435 li
1049.68 599.904 li
1051.16 480.142 li
1055.47 436.225 li
1067.23 425.51 li
cp
.8 .329412 .239216 rgb
ef
1313.23 559.314 mo
1397.35 527.045 li
1422.55 497.664 li
1572.94 422.049 li
1682.84 318.503 li
1682.84 318.503 1751 354.615 1752.67 389.289 cv
1754.34 423.751 1747.94 465.643 1738.06 511.204 cv
1726.06 566.593 1709.93 623.073 1709.93 623.073 cv
1704.75 663.518 li
1703.31 730.294 li
1703.31 730.294 1670.2 749.672 1590.01 749.092 cv
1552.89 748.822 1500.09 744.16 1470.29 736.433 cv
1447.77 730.593 1442.75 721.127 1442.75 721.127 cv
1448.11 670.025 li
1456.29 573.388 li
1456.29 573.388 1446.67 585.732 1431.82 594.145 cv
1416.99 602.564 1396.92 607.047 1396.92 607.047 cv
1330.62 608.185 li
1313.23 559.314 li
cp
1 1 1 rgb
ef
983.152 784.755 mo
983.152 784.755 990.499 791.121 998.034 796.309 cv
1005.57 801.495 1013.31 805.512 1013.31 805.512 cv
996.128 830.816 li
996.128 830.816 976.302 835.272 959.463 836.446 cv
946.309 837.365 946.012 847.282 946.012 847.282 cv
969.275 853.09 li
969.275 853.09 975.818 847.412 978.502 850.944 cv
981.18 854.476 979.991 867.218 979.991 867.218 cv
993.281 861.824 li
1006.95 845.715 li
1006.95 845.715 1015.67 853.775 1026.82 859.352 cv
1037.96 864.928 1051.52 868.021 1051.52 868.021 cv
1051.52 868.021 1042.18 883.811 1030.97 894.751 cv
1017.37 908.035 1001.37 917.144 1000.73 920.114 cv
999.605 925.255 1004.35 941.389 1002.34 944.718 cv
995.488 956.072 985.284 942.83 985.284 942.83 cv
985.284 942.83 977.569 949.444 972.189 949.614 cv
966.816 949.783 963.777 943.509 963.777 943.509 cv
963.777 943.509 956.237 951.952 950.459 951.961 cv
944.683 951.97 940.67 943.544 940.67 943.544 cv
940.67 943.544 935.864 945.762 932.838 945.106 cv
909.975 940.188 910.715 922.006 910.715 922.006 cv
914.663 889.309 li
933.532 879.022 li
928.605 874.519 li
928.605 874.519 920.795 876.197 915.805 873.254 cv
910.816 870.315 908.645 862.757 908.645 862.757 cv
925.686 860.695 li
927.409 832.855 li
903.778 831.068 li
903.778 831.068 905.199 825.617 912.539 821.453 cv
923.419 815.279 943.074 809.122 956.136 804.922 cv
972.582 799.636 983.152 784.755 983.152 784.755 cv
cp
1 .866667 .752941 rgb
ef
1372.47 600.114 mo
1417.66 613.951 li
1488.29 614.504 li
1488.29 614.504 1484.68 625.052 1483.53 637.935 cv
1482.37 650.814 1486.29 666.16 1486.29 666.16 cv
1486.29 666.16 1452.94 662.686 1427.07 662.654 cv
1417.47 662.641 1404.09 667.512 1391.24 673.521 cv
1381.54 678.061 1373.81 683.956 1358.82 684.851 cv
1340.18 685.966 1290.37 669.666 1290.37 669.666 cv
1288.98 648.164 li
1288.98 648.164 1315.48 642.129 1332.99 636.089 cv
1350.49 630.048 1359 623.997 1359 623.997 cv
1359 623.997 1334.51 623.298 1322.9 618.148 cv
1318.25 616.086 1315.97 612.384 1317.67 609.153 cv
1320.48 603.829 1333 605.757 1345.25 604.797 cv
1359 603.724 1372.47 600.114 1372.47 600.114 cv
cp
ef
1511.07 148.694 mo
1516.57 143.185 1524.94 144.035 1532.53 151.243 cv
1543.26 161.436 1553.45 181.655 1568.26 189.983 cv
1584.28 199.002 1607.46 188.626 1607.46 188.626 cv
1607.46 188.626 1624.05 180.957 1628.46 189.831 cv
1639.47 212.034 1620.6 226.003 1620.6 226.003 cv
1620.6 226.003 1623.52 253.006 1637.75 275.202 cv
1651.98 297.4 1677.51 314.79 1677.51 314.79 cv
1677.51 314.79 1649.04 331.191 1628.33 346.13 cv
1607.64 361.072 1582.97 378.444 1576.28 377.996 cv
1570.4 377.601 1569.41 337.812 1572.17 329.421 cv
1576.99 314.79 1566.66 293.448 1566.66 293.448 cv
1566.66 293.448 1536.62 301.868 1525.18 296.983 cv
1518.6 294.178 1516.06 284.603 1513.12 276.672 cv
1509.82 267.789 1506.52 260.267 1506.09 252.685 cv
1505.65 244.825 1490.63 238.084 1491.74 229.921 cv
1492.65 223.223 1504.95 214.413 1505.33 204.764 cv
1506.04 186.937 1500.94 176.884 1502.62 165.678 cv
1503.48 160.03 1505.56 154.202 1511.07 148.694 cv
cp
ef
919.155 229.825 mo
919.155 229.825 953.302 256.998 984.373 253.688 cv
1019.27 249.971 1027.56 218.309 1042.41 221.924 cv
1069.71 228.574 1056.1 265.903 1056.1 265.903 cv
1056.1 265.903 1073.98 277.542 1080.71 280.586 cv
1087.43 283.63 1099.37 297.858 1107.85 305.085 cv
1120.64 315.984 1122.92 321.665 1132.61 328.699 cv
1142.28 335.721 1159.35 344.102 1159.35 344.102 cv
1159.35 344.102 1106.93 341.021 1084 360.742 cv
1061.07 380.464 1067.64 422.988 1067.64 422.988 cv
1058.11 431.896 li
1058.11 431.896 1059.75 400.259 1054.23 381.742 cv
1048.72 363.224 1036.05 357.828 1036.05 357.828 cv
1036.05 357.828 1019.92 369.512 1008.62 373.99 cv
999.152 377.746 994.568 373.368 985.371 364.928 cv
978.995 359.073 971.583 348.454 964.214 341.989 cv
954.887 333.806 937.696 334.346 937.928 328.766 cv
938.171 323.058 944.29 311.889 943.806 306.072 cv
942.422 289.312 923.999 278.87 918.954 265.428 cv
912.429 248.054 919.155 229.825 919.155 229.825 cv
cp
ef
1386.05 1578.5 mo
1418.24 1561.41 1499.29 1570.7 1528.06 1542.03 cv
1541.49 1528.65 1558.03 1517.55 1558.03 1517.55 cv
1558.03 1517.55 1575.06 1581.84 1564.83 1598.89 cv
1560.74 1605.69 1519.85 1605.56 1519.85 1605.56 cv
1495.9 1608.1 li
1418.23 1618.15 li
1418.23 1618.15 1371.46 1620.2 1367.69 1607.48 cv
1365.03 1598.51 1368.04 1588.07 1386.05 1578.5 cv
cp
.866667 .431373 .254902 rgb
ef
1053.56 1580.78 mo
1075.47 1561.31 1077.07 1532.81 1077.07 1532.81 cv
1077.07 1532.81 1094 1540.48 1111.67 1541.98 cv
1129.33 1543.47 1147.73 1538.78 1147.73 1538.78 cv
1149.13 1589.19 li
1149.13 1589.19 1136.16 1592.48 1120.14 1600.13 cv
1100.9 1609.31 1076.5 1623.33 1054.71 1626.26 cv
1014.8 1631.64 989.461 1610.67 989.461 1610.67 cv
989.461 1610.67 1031.66 1600.25 1053.56 1580.78 cv
cp
1 .866667 .752941 rgb
ef
1428.27 1505.46 mo
1428.27 1505.46 1455.35 1505.17 1473.42 1496.82 cv
1491.48 1488.48 1500.53 1472.08 1500.53 1472.08 cv
1496.85 1456.37 li
1496.85 1456.37 1511.71 1459.69 1526.28 1459.94 cv
1540.84 1460.19 1555.12 1457.38 1555.12 1457.38 cv
1557.52 1517.46 li
1528.47 1539.19 li
1510.02 1515.92 li
1510.02 1515.92 1504.52 1521.1 1497.28 1531.49 cv
1486.13 1547.49 1469.48 1572.75 1451.72 1586.33 cv
1422.43 1608.73 1392.84 1605.52 1392.84 1605.52 cv
1392.84 1605.52 1421.49 1576.84 1430.35 1551.83 cv
1439.2 1526.81 1428.27 1505.46 1428.27 1505.46 cv
cp
ef
1674.7 1469.59 mo
1674.7 1469.59 1693.1 1468.99 1706.57 1467.18 cv
1720.05 1465.39 1728.62 1462.38 1728.62 1462.38 cv
1728.62 1462.38 1734.04 1499.02 1734.19 1531.86 cv
1734.32 1557.98 1730.47 1579.37 1722.51 1594.68 cv
1712.1 1614.7 1687.77 1618.74 1672.45 1614.19 cv
1661.32 1610.88 1656.8 1600.58 1656.8 1600.58 cv
1656.8 1600.58 1665.42 1575.69 1669.9 1542.94 cv
1674.37 1510.19 1674.7 1469.59 1674.7 1469.59 cv
cp
ef
988.825 1609.91 mo
988.825 1609.91 1009.93 1631.04 1050.14 1626.13 cv
1072.42 1623.42 1100.19 1608.21 1120.85 1599.19 cv
1137.46 1591.94 1149.62 1590.29 1149.62 1590.29 cv
1149.62 1590.29 1151.6 1615.9 1153.01 1635.61 cv
1154.29 1653.36 1155.32 1665.36 1150.01 1666.27 cv
1137.78 1668.37 1108.85 1665.37 1087.8 1664.2 cv
1081.06 1663.82 1071.29 1669.24 1053.43 1671.41 cv
1034.58 1673.7 1007.27 1672.73 987.06 1671.58 cv
966.678 1670.41 944.495 1661.38 938.773 1655.08 cv
932.11 1647.74 938.856 1634.48 949.147 1626.73 cv
964.763 1614.97 988.825 1609.91 988.825 1609.91 cv
cp
1 1 1 rgb
ef
1390.2 1606.89 mo
1390.2 1606.89 1423.76 1608.73 1453.72 1585.91 cv
1470.03 1573.47 1482.89 1549.67 1493.4 1534.26 cv
1502.19 1521.38 1510.05 1515.58 1510.05 1515.58 cv
1548.34 1571.73 li
1548.34 1571.73 1539.08 1580.66 1531.53 1585.91 cv
1525.85 1589.86 1504.57 1600.34 1496.2 1605.84 cv
1473.94 1620.48 1447.96 1642.03 1424.6 1654.27 cv
1400.95 1666.66 1379.98 1669.61 1369.77 1664.32 cv
1357.63 1658.04 1361.92 1644.81 1367.83 1634.09 cv
1376.11 1619.09 1390.2 1606.89 1390.2 1606.89 cv
cp
ef
1653.65 1603.2 mo
1653.65 1603.2 1670.62 1619.4 1691.55 1614.71 cv
1725.85 1607.04 1733.76 1572.5 1733.76 1572.5 cv
1738.56 1632.95 li
1738.56 1632.95 1737.06 1656.52 1722.07 1661.96 cv
1695.01 1671.78 1645.64 1665.28 1635.43 1657.89 cv
1619.55 1646.39 1653.65 1603.2 1653.65 1603.2 cv
cp
.866667 .431373 .254902 rgb
ef
1420.86 482.98 mo
1482.31 372.674 li
1502.33 351.066 li
1571.21 322.707 li
1571.21 322.707 1569.58 347.362 1570.79 360.858 cv
1572.01 374.356 1575.28 380.2 1575.28 380.2 cv
1575.28 380.2 1632.32 344.18 1659.09 329.183 cv
1685.87 314.185 1682.36 320.212 1682.36 320.212 cv
1682.36 320.212 1743.75 350.208 1751.6 381.323 cv
1758.09 407.063 1754.38 448.279 1750.61 481.695 cv
1745.66 525.619 1738.99 559.327 1738.99 559.327 cv
1738.99 559.327 1704.22 567.941 1680.4 564.373 cv
1656.58 560.802 1629.12 549.259 1629.12 549.259 cv
1617.88 580.102 li
1614.86 596.302 li
1614.86 596.302 1612.28 601.678 1582.85 603.619 cv
1553.41 605.556 1497.12 604.059 1497.12 604.059 cv
1488.42 614.906 li
1450.81 615.393 li
1457.33 552.263 li
1456.06 525.327 li
1456.06 525.327 1441.46 516.258 1432.66 505.67 cv
1423.86 495.086 1420.86 482.98 1420.86 482.98 cv
cp
.32549 .682353 .768627 rgb
ef
1447.45 663.605 mo
1484.95 666.287 li
1496.49 682.461 li
1496.49 682.461 1592.39 687.497 1640.31 686.591 cv
1684.88 685.752 1687.89 671.009 1687.89 671.009 cv
1705.63 635.295 li
1701.96 687.707 li
1715.02 808.171 li
1715.02 808.171 1707.47 816.517 1686.75 821.658 cv
1656.94 829.049 1606.22 834.029 1565.07 833.672 cv
1523.52 833.317 1478.41 828.089 1454.6 820.192 cv
1438.45 814.834 1436.01 805.75 1436.01 805.75 cv
1447.45 663.605 li
cp
ef
1023.17 1662.41 mo
1019.62 1662.41 1015.89 1662.36 1011.96 1662.24 cv
972.54 1661.05 946.182 1659.36 939.262 1647.16 cv
937.211 1643.55 936.83 1639.52 938.158 1635.51 cv
940.909 1627.2 950.471 1620.46 958.5 1616.92 cv
965.308 1613.93 974.593 1610.86 985.342 1607.3 cv
998.969 1602.79 1014.41 1597.69 1027.8 1591.65 cv
1055.57 1579.13 1066.64 1570.91 1072.74 1533.99 cv
1073.08 1531.88 1075.08 1530.42 1077.2 1530.79 cv
1079.32 1531.15 1080.75 1533.15 1080.4 1535.26 cv
1073.74 1575.56 1060.23 1585.54 1030.99 1598.73 cv
1017.24 1604.94 1001.59 1610.11 987.781 1614.68 cv
977.219 1618.17 968.099 1621.19 961.63 1624.04 cv
953.586 1627.58 947.115 1633.17 945.533 1637.96 cv
944.888 1639.9 945.042 1641.61 946.019 1643.33 cv
951.301 1652.63 986.498 1653.7 1012.2 1654.47 cv
1043.77 1655.45 1061.81 1652.27 1076.31 1649.74 cv
1083.65 1648.46 1089.99 1647.36 1096.43 1647.13 cv
1101.95 1646.95 1108.4 1647.32 1115.23 1647.72 cv
1126.47 1648.37 1145.26 1649.47 1147.09 1645.12 cv
1148.97 1640.68 1147.79 1620.77 1146.93 1606.23 cv
1146.51 1599.07 1145.88 1592.99 1145.27 1587.11 cv
1143.89 1573.79 1142.59 1561.21 1143.87 1538.68 cv
1143.99 1536.54 1145.95 1534.9 1147.96 1535.02 cv
1150.11 1535.15 1151.75 1536.98 1151.62 1539.12 cv
1150.38 1561.03 1151.65 1573.31 1153 1586.31 cv
1153.62 1592.27 1154.25 1598.44 1154.69 1605.77 cv
1156.17 1630.84 1156.46 1642.91 1154.26 1648.14 cv
1150.3 1657.54 1133.04 1656.54 1114.78 1655.47 cv
1108.14 1655.09 1101.86 1654.73 1096.7 1654.9 cv
1090.79 1655.1 1084.7 1656.17 1077.65 1657.4 cv
1065.29 1659.55 1048.91 1662.41 1023.17 1662.41 cv
cp
0 0 0 rgb
f
1020.92 1676.08 mo
1020.24 1676.08 1019.56 1676.08 1018.88 1676.07 cv
1016.21 1676.05 li
989.046 1675.83 947.999 1675.49 937.388 1658.05 cv
933.605 1651.83 933.925 1644.27 938.341 1635.57 cv
939.313 1633.66 941.646 1632.9 943.562 1633.86 cv
945.475 1634.83 946.238 1637.17 945.267 1639.09 cv
942.109 1645.31 941.704 1650.19 944.026 1654.01 cv
952.388 1667.76 992.379 1668.09 1016.27 1668.28 cv
1018.95 1668.3 li
1038.63 1668.43 1054.75 1666.07 1068.88 1663.95 cv
1077.98 1662.58 1085.84 1661.4 1093.17 1661.15 cv
1099.07 1660.95 1106.19 1661.39 1113.73 1661.85 cv
1127.14 1662.67 1145.5 1663.79 1149.77 1659.53 cv
1150.73 1657.91 1150.14 1649.17 1148.42 1641.33 cv
1147.96 1639.23 1149.28 1637.16 1151.38 1636.7 cv
1153.46 1636.23 1155.54 1637.56 1156 1639.66 cv
1157.67 1647.19 1159.78 1660.5 1155.26 1665.02 cv
1148.52 1671.76 1131.39 1670.71 1113.25 1669.6 cv
1105.9 1669.15 1098.95 1668.72 1093.44 1668.92 cv
1086.55 1669.15 1078.9 1670.3 1070.03 1671.63 cv
1056.79 1673.62 1040.42 1676.08 1020.92 1676.08 cv
cp
f
1111.96 891.896 mo
1111.66 891.896 1111.34 891.859 1111.03 891.781 cv
1108.95 891.266 1107.68 889.162 1108.19 887.08 cv
1114.89 859.961 1119.81 839.835 1122.12 827.799 cv
1122.8 824.285 1122.35 821.268 1121.87 818.07 cv
1120.95 811.885 1119.9 804.874 1127.05 794.79 cv
1128.29 793.038 1130.72 792.627 1132.47 793.868 cv
1134.22 795.108 1134.63 797.534 1133.39 799.284 cv
1128.05 806.817 1128.71 811.278 1129.56 816.923 cv
1130.08 820.451 1130.68 824.45 1129.75 829.265 cv
1127.4 841.487 1122.46 861.708 1115.73 888.941 cv
1115.3 890.712 1113.71 891.896 1111.96 891.896 cv
cp
f
1119.77 1546.76 mo
1115.55 1546.76 1111.29 1546.49 1107.14 1545.99 cv
1086.95 1543.54 1063.51 1534.43 1063.95 1516.81 cv
1066.14 1428.58 1062.18 1350.26 1058.99 1287.33 cv
1057.44 1256.78 1056.1 1230.4 1055.58 1206.55 cv
1054.5 1157.24 1055.77 1131.67 1060.85 1101.31 cv
1070.46 1043.82 1085.54 979.596 1097.61 930.062 cv
1098.12 927.978 1100.22 926.692 1102.31 927.206 cv
1104.39 927.714 1105.67 929.816 1105.16 931.9 cv
1093.12 981.305 1078.08 1045.35 1068.51 1102.59 cv
1063.53 1132.4 1062.27 1157.62 1063.35 1206.38 cv
1063.87 1230.12 1065.21 1256.45 1066.75 1286.93 cv
1069.94 1349.99 1073.92 1428.48 1071.72 1517 cv
1071.43 1528.55 1090.36 1536.13 1108.08 1538.27 cv
1128.5 1540.76 1151.12 1536.59 1153.59 1525.33 cv
1154.55 1520.97 1156.35 1507.33 1158.62 1490.08 cv
1162.44 1461.04 1168.22 1417.16 1175.31 1377.04 cv
1187.35 1308.9 1186.68 1277.28 1186.09 1249.38 cv
1185.88 1239.6 1185.68 1230.37 1186.06 1220.27 cv
1186.37 1211.46 li
1187.46 1178.83 1188.18 1157.26 1211.22 1109.9 cv
1220.27 1091.3 1232.74 1067.77 1245.95 1042.87 cv
1264.8 1007.31 1286.17 967.01 1303.7 929.602 cv
1304.61 927.656 1306.92 926.822 1308.87 927.732 cv
1310.81 928.643 1311.64 930.955 1310.73 932.896 cv
1293.12 970.482 1271.71 1010.87 1252.81 1046.5 cv
1239.64 1071.35 1227.19 1094.82 1218.2 1113.3 cv
1195.89 1159.18 1195.23 1178.96 1194.14 1211.72 cv
1193.83 1220.56 li
1193.46 1230.44 1193.65 1239.56 1193.85 1249.22 cv
1194.45 1277.47 1195.14 1309.5 1182.96 1378.39 cv
1175.9 1418.34 1170.14 1462.12 1166.32 1491.09 cv
1163.94 1509.22 1162.21 1522.31 1161.18 1527 cv
1158.09 1541.06 1139.35 1546.76 1119.77 1546.76 cv
cp
f
1325.24 894.089 mo
1324.75 894.089 1324.26 893.997 1323.78 893.805 cv
1321.79 893.002 1320.83 890.737 1321.64 888.749 cv
1324.05 882.767 1331.43 862.884 1333.45 857.261 cv
1334.17 855.244 1336.41 854.202 1338.42 854.92 cv
1340.44 855.646 1341.48 857.87 1340.76 859.89 cv
1338.72 865.551 1331.29 885.601 1328.84 891.659 cv
1328.23 893.172 1326.77 894.089 1325.24 894.089 cv
cp
f
1436.04 1510.17 mo
1423.68 1510.17 1412.75 1506.57 1408.79 1496.55 cv
1403.08 1482.14 1398.06 1468.66 1393.2 1455.63 cv
1379.98 1420.18 1367.49 1386.7 1341.63 1333.4 cv
1323.71 1296.47 1311.36 1273.01 1301.44 1254.16 cv
1291.66 1235.58 1284.59 1222.15 1277.52 1205.84 cv
1262.73 1171.74 1241.69 1112.47 1230.68 1077.11 cv
1230.05 1075.07 1231.19 1072.89 1233.24 1072.25 cv
1235.27 1071.6 1237.46 1072.75 1238.1 1074.8 cv
1249.05 1109.97 1269.96 1168.89 1284.65 1202.75 cv
1291.6 1218.79 1298.61 1232.11 1308.31 1250.54 cv
1318.26 1269.44 1330.65 1292.97 1348.62 1330.01 cv
1374.65 1383.63 1387.78 1418.85 1400.48 1452.91 cv
1405.32 1465.91 1410.34 1479.35 1416.01 1493.7 cv
1420.27 1504.44 1440.67 1504 1457.81 1499.05 cv
1477.58 1493.35 1496.76 1480.67 1494.63 1469.33 cv
1493.81 1464.94 1490.12 1451.69 1485.46 1434.9 cv
1477.62 1406.69 1465.78 1364.05 1456.62 1324.37 cv
1442.05 1261.28 1423.32 1225.9 1408.27 1197.46 cv
1401.6 1184.85 1395.84 1173.96 1391.56 1162.75 cv
1377.63 1126.19 1370.28 1061.65 1371.4 985.696 cv
1372.42 931.003 li
1372.46 928.861 1374.2 927.018 1376.38 927.192 cv
1378.52 927.232 1380.23 929.004 1380.19 931.146 cv
1379.17 985.826 li
1378.08 1059.72 1385.43 1124.83 1398.82 1159.98 cv
1402.93 1170.75 1408.59 1181.44 1415.14 1193.83 cv
1430.4 1222.66 1449.39 1258.55 1464.19 1322.62 cv
1473.31 1362.14 1485.13 1404.68 1492.95 1432.83 cv
1497.84 1450.45 1501.38 1463.19 1502.26 1467.91 cv
1505.49 1485.11 1482.6 1499.98 1459.97 1506.52 cv
1452.36 1508.72 1443.91 1510.17 1436.04 1510.17 cv
cp
f
1376.06 893.879 mo
1373.98 893.879 1372.25 892.226 1372.18 890.128 cv
1371.03 856.52 1366.89 825.432 1358.75 789.322 cv
1358.27 787.229 1359.59 785.149 1361.68 784.679 cv
1363.78 784.212 1365.85 785.52 1366.33 787.613 cv
1374.58 824.215 1378.78 855.748 1379.95 889.86 cv
1380.02 892.004 1378.34 893.803 1376.2 893.877 cv
1376.15 893.877 1376.11 893.879 1376.06 893.879 cv
cp
f
1375.19 1662.19 mo
1372.03 1662.19 1369.29 1661.57 1366.99 1660.24 cv
1363.54 1658.24 1361.27 1655.09 1360.43 1651.13 cv
1358.69 1642.97 1363.29 1632.86 1368.18 1626.11 cv
1372.38 1620.31 1379 1613.33 1386.66 1605.24 cv
1396.15 1595.22 1406.92 1583.86 1414.85 1572.7 cv
1430.97 1550.01 1435.13 1541.98 1424.19 1508.65 cv
1423.52 1506.61 1424.64 1504.42 1426.67 1503.75 cv
1428.71 1503.07 1430.91 1504.19 1431.57 1506.23 cv
1443.24 1541.78 1438.6 1552.69 1421.19 1577.19 cv
1412.93 1588.8 1401.97 1600.38 1392.3 1610.59 cv
1385.13 1618.14 1378.37 1625.28 1374.47 1630.66 cv
1369.64 1637.34 1367.05 1644.91 1368.03 1649.51 cv
1368.41 1651.34 1369.32 1652.61 1370.88 1653.51 cv
1379.52 1658.52 1408.64 1642.64 1429.91 1631.05 cv
1456.05 1616.79 1469.25 1605.62 1479.85 1596.65 cv
1485.23 1592.1 1489.88 1588.17 1495.04 1584.91 cv
1499.45 1582.12 1504.89 1579.35 1510.65 1576.41 cv
1519.45 1571.93 1535.83 1563.59 1535.27 1559.32 cv
1535 1557.25 1531.16 1551.93 1526.72 1545.77 cv
1523.65 1541.51 1519.83 1536.21 1515.59 1529.86 cv
1503.64 1511.93 1499.58 1505.22 1490.14 1485.38 cv
1489.22 1483.45 1490.04 1481.13 1491.98 1480.21 cv
1493.93 1479.28 1496.24 1480.11 1497.16 1482.05 cv
1506.44 1501.55 1510.16 1507.71 1522.06 1525.55 cv
1526.21 1531.78 1529.99 1537.02 1533.03 1541.23 cv
1539.1 1549.66 1542.45 1554.3 1542.97 1558.3 cv
1544.25 1568.02 1529.64 1575.46 1514.17 1583.33 cv
1508.58 1586.19 1503.3 1588.88 1499.19 1591.48 cv
1494.48 1594.45 1490.03 1598.21 1484.88 1602.58 cv
1474.57 1611.29 1460.47 1623.23 1433.63 1637.87 cv
1407.41 1652.16 1387.87 1662.19 1375.19 1662.19 cv
cp
f
1381.43 1672.41 mo
1377.4 1672.41 1373.76 1671.68 1370.66 1670 cv
1364.54 1666.7 1361.16 1660.33 1360.6 1651.06 cv
1360.47 1648.91 1362.11 1647.07 1364.25 1646.95 cv
1366.35 1646.78 1368.23 1648.45 1368.36 1650.59 cv
1368.75 1657.09 1370.71 1661.2 1374.35 1663.17 cv
1387.61 1670.33 1421.57 1650.83 1439.81 1640.35 cv
1442 1639.09 li
1458.19 1629.82 1470.08 1620.23 1480.58 1611.77 cv
1487.35 1606.31 1493.2 1601.59 1499.07 1597.88 cv
1503.78 1594.9 1509.81 1591.86 1516.19 1588.63 cv
1527.46 1582.92 1542.9 1575.12 1544.32 1569.71 cv
1544.28 1567.96 1539.65 1561.2 1534.59 1555.72 cv
1533.14 1554.14 1533.23 1551.68 1534.81 1550.23 cv
1536.37 1548.77 1538.84 1548.87 1540.3 1550.44 cv
1545.28 1555.83 1553.39 1565.75 1551.84 1571.67 cv
1549.53 1580.47 1535.04 1587.8 1519.69 1595.56 cv
1513.49 1598.7 1507.62 1601.67 1503.22 1604.45 cv
1497.73 1607.92 1492.04 1612.5 1485.46 1617.82 cv
1475.27 1626.03 1462.59 1636.25 1445.87 1645.83 cv
1443.68 1647.09 li
1425.45 1657.56 1399.58 1672.41 1381.43 1672.41 cv
cp
f
2257.15 933.249 mo
1001.87 933.249 li
999.723 933.249 997.885 931.512 997.885 929.366 cv
997.885 927.219 999.527 925.483 1001.67 925.483 cv
2257.15 925.483 li
2259.3 925.483 2261.03 927.219 2261.03 929.366 cv
2261.03 931.512 2259.3 933.249 2257.15 933.249 cv
cp
f
910.495 933.249 mo
398.547 933.249 li
396.403 933.249 394.662 931.512 394.662 929.366 cv
394.662 927.219 396.403 925.483 398.547 925.483 cv
910.495 925.483 li
912.639 925.483 914.379 927.219 914.379 929.366 cv
914.379 931.512 912.639 933.249 910.495 933.249 cv
cp
f
915.444 895.236 mo
412.425 895.236 li
410.28 895.236 408.54 893.495 408.54 891.351 cv
408.54 889.207 410.28 887.466 412.425 887.466 cv
915.243 887.466 li
917.387 887.466 919.229 889.207 919.229 891.351 cv
919.229 893.495 917.588 895.236 915.444 895.236 cv
cp
f
2237.01 895.236 mo
1037.94 895.236 li
1035.8 895.236 1034.06 893.495 1034.06 891.351 cv
1034.06 889.207 1035.8 887.466 1037.94 887.466 cv
2237.01 887.466 li
2239.15 887.466 2240.89 889.207 2240.89 891.351 cv
2240.89 893.495 2239.15 895.236 2237.01 895.236 cv
cp
f
680.251 1687.64 mo
679.576 1687.64 678.875 1687.63 678.147 1687.6 cv
663.373 1687.08 659.716 1681.48 659.133 1680.36 cv
658.843 1679.81 658.691 1679.19 658.691 1678.56 cv
658.691 931.013 li
658.691 928.866 660.432 927.13 662.576 927.13 cv
664.721 927.13 666.461 928.866 666.461 931.013 cv
666.461 1677.08 li
667.542 1677.82 670.788 1679.56 678.426 1679.84 cv
686.569 1680.11 690.139 1678.45 691.204 1677.46 cv
691.204 931.013 li
691.204 928.866 692.944 927.13 695.088 927.13 cv
697.233 927.13 698.974 928.866 698.974 931.013 cv
698.974 1678.56 li
698.974 1678.91 698.927 1679.26 698.833 1679.6 cv
698.454 1680.98 695.803 1687.64 680.251 1687.64 cv
cp
f
2057.98 1687.84 mo
2057.3 1687.84 2056.6 1687.83 2055.88 1687.8 cv
2041.11 1687.28 2037.45 1681.68 2036.87 1680.56 cv
2036.58 1680.01 2036.43 1679.39 2036.43 1678.77 cv
2036.43 931.218 li
2036.43 929.071 2038.16 927.335 2040.31 927.335 cv
2042.46 927.335 2044.19 929.071 2044.19 931.218 cv
2044.19 1677.28 li
2045.27 1678.02 2048.52 1679.76 2056.16 1680.04 cv
2064.29 1680.32 2067.87 1678.65 2068.94 1677.66 cv
2068.94 931.218 li
2068.94 929.071 2070.68 927.335 2072.83 927.335 cv
2074.97 927.335 2076.71 929.071 2076.71 931.218 cv
2076.71 1678.77 li
2076.71 1679.11 2076.66 1679.46 2076.57 1679.8 cv
2076.19 1681.18 2073.53 1687.84 2057.98 1687.84 cv
cp
f
993.636 952.979 mo
990.224 952.979 987.133 951.35 985.078 948.315 cv
982.122 943.955 976.045 921.047 973.997 908.214 cv
973.658 906.096 975.102 904.104 977.221 903.767 cv
979.357 903.423 981.332 904.874 981.668 906.991 cv
983.978 921.458 989.874 941.474 991.512 943.959 cv
991.844 944.45 992.734 945.762 995.017 944.941 cv
997.137 944.183 998.793 942.094 998.632 940.38 cv
998.476 938.738 998.206 936.993 997.934 935.212 cv
996.994 929.111 995.932 922.194 998.86 916.763 cv
1000.51 913.699 1004.7 910.521 1011.96 905.168 cv
1019.49 899.618 1028.85 892.714 1034.36 885.451 cv
1044.57 871.982 1048.43 866.68 1048.45 866.653 cv
1049.7 864.915 1052.14 864.531 1053.87 865.794 cv
1055.61 867.055 1055.99 869.482 1054.73 871.219 cv
1054.73 871.219 1050.86 876.55 1040.55 890.144 cv
1034.37 898.302 1024.5 905.576 1016.57 911.42 cv
1011.9 914.866 1006.6 918.766 1005.7 920.449 cv
1004.01 923.586 1004.82 928.897 1005.61 934.034 cv
1005.91 935.966 1006.2 937.868 1006.37 939.653 cv
1006.93 945.668 1002.4 950.546 997.641 952.251 cv
996.285 952.738 994.937 952.979 993.636 952.979 cv
cp
f
971.973 953.876 mo
967.957 953.876 964.393 951.912 961.934 948.337 cv
956.641 940.639 951.131 912.869 949.007 901.288 cv
948.619 899.176 950.016 897.152 952.126 896.767 cv
954.24 896.365 956.259 897.775 956.647 899.886 cv
959.769 916.903 964.701 938.648 968.336 943.937 cv
969.344 945.405 970.679 946.208 971.993 946.11 cv
974.923 946.097 978.652 943.37 981.492 939.162 cv
982.697 937.386 985.103 936.917 986.886 938.117 cv
988.664 939.318 989.133 941.732 987.932 943.509 cv
983.565 949.976 977.619 953.854 972.026 953.876 cv
972.009 953.876 971.991 953.876 971.973 953.876 cv
cp
f
950.752 954.724 mo
946.465 954.724 942.601 952.537 939.865 948.556 cv
934.817 941.215 925.862 907.377 924.858 903.541 cv
924.314 901.466 925.557 899.344 927.632 898.799 cv
929.707 898.242 931.829 899.498 932.374 901.573 cv
936.036 915.549 943.044 939.47 946.267 944.156 cv
947.543 946.012 949.054 946.954 950.754 946.954 cv
950.761 946.954 950.768 946.954 950.774 946.954 cv
953.376 946.945 956.397 944.763 958.852 941.121 cv
960.05 939.345 962.462 938.876 964.243 940.072 cv
966.021 941.272 966.493 943.687 965.292 945.468 cv
961.342 951.328 956.063 954.702 950.81 954.724 cv
950.79 954.724 950.772 954.724 950.752 954.724 cv
cp
f
933.891 948.333 mo
931.336 948.333 928.486 947.677 925.423 946.365 cv
917.974 943.169 908.651 935.498 907.179 929.598 cv
905.907 924.501 907.681 903.327 912.104 888.803 cv
914.694 880.281 932.662 875.434 961.945 868.465 cv
970.107 866.524 977.815 864.689 982.838 863.061 cv
995.898 858.83 1003.48 844.298 1003.56 844.151 cv
1004.54 842.241 1006.88 841.498 1008.79 842.469 cv
1010.7 843.448 1011.45 845.792 1010.47 847.699 cv
1010.1 848.413 1001.31 865.241 985.234 870.451 cv
979.917 872.176 972.06 874.044 963.744 876.023 cv
949.966 879.301 921.299 886.125 919.534 891.07 cv
915.346 904.827 913.933 924.582 914.716 927.714 cv
915.252 929.866 921.435 936.198 928.484 939.224 cv
931.747 940.621 934.454 940.951 935.902 940.135 cv
937.774 939.082 940.137 939.733 941.197 941.594 cv
942.257 943.459 941.601 945.834 939.735 946.892 cv
938.04 947.855 936.073 948.333 933.891 948.333 cv
cp
f
930.888 869.335 mo
927.734 869.335 925.726 868.059 924.542 866.874 cv
920.074 862.404 921.036 853.862 923.015 841.342 cv
923.22 840.037 923.392 838.807 923.557 837.645 cv
925.302 825.217 927.056 818.965 947.666 812.708 cv
949.717 812.085 951.89 813.244 952.513 815.296 cv
953.135 817.35 951.977 819.519 949.924 820.143 cv
933.146 825.235 932.706 828.364 931.249 838.725 cv
931.082 839.929 930.901 841.201 930.687 842.556 cv
929.825 848.014 928.029 859.376 930.035 861.38 cv
930.236 861.585 930.905 861.628 931.735 861.492 cv
934.498 861.057 935.585 858.731 937.771 852.687 cv
939.349 848.322 941.137 843.375 944.821 838.8 cv
949.25 833.289 958.276 832.675 968.726 831.965 cv
973.544 831.637 978.527 831.3 983.235 830.461 cv
993.212 828.683 998.492 820.844 1008.55 804.702 cv
1009.69 802.883 1012.08 802.323 1013.9 803.461 cv
1015.73 804.594 1016.28 806.991 1015.14 808.812 cv
1005.07 824.97 998.42 835.645 984.599 838.111 cv
979.475 839.021 974.278 839.376 969.253 839.717 cv
961.347 840.253 953.173 840.809 950.875 843.671 cv
948.003 847.237 946.515 851.35 945.077 855.329 cv
942.828 861.545 940.505 867.974 932.945 869.168 cv
932.211 869.282 931.526 869.335 930.888 869.335 cv
cp
f
902.04 834.862 mo
901.308 834.862 900.567 834.654 899.909 834.221 cv
898.117 833.043 897.619 830.633 898.799 828.841 cv
905.503 818.657 909.176 816.399 931.553 808.7 cv
936.37 807.042 940.827 805.762 944.756 804.63 cv
959.126 800.5 968.622 797.771 979.475 782.017 cv
980.685 780.251 983.104 779.796 984.877 781.023 cv
986.643 782.24 987.089 784.659 985.871 786.426 cv
973.439 804.467 961.729 807.834 946.903 812.097 cv
942.875 813.255 938.709 814.453 934.081 816.046 cv
912.01 823.64 910.515 825.173 905.289 833.112 cv
904.543 834.246 903.303 834.862 902.04 834.862 cv
cp
f
921.826 879.158 mo
915.752 879.158 909.986 874.374 904.682 864.928 cv
903.63 863.058 904.295 860.691 906.167 859.64 cv
908.038 858.595 910.405 859.258 911.456 861.126 cv
915.125 867.657 918.9 871.388 921.834 871.388 cv
921.864 871.388 921.891 871.388 921.917 871.388 cv
924.064 871.337 926.483 869.03 928.391 865.214 cv
929.353 863.295 931.693 862.525 933.604 863.478 cv
935.522 864.438 936.299 866.771 935.339 868.69 cv
932.026 875.313 927.326 879.029 922.103 879.156 cv
922.011 879.156 921.917 879.158 921.826 879.158 cv
cp
f
938.182 880.33 mo
934.98 880.33 931.088 879.151 926.934 875.298 cv
925.36 873.841 925.269 871.382 926.728 869.809 cv
928.188 868.235 930.645 868.146 932.218 869.603 cv
936.364 873.448 939.052 872.564 939.943 872.27 cv
945.091 870.574 949.585 862.043 950.955 854.775 cv
951.368 852.6 950.971 851.941 950.966 851.935 cv
950.288 851.399 946.952 851.881 944.611 852.881 cv
942.638 853.717 940.355 852.8 939.514 850.828 cv
938.675 848.855 939.592 846.572 941.567 845.731 cv
943.105 845.073 951.018 842.009 955.849 845.894 cv
957.705 847.389 959.691 850.393 958.591 856.217 cv
956.839 865.506 951.018 876.799 942.373 879.649 cv
941.177 880.042 939.764 880.33 938.182 880.33 cv
cp
f
962.791 876.105 mo
962.206 876.105 961.612 875.974 961.055 875.695 cv
959.138 874.735 958.359 872.401 959.318 870.482 cv
963.42 862.279 964.002 856.683 962.806 854.954 cv
962.132 853.981 961.001 853.215 960.113 853.135 cv
959.792 853.102 959.405 853.148 958.895 853.66 cv
957.377 855.175 954.918 855.175 953.401 853.655 cv
951.886 852.138 951.888 849.679 953.405 848.161 cv
955.436 846.133 958.069 845.165 960.813 845.398 cv
963.989 845.687 967.2 847.652 969.195 850.533 cv
973.41 856.627 969.929 866.635 966.267 873.959 cv
965.586 875.318 964.214 876.105 962.791 876.105 cv
cp
f
979.06 870.837 mo
978.705 870.837 978.346 870.788 977.989 870.688 cv
975.925 870.096 974.733 867.945 975.325 865.883 cv
977.067 859.796 976.715 855.634 976.027 855.014 cv
976.027 855.014 li
976.019 855.009 974.61 854.539 970.377 856.846 cv
968.492 857.87 966.133 857.174 965.109 855.291 cv
964.083 853.407 964.779 851.049 966.665 850.022 cv
972.812 846.675 977.596 846.32 980.89 848.953 cv
986.1 853.13 984.319 862.694 982.791 868.021 cv
982.305 869.726 980.749 870.837 979.06 870.837 cv
cp
f
2199.26 865.265 mo
1712.49 865.265 li
1710.34 865.265 1708.47 863.525 1708.47 861.38 cv
1708.47 859.236 1710.08 857.495 1712.22 857.495 cv
2199.26 857.495 li
2201.41 857.495 2203.15 859.236 2203.15 861.38 cv
2203.15 863.525 2201.41 865.265 2199.26 865.265 cv
cp
f
1438.13 865.265 mo
1374.41 865.265 li
1372.27 865.265 1370.48 863.525 1370.48 861.38 cv
1370.48 859.236 1372.18 857.495 1374.33 857.495 cv
1438.13 857.495 li
1440.28 857.495 1442.01 859.236 1442.01 861.38 cv
1442.01 863.525 1440.28 865.265 1438.13 865.265 cv
cp
f
1115.8 865.265 mo
1070.8 865.265 li
1068.65 865.265 1066.91 863.525 1066.91 861.38 cv
1066.91 859.236 1068.65 857.495 1070.8 857.495 cv
1115.8 857.495 li
1117.95 857.495 1119.69 859.236 1119.69 861.38 cv
1119.69 863.525 1117.95 865.265 1115.8 865.265 cv
cp
f
991.63 865.265 mo
981.564 865.265 li
979.419 865.265 977.679 863.525 977.679 861.38 cv
977.679 859.236 979.419 857.495 981.564 857.495 cv
991.63 857.495 li
993.774 857.495 995.515 859.236 995.515 861.38 cv
995.515 863.525 993.774 865.265 991.63 865.265 cv
cp
f
925.865 865.265 mo
449.895 865.265 li
447.75 865.265 446.01 863.525 446.01 861.38 cv
446.01 859.236 447.75 857.495 449.895 857.495 cv
925.865 857.495 li
928.009 857.495 929.75 859.236 929.75 861.38 cv
929.75 863.525 928.009 865.265 925.865 865.265 cv
cp
f
927.884 835.56 mo
464.618 835.56 li
462.474 835.56 460.733 833.82 460.733 831.675 cv
460.733 829.531 462.474 827.791 464.618 827.791 cv
927.884 827.791 li
930.028 827.791 931.769 829.531 931.769 831.675 cv
931.769 833.82 930.028 835.56 927.884 835.56 cv
cp
f
1006.58 835.56 mo
992.851 835.56 li
990.706 835.56 988.965 833.82 988.965 831.675 cv
988.965 829.531 990.706 827.791 992.851 827.791 cv
1006.58 827.791 li
1008.73 827.791 1010.47 829.531 1010.47 831.675 cv
1010.47 833.82 1008.73 835.56 1006.58 835.56 cv
cp
f
1124.68 835.56 mo
1092.63 835.56 li
1090.49 835.56 1088.75 833.82 1088.75 831.675 cv
1088.75 829.531 1090.49 827.791 1092.63 827.791 cv
1124.43 827.791 li
1126.58 827.791 1128.44 829.531 1128.44 831.675 cv
1128.44 833.82 1126.83 835.56 1124.68 835.56 cv
cp
f
1440.07 835.56 mo
1373.24 835.56 li
1371.1 835.56 1369.36 833.82 1369.36 831.675 cv
1369.36 829.531 1371.1 827.791 1373.24 827.791 cv
1440.07 827.791 li
1442.22 827.791 1443.96 829.531 1443.96 831.675 cv
1443.96 833.82 1442.22 835.56 1440.07 835.56 cv
cp
f
2180.48 835.56 mo
1710.3 835.56 li
1708.16 835.56 1706.42 833.82 1706.42 831.675 cv
1706.42 829.531 1708.16 827.791 1710.3 827.791 cv
2180.48 827.791 li
2182.63 827.791 2184.36 829.531 2184.36 831.675 cv
2184.36 833.82 2182.63 835.56 2180.48 835.56 cv
cp
f
1055.49 871.846 mo
1044.65 871.846 1031.5 867.215 1022.12 861.844 cv
1005.79 852.483 998.692 841.09 1003.15 831.37 cv
1006.3 824.481 1012.52 812.873 1020.4 798.179 cv
1034.1 772.629 1052.85 737.635 1069.11 702.095 cv
1075.09 689.008 1079.76 679.658 1083.17 672.832 cv
1092.13 654.862 1092.13 654.862 1088.19 646.135 cv
1084.73 638.468 1085.47 633.514 1086.49 626.657 cv
1087.61 619.132 1089.31 607.765 1086.58 584.4 cv
1085.43 574.523 1082.56 558.5 1079.52 541.536 cv
1076.15 522.758 1072.33 501.475 1070.27 485.159 cv
1069.4 478.268 li
1062.55 424.43 1057.15 381.905 1080.48 359.283 cv
1086.6 353.345 1095.55 348.532 1107.08 344.983 cv
1119.79 341.074 1135.98 338.084 1168.09 342.605 cv
1170.22 342.904 1171.7 344.87 1171.4 346.994 cv
1171.1 349.116 1169.13 350.567 1167.01 350.299 cv
1136.39 345.979 1121.21 348.766 1109.37 352.41 cv
1099.02 355.594 1091.12 359.783 1085.89 364.859 cv
1065.35 384.779 1070.54 425.604 1077.1 477.288 cv
1077.98 484.186 li
1080.01 500.301 1083.81 521.48 1087.16 540.164 cv
1090.23 557.25 1093.12 573.385 1094.3 583.499 cv
1097.15 607.89 1095.36 619.873 1094.18 627.801 cv
1093.2 634.36 1092.75 637.354 1095.27 642.935 cv
1100.73 655.027 1099.32 657.861 1090.12 676.3 cv
1086.73 683.077 1082.1 692.359 1076.17 705.326 cv
1059.82 741.09 1040.99 776.208 1027.25 801.85 cv
1019.44 816.426 1013.27 827.938 1010.21 834.605 cv
1007.34 840.875 1016.06 849.417 1025.98 855.103 cv
1042.2 864.391 1061.07 867.003 1065.58 860.568 cv
1071.54 852.06 1078.44 842.274 1085.95 831.642 cv
1101.07 810.22 1118.22 785.938 1135.15 761.429 cv
1162.53 721.803 1177.78 695.412 1184.6 675.854 cv
1191.28 656.721 1191.61 598.592 1185.4 537.635 cv
1183.04 514.516 1180.84 487.667 1182.42 463.826 cv
1182.56 461.686 1184.44 460.086 1186.55 460.207 cv
1188.69 460.349 1190.31 462.199 1190.17 464.339 cv
1188.63 487.606 1190.8 514.049 1193.13 536.846 cv
1198.38 588.343 1200.24 654.608 1191.94 678.413 cv
1184.78 698.931 1169.71 725.079 1141.54 765.848 cv
1124.58 790.387 1107.43 814.685 1092.3 836.123 cv
1084.8 846.747 1077.9 856.522 1071.94 865.026 cv
1068.51 869.92 1062.48 871.846 1055.49 871.846 cv
cp
f
1198.65 454.621 mo
1196.76 454.621 1195.1 453.242 1194.81 451.319 cv
1189.78 418.139 1166.52 381.646 1147.95 368.378 cv
1146.21 367.133 1145.8 364.705 1147.05 362.96 cv
1148.3 361.215 1150.73 360.807 1152.47 362.059 cv
1175.14 378.259 1197.59 417.778 1202.49 450.154 cv
1202.81 452.276 1201.35 454.255 1199.23 454.577 cv
1199.04 454.608 1198.84 454.621 1198.65 454.621 cv
cp
f
1115.39 314.873 mo
1114.64 314.873 1113.88 314.654 1113.21 314.194 cv
1101.69 306.328 1091.07 296.755 1080.74 284.931 cv
1079.81 283.862 1076.83 282.492 1073.95 281.164 cv
1067.56 278.223 1058.81 274.193 1053.63 265.899 cv
1052.49 264.081 1053.05 261.684 1054.87 260.548 cv
1056.69 259.405 1059.08 259.963 1060.22 261.784 cv
1064.17 268.108 1071.4 271.435 1077.2 274.108 cv
1081.15 275.929 1084.57 277.5 1086.59 279.819 cv
1096.49 291.144 1106.63 300.29 1117.59 307.781 cv
1119.36 308.99 1119.82 311.407 1118.61 313.179 cv
1117.85 314.279 1116.64 314.873 1115.39 314.873 cv
cp
f
1328.82 607.544 mo
1327.17 607.544 1325.64 606.487 1325.12 604.833 cv
1307.4 548.897 1285.64 497.891 1258.59 448.897 cv
1257.55 447.021 1258.24 444.658 1260.12 443.62 cv
1262 442.585 1264.36 443.268 1265.39 445.145 cv
1292.69 494.591 1314.65 546.059 1332.53 602.486 cv
1333.17 604.532 1332.04 606.714 1330 607.364 cv
1329.61 607.486 1329.21 607.544 1328.82 607.544 cv
cp
f
1337.97 638.091 mo
1336.27 638.091 1334.71 636.971 1334.23 635.257 cv
1331.19 624.89 li
1330.58 622.832 1331.75 620.67 1333.81 620.059 cv
1335.88 619.456 1338.03 620.621 1338.64 622.676 cv
1341.71 633.155 li
1342.29 635.219 1341.09 637.363 1339.02 637.946 cv
1338.67 638.044 1338.32 638.091 1337.97 638.091 cv
cp
f
1223.58 813.127 mo
1174.64 813.127 1125.82 807.216 1123.13 788.917 cv
1122.95 787.68 1122.77 785.663 1122.58 782.983 cv
1122.43 780.843 1124.03 778.982 1126.17 778.83 cv
1128.31 778.685 1130.18 780.287 1130.33 782.425 cv
1130.5 784.846 1130.65 786.667 1130.82 787.785 cv
1132.92 802.115 1204.74 809.503 1278.59 802.979 cv
1340.75 797.49 1363.03 785.973 1362.83 779.573 cv
1362.19 758.08 1356.35 723.363 1346.4 681.812 cv
1345.9 679.725 1347.19 677.63 1349.27 677.13 cv
1351.36 676.632 1353.46 677.917 1353.96 680.004 cv
1364.02 722.053 1369.94 757.333 1370.6 779.337 cv
1371.21 799.571 1313.65 807.683 1279.28 810.717 cv
1262.64 812.188 1243.1 813.127 1223.58 813.127 cv
cp
f
1090.85 616.457 mo
1089.28 616.457 1087.8 615.493 1087.21 613.931 cv
1083.1 602.91 1077.25 594.352 1071.6 586.076 cv
1064.66 575.914 1058.1 566.316 1055.92 553.72 cv
1053.16 537.816 1053.52 508.248 1053.9 476.94 cv
1054.3 444.473 1054.7 410.9 1051.79 388.925 cv
1049.31 370.163 1042.88 366.106 1034.74 360.97 cv
1032.93 359.825 1032.38 357.426 1033.53 355.612 cv
1034.67 353.795 1037.07 353.253 1038.89 354.4 cv
1049.22 360.92 1056.75 367.142 1059.49 387.905 cv
1062.48 410.434 1062.07 444.292 1061.67 477.034 cv
1061.3 507.973 1060.94 537.194 1063.57 552.394 cv
1065.47 563.328 1071.28 571.839 1078.02 581.695 cv
1083.65 589.95 1090.05 599.306 1094.49 611.213 cv
1095.24 613.224 1094.22 615.461 1092.21 616.211 cv
1091.76 616.379 1091.3 616.457 1090.85 616.457 cv
cp
f
1018.74 810.747 mo
1018.49 810.747 1018.23 810.722 1017.97 810.668 cv
1005 808.053 986.712 797.081 980.142 784.913 cv
976.958 779.018 977.594 774.526 978.688 771.799 cv
981.048 765.917 985.206 758.379 990.467 748.835 cv
999.467 732.51 1011.79 710.153 1023.58 680.716 cv
1039.61 640.686 1039.52 640.068 1037.99 629.743 cv
1037.11 623.814 1038.92 618.86 1041.02 613.125 cv
1043.66 605.909 1046.64 597.733 1045.71 584.212 cv
1043.9 557.879 1046.2 445.66 1052.31 395.684 cv
1052.57 393.553 1054.46 392.021 1056.64 392.299 cv
1058.77 392.56 1060.28 394.497 1060.02 396.626 cv
1054.09 445.167 1051.71 558.258 1053.46 583.677 cv
1054.51 598.846 1051.08 608.243 1048.32 615.792 cv
1046.44 620.922 1045.09 624.628 1045.68 628.605 cv
1047.6 641.625 1046.33 644.796 1030.79 683.603 cv
1018.82 713.484 1006.37 736.084 997.271 752.586 cv
992.136 761.898 988.082 769.253 985.899 774.691 cv
985.206 776.416 985.569 778.614 986.977 781.222 cv
991.819 790.19 1007.33 800.596 1019.51 803.055 cv
1021.61 803.479 1022.97 805.527 1022.55 807.629 cv
1022.18 809.472 1020.55 810.747 1018.74 810.747 cv
cp
f
1040.2 1630.89 mo
1021.92 1630.89 1003.82 1626.07 986.589 1616.49 cv
984.714 1615.44 984.039 1613.08 985.083 1611.2 cv
986.123 1609.33 988.483 1608.65 990.365 1609.69 cv
1017.91 1625.02 1047.81 1627.25 1076.85 1616.15 cv
1086.56 1612.44 1095.65 1607.35 1104.45 1602.42 cv
1117.88 1594.89 1130.56 1587.79 1144.81 1585.56 cv
1146.94 1585.24 1148.92 1586.68 1149.25 1588.8 cv
1149.58 1590.92 1148.13 1592.91 1146.01 1593.24 cv
1133.14 1595.25 1121.05 1602.03 1108.25 1609.2 cv
1099.21 1614.26 1089.86 1619.5 1079.62 1623.41 cv
1066.56 1628.4 1053.33 1630.89 1040.2 1630.89 cv
cp
f
1391.7 1609.07 mo
1389.59 1609.07 1387.86 1607.39 1387.82 1605.27 cv
1387.77 1603.12 1389.48 1601.35 1391.62 1601.31 cv
1425.56 1600.64 1449.81 1589.87 1467.91 1567.42 cv
1474.6 1559.12 1479.1 1551.02 1483.45 1543.17 cv
1489.62 1532.04 1495.46 1521.52 1506.48 1512.57 cv
1508.14 1511.2 1510.59 1511.47 1511.94 1513.13 cv
1513.29 1514.79 1513.04 1517.24 1511.38 1518.59 cv
1501.53 1526.6 1496.3 1536.03 1490.24 1546.95 cv
1485.73 1555.07 1481.06 1563.48 1473.96 1572.29 cv
1454.57 1596.34 1427.69 1608.37 1391.77 1609.07 cv
1391.75 1609.07 1391.72 1609.07 1391.7 1609.07 cv
cp
f
1051.83 272.084 mo
1051 272.084 1050.15 271.814 1049.44 271.259 cv
1047.75 269.936 1047.46 267.495 1048.78 265.805 cv
1053.7 259.524 1058.76 242.529 1052.27 233.614 cv
1049.12 229.274 1045.9 227.177 1042.24 227.11 cv
1037.64 227.139 1033.34 230.935 1031.04 234.174 cv
1029.8 235.924 1027.37 236.341 1025.63 235.101 cv
1023.87 233.86 1023.46 231.437 1024.7 229.685 cv
1029.26 223.247 1035.8 219.38 1042.19 219.34 cv
1046.47 219.237 1052.69 220.973 1058.56 229.044 cv
1067.81 241.771 1061.2 262.541 1054.9 270.594 cv
1054.13 271.574 1052.99 272.084 1051.83 272.084 cv
cp
f
1039.85 253.775 mo
1037.73 253.775 1036 252.084 1035.97 249.958 cv
1035.96 249.254 1036.01 242.969 1040.37 238.158 cv
1041.81 236.571 1044.26 236.448 1045.86 237.892 cv
1047.44 239.332 1047.56 241.788 1046.12 243.379 cv
1043.77 245.97 1043.74 249.844 1043.74 249.884 cv
1043.73 252.017 1042.01 253.764 1039.88 253.775 cv
1039.87 253.775 1039.86 253.775 1039.85 253.775 cv
cp
f
949.953 288.673 mo
946.753 284.851 946.251 280 948.833 277.842 cv
951.41 275.684 956.094 277.034 959.294 280.858 cv
962.492 284.683 962.996 289.532 960.414 291.69 cv
957.834 293.848 953.151 292.498 949.953 288.673 cv
cp
ef
935.643 273.629 mo
934.984 273.629 934.317 273.461 933.706 273.109 cv
931.847 272.036 931.211 269.661 932.282 267.802 cv
937.096 259.457 946.59 255.032 956.471 256.576 cv
958.593 256.902 960.046 258.886 959.718 261.005 cv
959.392 263.127 957.406 264.573 955.289 264.252 cv
948.579 263.239 942.21 266.138 939.012 271.685 cv
938.292 272.933 936.986 273.629 935.643 273.629 cv
cp
f
1009.65 372.734 mo
1009.65 372.734 1021.97 363.002 1031.03 351.589 cv
1040.52 339.639 1048.43 323.876 1052.6 314.968 cv
1055.39 309.017 1056.2 325.934 1054.86 339.588 cv
1053.64 351.941 1047.87 364.049 1047.87 364.049 cv
1039.51 357.688 li
1009.65 372.734 li
cp
ef
1003.64 379.1 mo
997.445 379.1 991.512 375.952 984.714 369.447 cv
979.457 364.417 974.673 359.372 970.453 354.92 cv
966.234 350.471 962.592 346.626 959.49 343.85 cv
957.031 341.646 953.394 340.67 949.545 339.637 cv
944.852 338.376 940.001 337.075 936.738 333.264 cv
932.775 328.638 934.646 323.167 936.455 317.878 cv
938.615 311.565 940.849 305.039 936.047 297.217 cv
933.94 293.781 931.298 290.224 928.5 286.459 cv
924.725 281.378 920.819 276.124 917.512 270.257 cv
914.029 264.067 909.028 250.377 914.643 228.199 cv
915.169 226.119 917.278 224.869 919.362 225.385 cv
921.442 225.912 922.703 228.024 922.176 230.104 cv
917.222 249.665 921.368 261.269 924.28 266.443 cv
927.346 271.881 931.102 276.938 934.734 281.825 cv
937.64 285.732 940.382 289.423 942.669 293.154 cv
949.384 304.092 946.16 313.514 943.808 320.393 cv
942.415 324.461 941.614 327.014 942.638 328.21 cv
944.336 330.196 947.844 331.135 951.56 332.133 cv
955.907 333.3 960.836 334.623 964.674 338.064 cv
968.01 341.05 971.754 345.001 976.092 349.576 cv
980.25 353.963 984.964 358.935 990.083 363.833 cv
999.741 373.075 1004.98 372.689 1012.42 368.47 cv
1017.2 365.754 1020.8 363.261 1023.98 361.063 cv
1028.6 357.873 1032.59 355.117 1037.96 353.235 cv
1039.99 352.53 1042.21 353.595 1042.91 355.619 cv
1043.62 357.643 1042.56 359.858 1040.53 360.568 cv
1036.14 362.104 1032.73 364.466 1028.4 367.454 cv
1025.09 369.744 1021.33 372.339 1016.26 375.222 cv
1011.74 377.791 1007.64 379.1 1003.64 379.1 cv
cp
f
974.05 334.994 mo
974.05 334.994 991.411 353.722 1003.52 339.528 cv
1013.16 328.23 1002.56 309.178 1002.56 309.178 cv
1002.56 309.178 995.296 317.727 987.696 324.992 cv
981.852 330.582 974.05 334.994 974.05 334.994 cv
cp
1 1 1 rgb
ef
980.475 335.564 mo
983.817 338.182 988.575 341.052 993.042 340.956 cv
995.892 340.891 998.353 339.602 1000.57 337.006 cv
1005.6 331.106 1003.55 322.009 1001.46 316.303 cv
998.605 319.467 994.564 323.8 990.38 327.799 cv
987.122 330.915 983.347 333.655 980.475 335.564 cv
cp
992.824 348.728 mo
981.615 348.728 971.625 338.091 971.201 337.633 cv
970.396 336.763 970.032 335.571 970.212 334.397 cv
970.396 333.224 971.105 332.197 972.136 331.613 cv
972.212 331.57 979.603 327.357 985.011 322.185 cv
992.371 315.149 999.524 306.748 999.596 306.663 cv
1000.42 305.692 1001.68 305.177 1002.94 305.313 cv
1004.21 305.438 1005.33 306.177 1005.95 307.288 cv
1006.44 308.163 1017.74 328.85 1006.48 342.049 cv
1002.79 346.372 998.315 348.619 993.185 348.724 cv
993.064 348.726 992.944 348.728 992.824 348.728 cv
cp
0 0 0 rgb
f
978.928 257.558 mo
951.16 257.558 925.102 237.935 912.447 226.677 cv
910.845 225.251 910.7 222.794 912.125 221.192 cv
913.549 219.592 916.006 219.442 917.61 220.871 cv
938.729 239.657 979.147 266.613 1012.59 236.069 cv
1014.17 234.623 1016.63 234.728 1018.07 236.317 cv
1019.52 237.901 1019.41 240.358 1017.83 241.804 cv
1005.29 253.262 991.92 257.558 978.928 257.558 cv
cp
f
930.421 386.968 mo
929.37 386.968 928.346 386.538 927.603 385.754 cv
926.639 384.741 926.297 383.284 926.704 381.947 cv
926.757 381.773 931.878 364.529 924.997 351.399 cv
921.435 344.611 916.477 340.708 911.229 336.576 cv
905.842 332.336 900.27 327.951 896.235 320.422 cv
877.313 285.103 888.29 236.259 888.403 235.77 cv
894.734 208.354 899.857 198.982 921.576 189.715 cv
923.548 188.872 925.831 189.787 926.672 191.764 cv
927.514 193.736 926.599 196.019 924.624 196.86 cv
906.451 204.615 902.167 210.695 895.972 237.52 cv
895.865 237.981 885.524 283.978 903.082 316.753 cv
906.351 322.85 911.055 326.552 916.033 330.47 cv
921.692 334.927 927.545 339.532 931.878 347.791 cv
936.538 356.681 936.794 366.685 936.058 373.961 cv
938.517 370.286 940.479 364.21 939.387 354.293 cv
939.153 352.162 940.69 350.243 942.824 350.009 cv
944.968 349.777 946.874 351.314 947.108 353.445 cv
950.232 381.827 932.128 386.66 931.356 386.852 cv
931.046 386.93 930.733 386.968 930.421 386.968 cv
cp
f
1091.24 293.915 mo
1089.85 293.915 1088.51 293.167 1087.81 291.855 cv
1082.8 282.445 1084.31 271.837 1085.9 260.608 cv
1086.65 255.369 1087.42 249.951 1087.49 244.626 cv
1087.68 228.922 1084.49 214.884 1077.44 200.448 cv
1067.13 179.31 1047.73 153.727 1013.87 151.879 cv
977.085 149.886 944.589 177.98 940.146 183.237 cv
938.76 184.877 936.31 185.085 934.67 183.697 cv
933.032 182.312 932.827 179.861 934.21 178.221 cv
939.322 172.176 973.816 141.911 1014.29 144.122 cv
1043.65 145.722 1068.56 164.518 1084.43 197.043 cv
1092.02 212.607 1095.46 227.759 1095.26 244.723 cv
1095.18 250.547 1094.38 256.219 1093.6 261.702 cv
1092.12 272.073 1090.85 281.028 1094.67 288.205 cv
1095.68 290.097 1094.96 292.451 1093.06 293.459 cv
1092.48 293.768 1091.86 293.915 1091.24 293.915 cv
cp
f
965.033 396.769 mo
965 396.769 964.966 396.769 964.933 396.767 cv
964.703 396.762 941.917 395.818 939.376 365.341 cv
939.197 363.203 940.786 361.325 942.924 361.146 cv
945.102 360.977 946.94 362.556 947.119 364.694 cv
948.041 375.753 952.013 381.782 955.994 385.069 cv
952.655 376.204 950.984 361.844 960.532 342.286 cv
961.472 340.355 963.801 339.561 965.727 340.5 cv
967.655 341.44 968.454 343.768 967.512 345.695 cv
953.188 375.037 967.633 389.99 967.78 390.137 cv
968.905 391.262 969.23 392.958 968.601 394.417 cv
967.988 395.847 966.582 396.769 965.033 396.769 cv
cp
f
1256.56 467.548 mo
1256.35 467.548 1256.15 467.532 1255.94 467.499 cv
1254.29 467.233 1252.99 465.935 1252.72 464.279 cv
1252.68 464.04 1248.79 440.224 1241.11 424.171 cv
1214.99 369.632 1186.13 357.886 1160.66 347.521 cv
1147.72 342.259 1135.51 337.288 1124.44 327.583 cv
1106.62 311.949 1099.01 283.597 1090.96 253.577 cv
1089.97 249.915 1088.98 246.222 1087.96 242.522 cv
1087.4 240.454 1088.61 238.314 1090.68 237.745 cv
1092.75 237.187 1094.89 238.392 1095.46 240.46 cv
1096.48 244.178 1097.47 247.887 1098.46 251.564 cv
1106.2 280.412 1113.51 307.663 1129.56 321.741 cv
1139.65 330.584 1151.27 335.315 1163.58 340.324 cv
1190.36 351.221 1220.7 363.567 1248.11 420.815 cv
1252.25 429.451 1255.3 439.887 1257.33 448.228 cv
1260.62 429.95 1258.76 395.876 1214.96 361.325 cv
1213.27 359.995 1212.98 357.553 1214.31 355.869 cv
1215.64 354.182 1218.09 353.894 1219.77 355.224 cv
1288.06 409.095 1260.3 464.89 1260.01 465.448 cv
1259.33 466.751 1257.99 467.548 1256.56 467.548 cv
cp
f
1298.23 479.323 mo
1295.5 479.323 1292.42 478.946 1289.11 477.906 cv
1277.46 474.247 1267.33 463.942 1259 447.28 cv
1258.04 445.361 1258.82 443.027 1260.74 442.067 cv
1262.65 441.107 1264.99 441.884 1265.95 443.803 cv
1273.25 458.413 1281.77 467.372 1291.25 470.436 cv
1291.71 470.583 1292.16 470.714 1292.61 470.831 cv
1286.82 465.796 1280.97 456.795 1277.89 440.729 cv
1276.46 433.291 1276.29 426.414 1276.13 419.764 cv
1275.76 405.043 1275.42 391.139 1261.22 372.714 cv
1252.14 360.925 1236.42 353.488 1219.78 345.613 cv
1198.85 335.71 1175.13 324.483 1159.79 302.04 cv
1145.39 280.961 1135.28 249.875 1126.36 222.446 cv
1118.57 198.514 1111.22 175.907 1102.8 165.79 cv
1094.29 155.541 1082.9 150.274 1071.57 151.399 cv
1064.29 152.106 1057.97 155.516 1055.48 160.082 cv
1054.45 161.963 1052.1 162.666 1050.21 161.63 cv
1048.32 160.604 1047.63 158.243 1048.66 156.359 cv
1052.4 149.496 1060.89 144.631 1070.82 143.667 cv
1084.74 142.306 1098.59 148.565 1108.78 160.822 cv
1118.14 172.087 1125.37 194.31 1133.74 220.043 cv
1142.5 246.974 1152.43 277.5 1166.21 297.657 cv
1180.36 318.362 1202.09 328.645 1223.11 338.59 cv
1240.61 346.876 1257.15 354.702 1267.38 367.974 cv
1283.12 388.41 1283.51 404.251 1283.9 419.57 cv
1284.05 425.907 1284.21 432.458 1285.52 439.267 cv
1291.37 469.806 1307.39 469.436 1308.09 469.4 cv
1309.9 469.355 1311.56 470.494 1312.04 472.236 cv
1312.53 473.979 1311.77 475.827 1310.18 476.69 cv
1309.92 476.837 1305.23 479.323 1298.23 479.323 cv
cp
f
1058.51 440.69 mo
1058.1 440.69 1057.69 440.625 1057.28 440.489 cv
1055.24 439.811 1054.14 437.611 1054.82 435.576 cv
1055.73 432.865 1057.21 430.457 1058.77 427.909 cv
1060.53 425.037 1062.35 422.069 1063.62 418.271 cv
1064.3 416.236 1066.49 415.138 1068.53 415.816 cv
1070.57 416.495 1071.67 418.695 1070.99 420.73 cv
1069.44 425.374 1067.29 428.879 1065.39 431.972 cv
1064.01 434.224 1062.81 436.169 1062.19 438.035 cv
1061.65 439.662 1060.14 440.69 1058.51 440.69 cv
cp
f
1711.77 892.522 mo
1709.64 892.522 1707.91 890.815 1707.89 888.688 cv
1707.76 879.123 li
1707.46 855.429 1706.15 834.556 1703.73 815.303 cv
1703.47 813.174 1704.98 811.233 1707.1 810.967 cv
1709.23 810.707 1711.17 812.208 1711.44 814.339 cv
1713.89 833.88 1715.23 855.039 1715.53 879.022 cv
1715.65 888.586 li
1715.68 890.733 1713.96 892.493 1711.82 892.522 cv
1711.8 892.522 1711.79 892.522 1711.77 892.522 cv
cp
f
1694.05 1472.38 mo
1676.4 1472.38 1659.25 1468.07 1657.19 1455.74 cv
1656.1 1449.16 1654.97 1440.04 1653.54 1428.5 cv
1650.23 1401.71 1645.22 1361.21 1635.11 1308.25 cv
1630.31 1283.11 1627.51 1264.44 1625.04 1247.98 cv
1620.81 1219.84 1617.77 1199.52 1607.77 1166.28 cv
1593.94 1120.37 1580.71 1073.9 1547.3 931.106 cv
1546.82 929.018 1548.11 926.929 1550.2 926.438 cv
1552.25 925.969 1554.38 927.246 1554.87 929.339 cv
1588.23 1071.91 1601.42 1118.26 1615.2 1164.04 cv
1625.37 1197.81 1628.61 1219.44 1632.72 1246.82 cv
1635.18 1263.22 1637.97 1281.81 1642.74 1306.8 cv
1652.9 1360 1657.92 1400.65 1661.25 1427.54 cv
1662.67 1439 1663.79 1448.04 1664.86 1454.46 cv
1666.02 1461.44 1681.69 1465.68 1701.34 1464.35 cv
1721.75 1462.96 1736.14 1456.42 1736.28 1451.42 cv
1736.46 1445 1736.1 1437.4 1735.6 1426.89 cv
1734.76 1409.02 1733.48 1382.03 1734.14 1339.55 cv
1734.78 1298.02 1731.86 1242.54 1727.04 1204.64 cv
1724.15 1181.92 1721.55 1170.54 1718.8 1158.5 cv
1716.88 1150.07 1714.89 1141.35 1712.8 1128.49 cv
1708.44 1101.73 1706.61 1056.22 1707.9 1006.76 cv
1708.4 987.423 1708.55 963.654 1708.35 934.092 cv
1708.34 931.945 1710.07 930.196 1712.21 930.183 cv
1712.22 930.183 1712.23 930.183 1712.24 930.183 cv
1714.37 930.183 1716.11 931.9 1716.12 934.039 cv
1716.32 963.69 1716.17 987.544 1715.67 1006.96 cv
1714.39 1055.96 1716.19 1100.93 1720.47 1127.24 cv
1722.52 1139.86 1724.48 1148.46 1726.38 1156.77 cv
1729.05 1168.46 1731.81 1180.56 1734.74 1203.65 cv
1739.61 1241.89 1742.55 1297.82 1741.9 1339.67 cv
1741.25 1381.91 1742.52 1408.76 1743.36 1426.52 cv
1743.87 1437.2 1744.24 1444.92 1744.04 1451.64 cv
1743.7 1463.81 1722.61 1470.69 1701.87 1472.11 cv
1699.29 1472.29 1696.66 1472.38 1694.05 1472.38 cv
cp
f
1541.25 891.744 mo
1539.48 891.744 1537.88 890.53 1537.47 888.733 cv
1529.78 855.42 li
1529.29 853.329 1530.6 851.243 1532.69 850.761 cv
1534.78 850.266 1536.86 851.58 1537.35 853.67 cv
1545.04 886.984 li
1545.52 889.075 1544.21 891.161 1542.13 891.643 cv
1541.83 891.712 1541.54 891.744 1541.25 891.744 cv
cp
f
1526.07 1464.38 mo
1514.3 1464.38 1502.5 1462.65 1494.14 1459.06 cv
1492.17 1458.22 1491.26 1455.93 1492.1 1453.96 cv
1492.94 1451.98 1495.24 1451.09 1497.2 1451.92 cv
1513.2 1458.77 1545.8 1457.94 1558.41 1450.36 cv
1559.73 1449.57 1561.97 1447.97 1562.12 1446.19 cv
1563.56 1428.98 1566.9 1346.7 1567.47 1302.33 cv
1567.8 1276.31 1566.26 1257.22 1564.48 1235.12 cv
1563.32 1220.84 1562.02 1204.64 1561 1184.13 cv
1559.2 1147.65 1563.91 1110.93 1568.07 1078.52 cv
1569.97 1063.75 1571.76 1049.79 1572.85 1036.79 cv
1573.02 1034.65 1574.94 1033.07 1577.04 1033.24 cv
1579.18 1033.42 1580.76 1035.3 1580.59 1037.43 cv
1579.49 1050.6 1577.69 1064.65 1575.78 1079.52 cv
1571.66 1111.59 1566.99 1147.96 1568.76 1183.75 cv
1569.77 1204.14 1571.07 1220.27 1572.22 1234.5 cv
1574.02 1256.79 1575.57 1276.05 1575.24 1302.43 cv
1574.7 1344.2 1571.44 1427.92 1569.86 1446.83 cv
1569.63 1449.57 1568.16 1453.56 1562.41 1457.02 cv
1554.34 1461.87 1540.23 1464.38 1526.07 1464.38 cv
cp
f
1484.15 1419.77 mo
1482.05 1419.77 1480.32 1418.09 1480.27 1415.98 cv
1479.88 1400.13 1479.05 1375.6 1476.32 1345.76 cv
1472.29 1301.67 1464.53 1254.52 1458.86 1220.09 cv
1456.09 1203.3 1453.91 1190.03 1452.93 1181.8 cv
1451.74 1171.75 1450.55 1163.61 1449.39 1155.74 cv
1445.39 1128.58 1441.26 1100.5 1436.68 989.222 cv
1435.95 971.442 1435.5 952.417 1435.36 932.673 cv
1435.34 930.53 1437.07 928.776 1439.22 928.763 cv
1441.41 928.709 1443.11 930.473 1443.13 932.619 cv
1443.27 952.269 1443.71 971.21 1444.45 988.901 cv
1449.01 1099.77 1453.11 1127.65 1457.08 1154.61 cv
1458.24 1162.53 1459.45 1170.72 1460.65 1180.89 cv
1461.6 1188.95 1463.77 1202.13 1466.52 1218.83 cv
1472.21 1253.38 1480.01 1300.69 1484.06 1345.06 cv
1486.8 1375.12 1487.64 1399.82 1488.04 1415.79 cv
1488.09 1417.93 1486.39 1419.71 1484.25 1419.77 cv
1484.21 1419.77 1484.18 1419.77 1484.15 1419.77 cv
cp
f
1439.44 891.612 mo
1439.43 891.612 1439.4 891.612 1439.38 891.612 cv
1437.24 891.576 1435.52 889.811 1435.56 887.665 cv
1435.94 863.444 1436.77 839.171 1438 815.515 cv
1438.11 813.369 1440.1 811.688 1442.08 811.84 cv
1444.22 811.952 1445.87 813.779 1445.76 815.921 cv
1444.53 839.481 1443.71 863.661 1443.33 887.79 cv
1443.29 889.912 1441.56 891.612 1439.44 891.612 cv
cp
f
1677.9 1658.42 mo
1673.66 1658.42 1669.66 1658.26 1666.09 1657.98 cv
1654.99 1657.09 1635.8 1654.17 1632 1644.66 cv
1626.65 1631.29 1634.42 1621.89 1641.94 1612.8 cv
1645.99 1607.89 1650.18 1602.82 1652.89 1596.79 cv
1662.08 1576.28 1671.62 1527.54 1670.84 1468.97 cv
1670.81 1466.83 1672.53 1465.06 1674.67 1465.04 cv
1676.78 1464.79 1678.58 1466.72 1678.6 1468.87 cv
1679.4 1528.94 1669.83 1578 1659.98 1599.96 cv
1656.84 1606.96 1652.1 1612.69 1647.93 1617.75 cv
1640.04 1627.29 1635.75 1633.11 1639.21 1641.78 cv
1640.46 1644.89 1649.59 1648.86 1666.71 1650.23 cv
1692.02 1652.26 1723.37 1647.36 1729.69 1636.84 cv
1735.31 1627.46 1734.44 1619.73 1733.34 1609.93 cv
1732.85 1605.57 1732.34 1601.05 1732.34 1595.93 cv
1732.34 1577.23 1732.34 1561.07 1732.73 1541.03 cv
1732.93 1530.5 1731.51 1519.89 1729.87 1507.62 cv
1728.2 1495.2 1726.31 1481.12 1725.6 1463.59 cv
1725.51 1461.45 1727.18 1459.64 1729.33 1459.55 cv
1731.48 1459.57 1733.28 1461.13 1733.36 1463.27 cv
1734.06 1480.45 1735.92 1494.33 1737.56 1506.58 cv
1739.25 1519.18 1740.71 1530.05 1740.5 1541.18 cv
1740.11 1561.14 1740.11 1577.27 1740.11 1595.93 cv
1740.11 1600.62 1740.59 1604.91 1741.06 1609.06 cv
1742.22 1619.42 1743.32 1629.21 1736.35 1640.83 cv
1728.38 1654.11 1699.92 1658.42 1677.9 1658.42 cv
cp
f
1678.02 1671.88 mo
1660.08 1671.88 1642.55 1668.71 1632.41 1661.15 cv
1624.27 1655.08 1627.03 1644.89 1629.46 1635.9 cv
1629.91 1634.22 1630.37 1632.54 1630.75 1630.9 cv
1631.24 1628.8 1633.35 1627.53 1635.41 1627.99 cv
1637.5 1628.48 1638.8 1630.57 1638.32 1632.65 cv
1637.91 1634.39 1637.43 1636.16 1636.96 1637.93 cv
1634.59 1646.69 1633.41 1652.21 1637.06 1654.92 cv
1650.94 1665.26 1682.91 1666.01 1705.93 1661.45 cv
1721.76 1658.33 1729.54 1653.65 1731.54 1650.31 cv
1737.65 1640.13 1736.22 1629.74 1734.24 1615.36 cv
1733.61 1610.78 1732.9 1605.59 1732.38 1599.98 cv
1732.19 1597.84 1733.76 1595.95 1735.89 1595.76 cv
1738.02 1595.63 1739.92 1597.13 1740.12 1599.27 cv
1740.62 1604.7 1741.29 1609.58 1741.94 1614.3 cv
1744.05 1629.65 1745.72 1641.78 1738.2 1654.31 cv
1733.06 1662.88 1716.72 1667.24 1707.44 1669.08 cv
1698.33 1670.88 1688.11 1671.88 1678.02 1671.88 cv
cp
f
1495.51 1492.12 mo
1495.39 1492.12 1495.29 1492.12 1495.18 1492.11 cv
1493.04 1491.93 1491.45 1490.05 1491.63 1487.91 cv
1491.79 1486 1491.91 1484.02 1492.02 1482.03 cv
1492.13 1479.89 1493.92 1478.19 1496.1 1478.35 cv
1498.25 1478.47 1499.89 1480.3 1499.78 1482.44 cv
1499.67 1484.51 1499.54 1486.58 1499.37 1488.57 cv
1499.2 1490.59 1497.5 1492.12 1495.51 1492.12 cv
cp
f
1388.6 1610.64 mo
1388.41 1610.64 1388.21 1610.63 1388.01 1610.59 cv
1377.34 1608.96 1370.64 1606.02 1367.53 1601.6 cv
1365.84 1599.21 1365.25 1596.41 1365.81 1593.5 cv
1368.13 1581.46 1386.5 1573.41 1409.76 1563.21 cv
1414.38 1561.19 1419.15 1559.1 1423.94 1556.91 cv
1425.89 1556.03 1428.2 1556.88 1429.09 1558.83 cv
1429.98 1560.78 1429.12 1563.09 1427.17 1563.98 cv
1422.34 1566.18 1417.53 1568.29 1412.88 1570.33 cv
1393.4 1578.87 1374.99 1586.93 1373.44 1594.97 cv
1373.28 1595.81 1373.41 1596.46 1373.88 1597.12 cv
1374.7 1598.28 1377.82 1601.17 1389.19 1602.92 cv
1391.31 1603.24 1392.76 1605.23 1392.44 1607.35 cv
1392.14 1609.27 1390.48 1610.64 1388.6 1610.64 cv
cp
f
1513.37 1598.28 mo
1511.34 1598.28 1509.63 1596.7 1509.5 1594.64 cv
1509.36 1592.5 1510.99 1590.65 1513.13 1590.52 cv
1518.47 1590.19 1523.61 1590.09 1528.58 1590 cv
1544.31 1589.71 1556.73 1589.48 1560.72 1582.21 cv
1563.8 1576.61 1562.15 1566.48 1559.4 1549.71 cv
1556.21 1530.15 1551.37 1500.59 1551 1457.04 cv
1550.98 1454.9 1552.71 1453.14 1554.85 1453.13 cv
1554.86 1453.13 1554.88 1453.13 1554.88 1453.13 cv
1557.01 1453.13 1558.75 1454.84 1558.77 1456.98 cv
1559.14 1499.93 1563.91 1529.13 1567.07 1548.45 cv
1570.08 1566.88 1571.9 1578 1567.53 1585.96 cv
1561.37 1597.16 1546.24 1597.44 1528.73 1597.77 cv
1523.84 1597.86 1518.78 1597.95 1513.62 1598.28 cv
1513.54 1598.28 1513.45 1598.28 1513.37 1598.28 cv
cp
f
1381.36 1619.47 mo
1381.01 1619.47 1380.66 1619.42 1380.31 1619.32 cv
1372.38 1617.08 1367.2 1613.45 1364.93 1608.54 cv
1362.9 1604.18 1363.21 1599.04 1365.84 1593.26 cv
1366.73 1591.31 1369.03 1590.45 1370.99 1591.33 cv
1372.94 1592.22 1373.8 1594.52 1372.91 1596.48 cv
1371.26 1600.1 1370.95 1603.06 1371.98 1605.28 cv
1373.26 1608.04 1376.77 1610.25 1382.42 1611.84 cv
1384.48 1612.43 1385.68 1614.58 1385.1 1616.64 cv
1384.62 1618.35 1383.06 1619.47 1381.36 1619.47 cv
cp
f
1492.47 1611.62 mo
1490.63 1611.62 1489 1610.31 1488.66 1608.43 cv
1488.27 1606.32 1489.66 1604.3 1491.77 1603.91 cv
1496.11 1603.1 li
1507.27 1601.06 1520.45 1600.73 1532.08 1600.45 cv
1542.89 1600.17 1559.23 1599.77 1561.18 1597.07 cv
1564.05 1592.27 1563.65 1580.39 1562.72 1574.04 cv
1562.41 1571.92 1563.88 1569.94 1566 1569.63 cv
1568.14 1569.33 1570.1 1570.79 1570.41 1572.91 cv
1570.7 1574.87 1573.07 1592.32 1567.84 1601.07 cv
1564.2 1607.14 1553.14 1607.69 1532.27 1608.21 cv
1520.93 1608.49 1508.07 1608.81 1497.53 1610.74 cv
1493.18 1611.55 li
1492.94 1611.6 1492.7 1611.62 1492.47 1611.62 cv
cp
f
1683.57 1620.02 mo
1679.52 1620.03 1675.57 1619.54 1671.88 1618.57 cv
1659.61 1615.33 1652.6 1607.23 1653.15 1596.9 cv
1653.26 1594.76 1655.1 1593.06 1657.23 1593.23 cv
1659.37 1593.34 1661.02 1595.17 1660.91 1597.31 cv
1660.42 1606.51 1669.8 1609.98 1673.86 1611.05 cv
1689.31 1615.12 1711.39 1608.72 1720.11 1591.24 cv
1727.36 1576.69 1730.71 1550.89 1730.35 1512.38 cv
1730.33 1510.23 1732.05 1508.48 1734.2 1508.46 cv
1736.31 1508.53 1738.1 1510.16 1738.12 1512.31 cv
1738.49 1552.08 1734.87 1579.03 1727.06 1594.7 cv
1718.54 1611.79 1700.21 1620.02 1683.57 1620.02 cv
cp
f
1530.05 1544.71 mo
1529.09 1544.71 1528.13 1544.36 1527.38 1543.64 cv
1525.82 1542.17 1525.76 1539.71 1527.24 1538.15 cv
1530.75 1534.41 li
1539.11 1525.49 1546.32 1517.78 1556.72 1513.62 cv
1558.71 1512.82 1560.97 1513.79 1561.77 1515.79 cv
1562.57 1517.78 1561.6 1520.04 1559.61 1520.83 cv
1550.81 1524.35 1544.46 1531.13 1536.43 1539.72 cv
1532.87 1543.5 li
1532.11 1544.3 1531.08 1544.71 1530.05 1544.71 cv
cp
f
1420.73 1574.72 mo
1420.58 1574.72 1420.42 1574.71 1420.26 1574.69 cv
1415.58 1574.12 1411.54 1573.32 1408.27 1572.29 cv
1406.22 1571.66 1405.07 1569.48 1405.71 1567.43 cv
1406.35 1565.38 1408.54 1564.24 1410.58 1564.88 cv
1413.41 1565.76 1416.98 1566.47 1421.2 1566.98 cv
1423.33 1567.24 1424.84 1569.17 1424.59 1571.3 cv
1424.35 1573.27 1422.67 1574.72 1420.73 1574.72 cv
cp
f
1367.33 628.335 mo
1367.03 628.335 1366.72 628.299 1366.41 628.223 cv
1357.99 626.164 1349.22 625.994 1341.48 625.842 cv
1333.53 625.688 1326.66 625.554 1321.58 623.461 cv
1315.45 620.929 1311.96 616.001 1312.7 610.907 cv
1313.33 606.522 1317.01 603.343 1322.08 602.805 cv
1325.87 602.401 1329.91 602.236 1333.82 602.077 cv
1338.05 601.903 1342.43 601.725 1346.37 601.241 cv
1349.09 600.906 1351.9 600.413 1354.75 599.913 cv
1360.77 598.857 1367.03 597.771 1373.06 597.958 cv
1378.12 598.123 1385.78 600.444 1394.64 603.133 cv
1402.8 605.607 1412.05 608.413 1419.37 609.417 cv
1434.08 611.438 1486.21 610.363 1486.74 610.354 cv
1488.87 610.2 1490.66 612.012 1490.7 614.154 cv
1490.75 616.298 1489.05 618.075 1486.9 618.119 cv
1484.73 618.164 1433.62 619.217 1418.32 617.115 cv
1410.39 616.026 1400.83 613.125 1392.39 610.568 cv
1384.4 608.145 1376.85 605.855 1372.81 605.724 cv
1367.57 605.554 1361.73 606.576 1356.09 607.564 cv
1353.11 608.086 1350.16 608.602 1347.32 608.953 cv
1343.06 609.475 1338.52 609.66 1334.13 609.838 cv
1330.18 609.999 1326.44 610.153 1322.9 610.53 cv
1321.77 610.65 1320.52 611.104 1320.39 612.016 cv
1320.25 612.982 1321.24 614.915 1324.55 616.281 cv
1328.27 617.816 1334.46 617.936 1341.63 618.075 cv
1349.77 618.233 1359 618.414 1368.25 620.676 cv
1370.33 621.185 1371.61 623.29 1371.1 625.374 cv
1370.67 627.147 1369.08 628.335 1367.33 628.335 cv
cp
f
1295.15 662.677 mo
1290.89 662.677 1286.99 661.793 1285.05 658.435 cv
1283.5 655.75 1283.21 653.146 1284.21 650.694 cv
1285.91 646.494 1291.07 643.446 1301.44 640.496 cv
1304.21 639.708 1308.41 638.74 1313.28 637.615 cv
1319.75 636.123 1327.07 634.431 1332.41 632.831 cv
1337.39 631.336 1342.9 628.169 1347.76 625.374 cv
1351.31 623.334 1354.67 621.408 1357.48 620.331 cv
1359.49 619.561 1361.73 620.565 1362.5 622.566 cv
1363.27 624.57 1362.27 626.815 1360.26 627.583 cv
1358.01 628.446 1354.91 630.227 1351.63 632.11 cv
1346.41 635.114 1340.48 638.519 1334.64 640.271 cv
1329.07 641.944 1321.61 643.667 1315.03 645.185 cv
1310.38 646.258 1306.2 647.222 1303.57 647.969 cv
1292.12 651.223 1291.41 653.606 1291.4 653.63 cv
1291.4 653.63 li
1291.4 653.63 1291.4 653.896 1291.78 654.55 cv
1292.98 655.424 1299.28 654.668 1301.97 654.345 cv
1303.89 654.112 1305.66 653.909 1307.04 653.874 cv
1308.21 653.842 1309.61 653.852 1311.2 653.842 cv
1316.2 653.827 1323.27 653.845 1329.02 652.756 cv
1332.92 652.02 1337.95 650.542 1343.77 648.831 cv
1349.25 647.222 1355.45 645.398 1361.82 643.89 cv
1363.92 643.393 1366 644.689 1366.5 646.775 cv
1366.99 648.862 1365.7 650.955 1363.61 651.45 cv
1357.45 652.912 1351.35 654.704 1345.96 656.284 cv
1339.94 658.055 1334.74 659.582 1330.47 660.39 cv
1324 661.612 1316.64 661.617 1311.2 661.612 cv
1309.69 661.621 1308.35 661.612 1307.24 661.639 cv
1306.06 661.67 1304.55 661.86 1302.9 662.057 cv
1300.42 662.353 1297.72 662.677 1295.15 662.677 cv
cp
f
1310.02 677.137 mo
1304.01 677.137 1288.19 676.364 1285.88 668.347 cv
1285.13 665.741 1285.39 663.424 1286.65 661.465 cv
1289.3 657.359 1295.49 655.835 1308.37 653.97 cv
1310.49 653.682 1312.46 655.137 1312.77 657.259 cv
1313.08 659.381 1311.61 661.351 1309.48 661.659 cv
1299.66 663.081 1294.18 664.419 1293.21 665.636 cv
1293.23 665.66 1293.25 665.852 1293.34 666.193 cv
1294.38 667.738 1302.94 669.57 1311.46 669.351 cv
1312.69 669.32 li
1317.99 669.188 1326.85 668.969 1333.86 667.648 cv
1338.12 666.845 1343.57 665.397 1349.89 663.719 cv
1355.07 662.344 1360.86 660.807 1367.17 659.305 cv
1369.26 658.808 1371.35 660.1 1371.85 662.186 cv
1372.35 664.272 1371.06 666.368 1368.97 666.865 cv
1362.73 668.349 1357 669.869 1351.88 671.23 cv
1345.42 672.944 1339.84 674.425 1335.31 675.282 cv
1327.67 676.722 1318.41 676.949 1312.88 677.085 cv
1311.66 677.116 li
1311.27 677.127 1310.71 677.137 1310.02 677.137 cv
cp
f
1338.81 685.259 mo
1338.17 685.259 1337.53 685.246 1336.89 685.223 cv
1329.63 684.944 1313.13 680.939 1304.24 676.661 cv
1302.31 675.73 1301.5 673.408 1302.43 671.475 cv
1303.36 669.541 1305.67 668.73 1307.61 669.659 cv
1315.58 673.493 1330.79 677.215 1337.19 677.458 cv
1348.15 677.895 1358.44 674.042 1369.35 669.978 cv
1371.52 669.168 li
1373.54 668.425 1375.77 669.447 1376.52 671.459 cv
1377.26 673.473 1376.23 675.706 1374.22 676.452 cv
1372.06 677.257 li
1361.49 681.193 1350.58 685.259 1338.81 685.259 cv
cp
f
1357.29 689.222 mo
1348.55 689.222 1339.67 687.024 1335.07 685.683 cv
1333.01 685.083 1331.82 682.927 1332.42 680.868 cv
1333.02 678.808 1335.17 677.609 1337.24 678.226 cv
1350.67 682.135 1362.26 682.555 1368.24 679.339 cv
1377.49 674.372 1407.84 662.498 1413.65 660.327 cv
1430.69 653.956 1481.5 661.793 1483.65 662.13 cv
1485.77 662.462 1487.22 664.449 1486.89 666.568 cv
1486.56 668.69 1484.55 670.146 1482.46 669.806 cv
1468.33 667.602 1428.94 662.904 1416.37 667.604 cv
1408.82 670.427 1380.21 681.733 1371.91 686.185 cv
1367.73 688.43 1362.54 689.222 1357.29 689.222 cv
cp
f
1705.96 569.5 mo
1676.92 569.503 1639.4 561.849 1626.32 551.018 cv
1620.93 546.555 1620.41 542.23 1620.93 539.387 cv
1622.44 531.068 1625.3 518.777 1628.32 505.766 cv
1633.16 484.96 1638.64 461.378 1640.42 446.557 cv
1640.67 444.43 1642.58 442.895 1644.73 443.163 cv
1646.87 443.417 1648.38 445.35 1648.13 447.48 cv
1646.3 462.724 1640.77 486.526 1635.89 507.524 cv
1632.89 520.442 1630.05 532.644 1628.57 540.777 cv
1628.29 542.306 1630.15 544.1 1631.28 545.033 cv
1647.3 558.305 1710.01 566.702 1731.43 558.455 cv
1733.9 557.502 1736.91 555.896 1737.24 553.653 cv
1745.59 495.682 1750.73 427.279 1749.19 394.546 cv
1747.86 366.396 1721.14 349.156 1697.56 333.945 cv
1686.28 326.666 1676.53 320.377 1670.61 313.516 cv
1669.21 311.891 1669.39 309.439 1671.01 308.038 cv
1672.64 306.639 1675.09 306.813 1676.49 308.441 cv
1681.68 314.455 1691.44 320.75 1701.78 327.417 cv
1725.68 342.841 1755.43 362.036 1756.94 394.18 cv
1758.51 427.335 1753.34 496.372 1744.92 554.762 cv
1744.24 559.55 1740.63 563.232 1734.23 565.703 cv
1727.43 568.325 1717.34 569.5 1705.96 569.5 cv
cp
f
1628.77 690.121 mo
1589.32 690.121 1528.52 688.229 1500.97 687.298 cv
1484.29 686.729 1479.05 662.09 1479.64 641.164 cv
1480.2 620.824 1486.36 600.422 1498.83 600.422 cv
1498.91 600.422 1499 600.424 1499.08 600.426 cv
1503.21 600.515 1507.51 600.625 1511.9 600.736 cv
1545.06 601.591 1582.66 602.544 1606.21 596.749 cv
1611.9 595.347 1611.95 594.756 1612.38 589.093 cv
1612.75 584.262 1613.3 576.962 1618.33 566.733 cv
1620.1 563.134 1623.86 553.347 1625.43 547.882 cv
1626.03 545.825 1628.15 544.64 1630.24 545.225 cv
1632.3 545.818 1633.49 547.972 1632.9 550.033 cv
1631.18 555.996 1627.22 566.254 1625.3 570.157 cv
1620.94 579.044 1620.47 585.194 1620.13 589.684 cv
1619.56 597.065 1618.47 601.731 1608.06 604.291 cv
1583.51 610.336 1545.37 609.361 1511.7 608.504 cv
1507.31 608.393 1503.04 608.283 1498.91 608.191 cv
1493.7 608.109 1487.96 621.386 1487.4 641.38 cv
1486.89 659.631 1491.56 679.205 1501.23 679.533 cv
1526.82 680.401 1613.1 683.148 1648.62 682.124 cv
1679.94 681.229 1685.44 668.289 1687.79 662.764 cv
1688.24 661.717 li
1697.96 640.048 1710.64 602.818 1721.36 564.56 cv
1721.93 562.498 1724.05 561.284 1726.15 561.867 cv
1728.21 562.445 1729.42 564.589 1728.84 566.653 cv
1718.03 605.255 1705.19 642.899 1695.32 664.897 cv
1694.93 665.801 li
1692.26 672.107 1685.14 688.854 1648.85 689.889 cv
1643.21 690.052 1636.39 690.121 1628.77 690.121 cv
cp
f
1651.51 422.696 mo
1651.1 422.696 1650.68 422.631 1650.28 422.495 cv
1648.24 421.817 1647.14 419.617 1647.82 417.582 cv
1648.58 415.265 li
1653.51 400.181 1663.76 368.795 1699.22 359.631 cv
1701.3 359.093 1703.42 360.343 1703.96 362.418 cv
1704.49 364.496 1703.24 366.615 1701.17 367.151 cv
1669.82 375.251 1660.81 402.85 1655.97 417.677 cv
1655.19 420.041 li
1654.65 421.667 1653.13 422.696 1651.51 422.696 cv
cp
f
1607.69 236.145 mo
1606.02 236.145 1604.49 235.067 1603.97 233.391 cv
1603.35 231.341 1604.5 229.169 1606.56 228.544 cv
1619.06 224.735 1630.38 214.681 1627.5 200.803 cv
1626.25 194.778 1624.29 191.027 1621.67 189.653 cv
1619.05 188.292 1614.96 188.829 1609.14 191.295 cv
1607.19 192.127 1604.89 191.212 1604.05 189.233 cv
1603.21 187.258 1604.14 184.978 1606.11 184.141 cv
1611.28 181.95 1618.88 179.426 1625.27 182.771 cv
1630.12 185.313 1633.34 190.695 1635.11 199.226 cv
1638.98 217.898 1624.7 231.14 1608.82 235.975 cv
1608.44 236.091 1608.06 236.145 1607.69 236.145 cv
cp
f
1609.56 217.231 mo
1609.14 217.231 1608.72 217.164 1608.3 217.019 cv
1606.27 216.323 1605.19 214.114 1605.89 212.083 cv
1607.91 206.21 1611.66 202.008 1616.44 200.25 cv
1618.45 199.507 1620.69 200.538 1621.43 202.557 cv
1622.17 204.57 1621.13 206.804 1619.12 207.542 cv
1615.85 208.743 1614.12 212.047 1613.24 214.609 cv
1612.68 216.218 1611.17 217.231 1609.56 217.231 cv
cp
f
1520.27 203.896 mo
1519.48 199.306 1521.34 195.151 1524.43 194.613 cv
1527.53 194.078 1530.69 197.362 1531.48 201.953 cv
1532.28 206.54 1530.41 210.695 1527.32 211.233 cv
1524.22 211.769 1521.06 208.484 1520.27 203.896 cv
cp
ef
1516.21 185.25 mo
1515 185.25 1513.82 184.692 1513.06 183.641 cv
1511.8 181.903 1512.19 179.475 1513.93 178.217 cv
1521.3 172.881 1531.2 172.758 1539.13 177.893 cv
1540.93 179.06 1541.44 181.463 1540.28 183.264 cv
1539.11 185.065 1536.7 185.578 1534.9 184.413 cv
1529.68 181.03 1523.23 181.075 1518.48 184.514 cv
1517.79 185.011 1516.99 185.25 1516.21 185.25 cv
cp
f
1517.81 251.082 mo
1517.81 251.082 1521.28 276.05 1538.21 271.507 cv
1551.68 267.89 1553.61 246.508 1553.61 246.508 cv
1553.61 246.508 1543.44 249.264 1533.69 250.792 cv
1526.2 251.968 1517.81 251.082 1517.81 251.082 cv
cp
1 1 1 rgb
ef
1522.74 255.259 mo
1523.97 259.356 1526.21 264.48 1529.78 266.836 cv
1531.89 268.229 1534.31 268.525 1537.2 267.755 cv
1543.72 266.004 1547.17 257.939 1548.73 251.734 cv
1544.86 252.651 1539.55 253.807 1534.3 254.63 cv
1530.23 255.269 1525.97 255.342 1522.74 255.259 cv
cp
1534.27 275.934 mo
1531.1 275.934 1528.12 275.05 1525.48 273.305 cv
1516.22 267.173 1514.05 252.249 1513.96 251.618 cv
1513.8 250.435 1514.19 249.241 1515.02 248.382 cv
1515.85 247.523 1517.03 247.072 1518.22 247.22 cv
1518.3 247.226 1526.2 248.039 1533.09 246.954 cv
1542.52 245.477 1552.49 242.786 1552.59 242.759 cv
1553.81 242.422 1555.13 242.714 1556.1 243.531 cv
1557.08 244.35 1557.59 245.591 1557.48 246.858 cv
1557.39 247.84 1555.12 270.987 1539.22 275.258 cv
1537.53 275.71 1535.88 275.934 1534.27 275.934 cv
cp
0 0 0 rgb
f
1533.07 296.458 mo
1533.07 296.458 1573.37 294.113 1592.83 277.049 cv
1592.83 277.049 1591.32 286.877 1587.12 294.064 cv
1582.93 301.252 1572.44 309.021 1572.44 309.021 cv
1569.3 295.86 li
1533.07 296.458 li
cp
ef
1583.27 197.563 mo
1578.73 197.563 1573.5 196.758 1567.92 194.352 cv
1558.22 190.168 1547.45 178.895 1539.11 164.199 cv
1526.25 141.579 1522.03 140.92 1521.59 140.918 cv
1520.99 141.154 1519.7 143.281 1519 144.423 cv
1518.3 145.57 li
1517.16 147.387 1514.77 147.94 1512.94 146.798 cv
1511.13 145.658 1510.58 143.259 1511.72 141.442 cv
1512.37 140.385 li
1514.23 137.328 1516.77 133.15 1521.58 133.15 cv
1521.62 133.15 1521.66 133.15 1521.71 133.15 cv
1526.97 133.23 1533.1 137.888 1545.87 160.363 cv
1553.29 173.443 1562.92 183.732 1571 187.221 cv
1575.69 189.244 1580.1 189.856 1583.77 189.802 cv
1575.48 185.192 1565.4 176.434 1561.28 160.229 cv
1560.76 158.149 1562.02 156.034 1564.1 155.507 cv
1566.17 154.96 1568.29 156.234 1568.82 158.314 cv
1574.93 182.398 1596.75 186.776 1597.68 186.95 cv
1599.3 187.258 1600.56 188.562 1600.8 190.197 cv
1601.05 191.833 1600.24 193.444 1598.77 194.211 cv
1598.39 194.413 1592.22 197.563 1583.27 197.563 cv
cp
f
1591.69 181.95 mo
1584.97 181.95 1577.69 180.52 1570.01 176.871 cv
1568.08 175.949 1567.26 173.633 1568.17 171.696 cv
1569.09 169.759 1571.4 168.925 1573.35 169.855 cv
1592.24 178.834 1608.29 172.205 1617.82 165.772 cv
1602.07 166.198 1575.45 161.907 1556.25 133.407 cv
1555.05 131.626 1555.52 129.212 1557.3 128.014 cv
1559.08 126.811 1561.49 127.288 1562.69 129.064 cv
1588.36 167.16 1627.39 157.132 1629.04 156.681 cv
1630.7 156.246 1632.45 156.922 1633.36 158.377 cv
1634.26 159.832 1634.11 161.706 1632.98 162.994 cv
1632.77 163.234 1615.98 181.95 1591.69 181.95 cv
cp
f
1496.28 201.868 mo
1495.2 201.868 1494.13 201.415 1493.37 200.556 cv
1492.58 199.665 1474.12 178.29 1478.48 140.355 cv
1479.84 128.554 1483.68 120.42 1489.89 116.183 cv
1495.18 112.576 1501.99 111.838 1510.17 114 cv
1512.24 114.549 1513.48 116.676 1512.93 118.749 cv
1512.38 120.821 1510.25 122.044 1508.18 121.511 cv
1502.22 119.936 1497.66 120.282 1494.27 122.6 cv
1490.01 125.51 1487.29 131.782 1486.21 141.244 cv
1484.4 156.866 1486.86 169.398 1490.1 178.458 cv
1490.7 170.712 1493.39 162.333 1500.79 156.228 cv
1502.45 154.869 1504.9 155.097 1506.27 156.752 cv
1507.63 158.408 1507.4 160.856 1505.74 162.222 cv
1492.24 173.352 1499.88 196.505 1499.96 196.737 cv
1500.55 198.489 1499.83 200.417 1498.22 201.343 cv
1497.62 201.696 1496.95 201.868 1496.28 201.868 cv
cp
f
1792.66 535.317 mo
1786.72 535.317 1779.96 534.309 1774.15 530.878 cv
1767.69 527.072 1763.5 521 1761.7 512.833 cv
1761.24 510.74 1762.56 508.667 1764.65 508.203 cv
1766.74 507.743 1768.82 509.064 1769.29 511.157 cv
1770.63 517.22 1773.51 521.482 1778.1 524.189 cv
1782.83 526.982 1788.66 527.67 1793.67 527.552 cv
1788.14 523.078 1782.95 515.29 1783.22 501.848 cv
1783.4 492.449 1787.25 482.994 1791.33 472.984 cv
1798.93 454.34 1807.54 433.21 1798.17 403.048 cv
1790.56 378.524 1777.7 361.59 1764.1 343.663 cv
1751.58 327.179 1738.64 310.135 1729.39 286.357 cv
1723.75 271.859 1719.17 253.023 1714.33 233.081 cv
1705.4 196.365 1695.28 154.749 1675.44 126.467 cv
1674.2 124.711 1674.63 122.288 1676.39 121.056 cv
1678.15 119.822 1680.56 120.25 1681.8 122.004 cv
1702.48 151.488 1712.79 193.861 1721.87 231.245 cv
1726.66 250.931 1731.18 269.523 1736.63 283.541 cv
1745.49 306.304 1758.09 322.908 1770.28 338.965 cv
1783.7 356.639 1797.57 374.914 1805.59 400.745 cv
1815.78 433.565 1806.22 457.047 1798.53 475.914 cv
1794.56 485.643 1791.14 494.044 1790.98 502 cv
1790.57 523.104 1806.69 525.592 1807.37 525.688 cv
1809.18 525.94 1810.59 527.424 1810.72 529.25 cv
1810.86 531.073 1809.72 532.747 1807.96 533.264 cv
1807.49 533.405 1800.85 535.317 1792.66 535.317 cv
cp
f
1683.04 134.329 mo
1681.77 134.329 1680.53 133.708 1679.78 132.565 cv
1671.96 120.578 1657.26 104.784 1631.66 97.6191 cv
1630.64 97.3242 li
1597.83 87.2539 1550.19 95.3472 1522.18 115.752 cv
1520.44 117.013 1518.01 116.631 1516.75 114.899 cv
1515.49 113.166 1515.87 110.735 1517.61 109.473 cv
1547.87 87.4233 1597.44 79.0107 1632.92 89.8984 cv
1633.76 90.1392 li
1661.68 97.9536 1677.74 115.216 1686.29 128.321 cv
1687.46 130.118 1686.96 132.523 1685.16 133.697 cv
1684.5 134.123 1683.77 134.329 1683.04 134.329 cv
cp
f
1576 335.919 mo
1573.91 335.919 1572.18 334.252 1572.12 332.146 cv
1571.66 316.185 1568.6 300.199 1565.7 298.607 cv
1562.61 298.855 1559.61 299.563 1556.13 300.381 cv
1550.91 301.611 1544.99 303.003 1536.17 303.003 cv
1536.12 303.003 1536.07 303.003 1536.03 303.003 cv
1524.64 302.985 1517.52 300.183 1512.54 285.444 cv
1510.27 278.752 1508.37 271.482 1506.69 265.066 cv
1505.11 259.055 1503.74 253.862 1502.44 250.395 cv
1501.38 247.565 1498.81 245.205 1496.09 242.708 cv
1492.73 239.606 1489.24 236.401 1488.17 231.758 cv
1486.86 226.07 1491.01 222.129 1494.67 218.652 cv
1499.15 214.402 1503.78 210.006 1503.2 201.573 cv
1502.94 197.838 1502.29 193.768 1501.6 189.457 cv
1500.67 183.599 1499.71 177.541 1499.5 171.223 cv
1499.35 166.475 1499.13 159.604 1504.35 150.027 cv
1505.37 148.146 1507.73 147.44 1509.62 148.474 cv
1511.51 149.5 1512.2 151.861 1511.17 153.744 cv
1506.97 161.465 1507.13 166.626 1507.27 170.772 cv
1507.45 176.804 1508.38 182.615 1509.27 188.236 cv
1509.99 192.721 1510.66 196.956 1510.94 201.035 cv
1511.78 213.119 1504.98 219.574 1500.02 224.285 cv
1497.16 227 1495.45 228.739 1495.74 230.013 cv
1496.27 232.313 1498.74 234.583 1501.36 236.988 cv
1504.47 239.854 1508 243.1 1509.72 247.664 cv
1511.16 251.506 1512.57 256.877 1514.2 263.096 cv
1515.85 269.387 1517.72 276.519 1519.9 282.954 cv
1523.67 294.106 1527.51 295.22 1536.04 295.233 cv
1544.06 295.209 1549.28 294.013 1554.35 292.819 cv
1558.02 291.953 1561.49 291.139 1565.57 290.907 cv
1566.92 290.829 1569.06 291.125 1571.1 293 cv
1578.6 299.884 1579.73 326.632 1579.89 331.923 cv
1579.95 334.067 1578.26 335.855 1576.11 335.917 cv
1576.07 335.917 1576.04 335.919 1576 335.919 cv
cp
f
1776.78 564.397 mo
1765.84 564.397 1747.71 560.568 1740.29 536.875 cv
1739.65 534.828 1740.79 532.648 1742.84 532.008 cv
1744.87 531.361 1747.07 532.503 1747.71 534.554 cv
1753.3 552.435 1766.05 556.317 1774.77 556.723 cv
1767.19 549.351 1757.25 535.712 1760.11 516.62 cv
1761.6 506.683 1764.78 497.71 1767.85 489.03 cv
1773.57 472.915 1778.96 457.692 1775.31 435.377 cv
1774.96 433.262 1776.4 431.263 1778.51 430.917 cv
1780.64 430.578 1782.63 432.005 1782.97 434.123 cv
1786.95 458.406 1780.97 475.293 1775.18 491.625 cv
1772.09 500.341 1769.17 508.575 1767.79 517.771 cv
1764.16 541.96 1785.77 555.884 1786.7 556.464 cv
1788.01 557.294 1788.71 558.83 1788.46 560.367 cv
1788.22 561.902 1787.08 563.146 1785.57 563.525 cv
1785.46 563.551 1781.91 564.397 1776.78 564.397 cv
cp
f
1693.53 305.969 mo
1692.58 305.969 1691.63 305.623 1690.88 304.925 cv
1672.09 287.388 1651.99 249.627 1649.52 227.221 cv
1649.28 225.09 1650.82 223.169 1652.95 222.935 cv
1655.12 222.721 1657 224.238 1657.24 226.369 cv
1659.51 246.923 1678.8 283.019 1696.18 299.244 cv
1697.75 300.707 1697.83 303.167 1696.37 304.735 cv
1695.61 305.554 1694.57 305.969 1693.53 305.969 cv
cp
f
1757.99 375.898 mo
1756.41 375.898 1754.92 374.921 1754.34 373.343 cv
1749.69 360.597 1741.51 350.156 1729.33 341.427 cv
1716.12 331.965 1699.48 325.394 1683.39 319.039 cv
1676.49 316.296 li
1639.95 301.683 1625.59 264.02 1616.37 229.103 cv
1615.83 227.029 1617.06 224.903 1619.14 224.356 cv
1621.17 223.814 1623.33 225.041 1623.89 227.121 cv
1632.61 260.167 1646.03 295.749 1679.37 309.084 cv
1686.25 311.811 li
1702.78 318.34 1719.86 325.09 1733.86 335.112 cv
1747.36 344.783 1756.44 356.417 1761.64 370.683 cv
1762.37 372.698 1761.34 374.927 1759.32 375.664 cv
1758.88 375.822 1758.43 375.898 1757.99 375.898 cv
cp
f
1554.45 331.635 mo
1553.8 331.635 1553.14 331.47 1552.53 331.122 cv
1540.32 324.144 1535.15 311.135 1532.98 301.45 cv
1532.5 299.357 1533.82 297.28 1535.91 296.809 cv
1538.01 296.34 1540.09 297.652 1540.55 299.746 cv
1542.39 307.906 1546.63 318.804 1556.38 324.378 cv
1558.25 325.443 1558.89 327.815 1557.83 329.678 cv
1557.11 330.932 1555.8 331.635 1554.45 331.635 cv
cp
f
1317.29 562.494 mo
1315.65 562.494 1314.13 561.445 1313.6 559.796 cv
1312.94 557.754 1314.06 555.567 1316.11 554.911 cv
1316.59 554.755 1364.74 539.238 1387.2 527.732 cv
1395.97 523.238 1401.54 516.423 1409.26 506.991 cv
1412.28 503.302 1415.7 499.123 1419.73 494.573 cv
1421.16 492.962 1423.62 492.824 1425.22 494.241 cv
1426.82 495.664 1426.97 498.119 1425.55 499.723 cv
1421.62 504.162 1418.25 508.278 1415.28 511.911 cv
1407.27 521.689 1400.96 529.413 1390.74 534.646 cv
1367.71 546.441 1320.48 561.666 1318.48 562.306 cv
1318.09 562.434 1317.69 562.494 1317.29 562.494 cv
cp
f
1455.42 529.161 mo
1454.78 529.161 1454.13 529.002 1453.53 528.672 cv
1438.94 520.565 1422.15 505.232 1418.29 491.619 cv
1416.92 486.772 1417.27 482.458 1419.32 478.799 cv
1430.01 459.74 1444.59 433.019 1456.31 411.545 cv
1465.27 395.12 1473.02 380.935 1476.62 374.562 cv
1492.1 347.197 1516.29 338.793 1539.69 330.669 cv
1550.81 326.809 1561.31 323.16 1570.41 317.59 cv
1572.25 316.475 1574.63 317.048 1575.75 318.878 cv
1576.87 320.708 1576.29 323.098 1574.46 324.218 cv
1564.65 330.225 1553.26 334.181 1542.24 338.008 cv
1520.2 345.66 1497.42 353.575 1483.38 378.386 cv
1479.81 384.706 1472.08 398.869 1463.13 415.268 cv
1451.4 436.758 1436.81 463.502 1426.09 482.599 cv
1425.09 484.393 1424.98 486.714 1425.77 489.501 cv
1428.89 500.538 1444.26 514.631 1457.31 521.879 cv
1459.18 522.921 1459.86 525.287 1458.82 527.161 cv
1458.11 528.439 1456.78 529.161 1455.42 529.161 cv
cp
f
1393.31 610.457 mo
1391.16 610.457 1389.43 608.716 1389.43 606.571 cv
1389.43 604.427 1391.16 602.687 1393.31 602.687 cv
1400.62 602.687 1421.01 596.01 1430.32 591.21 cv
1440.97 585.721 1451.03 575.784 1451.13 575.686 cv
1452.65 574.171 1455.11 574.178 1456.62 575.702 cv
1458.13 577.221 1458.13 579.683 1456.61 581.193 cv
1456.16 581.635 1445.59 592.083 1433.88 598.117 cv
1424.43 602.988 1402.49 610.457 1393.31 610.457 cv
cp
f
1451.77 616.274 mo
1451.65 616.274 1451.53 616.267 1451.4 616.256 cv
1449.27 616.055 1447.7 614.161 1447.9 612.023 cv
1449.08 599.581 li
1451.41 575.072 1453.24 555.715 1453.33 549.949 cv
1453.47 539.463 1452.29 529.808 1451.15 520.469 cv
1449.05 503.292 1447.07 487.066 1454.06 469.715 cv
1459.85 455.337 1465.48 444.461 1470.44 434.866 cv
1477.86 420.511 1483.73 409.176 1486.83 392.777 cv
1487.22 390.668 1489.29 389.293 1491.36 389.68 cv
1493.47 390.079 1494.85 392.109 1494.46 394.218 cv
1491.15 411.733 1484.75 424.108 1477.34 438.435 cv
1472.46 447.878 1466.92 458.582 1461.26 472.62 cv
1455.02 488.113 1456.8 502.671 1458.86 519.527 cv
1460.03 529.12 1461.25 539.043 1461.09 550.058 cv
1461.01 556.139 1459.16 575.632 1456.82 600.314 cv
1455.64 612.755 li
1455.45 614.766 1453.76 616.274 1451.77 616.274 cv
cp
f
1571.96 836.698 mo
1517.08 836.698 1463.02 831.035 1442.88 819.46 cv
1435.45 815.196 1431.82 810.075 1432.07 804.242 cv
1432.68 790.572 1440.05 701.763 1443.19 664.214 cv
1443.37 662.077 1445.17 660.485 1447.38 660.666 cv
1449.52 660.845 1451.1 662.724 1450.93 664.861 cv
1447.79 702.365 1440.43 791.052 1439.84 804.583 cv
1439.72 807.283 1442.04 810.021 1446.74 812.724 cv
1489.42 837.247 1673.59 831.914 1706.23 810.909 cv
1707.88 809.854 1710.6 807.792 1710.42 805.844 cv
1709.27 793.58 1707.51 780.285 1705.63 766.209 cv
1700.64 728.709 1695.48 689.934 1700.31 660.084 cv
1704.37 634.929 1712.91 593.129 1720.75 565.212 cv
1721.33 563.15 1723.47 561.934 1725.54 562.521 cv
1727.6 563.101 1728.81 565.245 1728.23 567.309 cv
1720.47 594.952 1712 636.379 1707.97 661.322 cv
1703.33 690.043 1708.64 729.964 1713.33 765.185 cv
1715.21 779.337 1716.99 792.703 1718.16 805.119 cv
1718.59 809.727 1716 813.873 1710.44 817.445 cv
1690.64 830.176 1630.83 836.696 1571.96 836.698 cv
cp
f
1560.87 387.288 mo
1558.94 387.288 1557.27 385.855 1557.02 383.891 cv
1556.75 381.762 1558.26 379.819 1560.38 379.549 cv
1577.03 377.438 1606.97 357.281 1631.03 341.087 cv
1656.84 323.709 1671.86 313.951 1679.87 314.558 cv
1682.01 314.728 1683.61 316.598 1683.44 318.737 cv
1683.27 320.875 1681.48 322.493 1679.26 322.301 cv
1673.42 321.942 1653.24 335.496 1635.36 347.532 cv
1609.34 365.053 1579.84 384.913 1561.36 387.256 cv
1561.2 387.276 1561.03 387.288 1560.87 387.288 cv
cp
f
1574.97 382.316 mo
1573.61 382.316 1572.29 381.597 1571.58 380.323 cv
1561.59 362.431 1568.47 325.579 1568.55 325.213 cv
1568.97 323.109 1571.04 321.756 1573.12 322.181 cv
1575.23 322.609 1576.59 324.66 1576.16 326.762 cv
1574.8 333.427 1570.94 363.234 1578.36 376.539 cv
1579.4 378.413 1578.73 380.778 1576.86 381.823 cv
1576.26 382.157 1575.61 382.316 1574.97 382.316 cv
cp
f
761.722 327.69 mo
759.966 327.69 758.375 326.494 757.946 324.711 cv
757.446 322.625 758.731 320.529 760.818 320.027 cv
815.306 306.953 li
817.398 306.458 819.489 307.739 819.989 309.825 cv
820.489 311.911 819.204 314.007 817.117 314.509 cv
762.63 327.583 li
762.327 327.654 762.021 327.69 761.722 327.69 cv
cp
f
782.722 418.753 mo
781.383 418.753 780.082 418.061 779.359 416.823 cv
778.281 414.968 778.908 412.59 780.763 411.51 cv
841.206 376.333 li
843.069 375.251 845.439 375.887 846.519 377.737 cv
847.597 379.591 846.97 381.97 845.115 383.05 cv
784.672 418.227 li
784.056 418.583 783.385 418.753 782.722 418.753 cv
cp
f
858.678 491.226 mo
857.884 491.226 857.083 490.982 856.391 490.479 cv
854.657 489.215 854.278 486.785 855.543 485.051 cv
894.187 432.068 li
895.446 430.334 897.878 429.953 899.614 431.22 cv
901.348 432.483 901.727 434.913 900.462 436.647 cv
861.818 489.63 li
861.059 490.672 859.876 491.226 858.678 491.226 cv
cp
f
957.165 525.057 mo
956.831 525.057 956.491 525.015 956.152 524.923 cv
954.081 524.365 952.854 522.234 953.412 520.161 cv
969.92 458.85 li
970.478 456.779 972.609 455.547 974.682 456.109 cv
976.753 456.667 977.98 458.798 977.422 460.872 cv
960.914 522.183 li
960.448 523.914 958.879 525.057 957.165 525.057 cv
cp
f
819.204 242.411 mo
819.088 242.411 818.969 242.406 818.851 242.395 cv
763.038 237.386 li
760.903 237.194 759.325 235.306 759.517 233.168 cv
759.709 231.035 761.581 229.435 763.734 229.647 cv
819.547 234.656 li
821.683 234.849 823.261 236.736 823.069 238.874 cv
822.888 240.891 821.192 242.411 819.204 242.411 cv
cp
f
1445.45 189.13 mo
1443.55 189.13 1441.88 187.731 1441.61 185.794 cv
1438.04 160.807 1442.88 132.187 1454.23 111.102 cv
1455.24 109.209 1457.59 108.504 1459.49 109.521 cv
1461.38 110.539 1462.08 112.896 1461.07 114.783 cv
1450.46 134.48 1445.95 161.271 1449.3 184.697 cv
1449.6 186.821 1448.13 188.787 1446 189.09 cv
1445.82 189.117 1445.63 189.13 1445.45 189.13 cv
cp
f
1456.2 134.831 mo
1455.79 134.831 1455.38 134.766 1454.97 134.63 cv
1452.61 133.847 1450.13 132.936 1447.59 132.01 cv
1442.92 130.301 1438.08 128.531 1433.77 127.454 cv
1431.69 126.931 1430.42 124.822 1430.95 122.743 cv
1431.47 120.661 1433.57 119.411 1435.65 119.916 cv
1440.37 121.096 1445.4 122.935 1450.26 124.713 cv
1452.72 125.615 1455.14 126.499 1457.42 127.262 cv
1459.46 127.94 1460.56 130.14 1459.88 132.175 cv
1459.34 133.802 1457.82 134.831 1456.2 134.831 cv
cp
f
1451.38 155.732 mo
1451.37 155.732 1438.34 155.154 1428.79 154.864 cv
1426.64 154.8 1424.95 153.008 1425.02 150.863 cv
1425.08 148.724 1426.65 147.005 1429.02 147.099 cv
1438.63 147.389 1451.72 147.972 1451.72 147.972 cv
1451.38 155.732 li
cp
f
1434.71 177.224 mo
1433.08 177.224 1431.57 176.195 1431.03 174.566 cv
1430.35 172.531 1431.45 170.331 1433.48 169.652 cv
1437.97 168.159 1447.95 166.995 1449.07 166.865 cv
1451.25 166.635 1453.13 168.155 1453.38 170.286 cv
1453.62 172.417 1452.09 174.343 1449.96 174.586 cv
1447.12 174.907 1439.09 175.976 1435.94 177.025 cv
1435.53 177.159 1435.12 177.224 1434.71 177.224 cv
cp
f
1572.02 446.61 mo
1624.1 450.063 li
1618.64 470.784 li
1567.13 467.039 li
1572.02 446.61 li
cp
1 1 1 rgb
ef
1571.97 463.496 mo
1615.71 466.675 li
1619.15 453.626 li
1575.03 450.701 li
1571.97 463.496 li
cp
1618.64 474.668 mo
1618.54 474.668 1618.45 474.664 1618.36 474.657 cv
1566.85 470.913 li
1565.71 470.831 1564.66 470.252 1563.99 469.333 cv
1563.32 468.414 1563.08 467.245 1563.35 466.136 cv
1568.24 445.705 li
1568.68 443.857 1570.43 442.589 1572.28 442.732 cv
1624.36 446.187 li
1625.52 446.262 1626.58 446.854 1627.26 447.795 cv
1627.93 448.737 1628.16 449.931 1627.86 451.053 cv
1622.39 471.774 li
1621.94 473.49 1620.39 474.668 1618.64 474.668 cv
cp
0 0 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (Admin) ()
%%Title: (Pol_Nov21_024.eps)
%%CreationDate: 12/3/2021 4:52 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bic7aei*GT5&9h@W!jp_YUQP`+:0sG"9O,SR0QXB"ZUaaLNM^,G^fP%YH9:dCciE&mb>b%kH(JMZ:`Q2p2KCbo"m`%eufc]
%e]VdrY;ImXF@X^86C=4Gl(]KI5Q8!nn=k"E1_[:@eI(\9:i.41C5&>6go?WTNTQ\<oujOR#Q?#tj(f`gEk1nAQ7_ufCO.A7CRsQ[
%jWIoG<;`%oVfdH%SFOd@Re.A<JC"/K3SU[_UQ_A$U<-6hBYJGuPDp)E:\k$KT8nQI;R=pC>GYNrb7^7UG&>e&8Po03(Y%-,-KtJf
%oVIi]0)Tn'V8h#rXls818OF<;g0l!tRf&IG!t"tA*r]OF9=UMtdJm-IZWOQ'TC>uuL1[H*NfJ,s6`L@!Y*g&R/]/CCN</NZOXGu#
%4:Ne5ZJQ"6b7%ZP>?XYiJ)^Ka)UfaH6fFjNa7H[&Xh/:;G`HCHBJ&J@SfP9-DKPBS'`>M=]a4OFcj9A%dqG;:r_*,8*Kqi98iQ\-
%\6TR_DlTWL/Y21L;k%c'.gBQ']A#Wcm.9qj.-84](8lWA12%8,f#hjr`L>rSd<DeJQ$r[6!6u8:+G]W_H<P[=;b[SAeC0.f\sd7E
%Z-mYLqD\@K'2mPQA"(g-\MSZl`&9Ik!r\h%BH.9SF[V16fI1$kWb\bMC+1f@0'@&K;(?`lercE%raLc5DX<E#r<XiHbKsu-eVFh]
%caF<mbcdoT:,)<`[CB5;?q6[\B9q2a8eP"(?&%6[s2!Si([ZN>$U6Ut<ML@&<HS/ZIpT,Cgp<brS%dZleCsTOl:(*$s"%c>[IZY1
%)\cJ`#46D-4$<O<s&d\b59!LL2Ji>u@F?6%W'?TNSlms7Vsc3omkscll%EE"mY`FkD:*Dt[;d2O]/*dI0@cE/9TI]*&SUH6HC+Y'
%s1Q3tPIs[0J<Wp?K?o9)eU0&(8+4aJ&g5+$M4jn&#(<@5NiB"l[];WFEikAlUQ:jN/SabP7QnjuNllh$DeT'fDbfCX]hIbY(uaVq
%2Tp(s[2J`E?K05om+-S'H,'!8B&aP[,apV_7@j.2?fEsa'#lhcI?eIo^NDur,cDKJ^V<%N;(qLWi4i=B^9\#YW$F/\q,KGYPtT@/
%cV&q4M6B'<_<ga)/OSLE4*+G.d74re/LDi39o\&8n:f6#,0.AheH/.-iA4-)a`JkqE.(qVUO$$B$f,JTYI)b^Xo/'S/WHn;i7/)N
%0NnYB8oUH"GF-S5SKJ$.-M5&=6)X6;3dVHR?:T_i.+JI2_tiZ:fl-]JEp9mgf<7f#J!L'Pe$kIb2.@?N%-J\r,SB;$Oi.]sD^'m8
%?qKU\;FDKGdp2fh7o9\QU*u$9NZ%)^E(NCNmmP;iW`=R!\hW8>9f,g4g30_hpgo71*80K8:VTo>de6>s%DPaI`Y]aNogPiP:g?(r
%QWerlAYOBObfI;L9;8MC)<8Mo$QZ!05!%!03pob\3[8keLQAFa=C<S"p#X<M*V0/4E#_n?T=$QQfDC4!=6(%ak?OtdM!m9ONVR<p
%>PtO"Y0rXc>15t*]\No#'Wb-K9V^S@[jbRIb/HhHjVC`uh6",s?fJ9?0*&Hrm,m_=VHgn,cbu!TH9tn=0702foZQX+D5fLj:"?GG
%-8Yra>+#pVqSIJ$IO1ZGf6!5G<rs$6RN)W#:I<!lV./a?!?km`kpGOB-s^/e&l96!S.mt@p1\"[YOSu*YjUN'7KNX<>-B1rA_M68
%X5,`W^FkM=fe+Z*o;LWDp)N/#agWc'j,$ZPN?tRQq*YLOj6<MN.u/hEs"d3_Zgl&!U8_<XBpAr7N@1jMm1@fA6<d7OM&E_.DN-%1
%gi!Dm7e!0IXI@("pU*eqCkbe07StjG8Hu*QUb"FsdJGW:3j2L'-@7le&?R:uCF?N5UCcc?2_bV-M$TOi4[US6,GJ3L)Et]6#tX;=
%SZobCeLL5qP<HGZipnbIK#,V)$*<9@$Z5jf\8p`eQ(,C+F'!8Ib0=5&)0=ml)Ep/2j]AifF&ngA"NG3EbY=E[QQT6ipZ88Yl-4Xe
%s)WMK^>.M19C0i5K:bI*jN9.,rg\i+>Y<:l:R@#rC%po:=n:hj&bC4Z]"@1p.#Z2UTGau#kN2CkNID\W[fij/ZW53Q5>,7JT?&13
%2kMc2f^[_@B$%5gL[Wr=j5pLA;bWq>M\FV-8SCY(@uD!WZH:%6lEs^\ih@<t7S(F8lEEk&qB==2-`)2[\-jYj%bnn0i%CJ=16<<p
%/.6jTmE_il%V:^?r)HK)jUBm<%&W:r8>.VPQi4qt?hIS[W$^3(S$,ME^uY-)eZ-l[Ik1B,Y=shf"9g@$G2pFm"=F@;)+XBW^S;8D
%N`t]SGl,5^(?E4Do]nq$18[2s@3qWlH$j(a(uqPqWj_Vbq<]^4hD@to'so'OV`P32DAa7XqTM36oJ=O-s5t*@ZQ.Gm!>:cRlX@V^
%pi`=X'P#@&,7+h!FOQ=>rE`8rq^19u@<D4i+RXd:]`Zi)f(.n`;N!2=Qm&6g2bL3Q9$g295QB3PnLcl=[u'b67ee=@Ta*mD1;HN=
%8[O[dK?WJ,r2[/k=8Dc8<BaWp=uk=CK)[/'F\dLD:SM$OWK3`!TOHP)I)N\7B,EMtEuT<';2KCH6f&9e=DB3dOf75LrNfY+b"=q:
%h/UVM_!2\.\-mF;h9(@RUOIn)4qiI$.<Iph99%2JnsZE(J4U7Hba$dbH2VSuDAHtYB0g/Va;NeSV=b@kAX]EFhrQ??,hk$GJrp1A
%h&4%"5g7`Io,536+@4uLr.9N^[OJb[+Ftf_0.<3\nJPB&'Bd!'7F[mnl024%dpG?q)e^>p>MU;VOFW^t7g#.^ahY#/^KM)h-UF/M
%#q&;^nAZuBU@1'-U@@mKh0`eNeg=I5f#rLc^ooF4q"6^_Ek4I]VVV"qH9RAH;uW-e%Rgi)>)>qd>#,]a\iXYT(@L=dps`T$[.S:l
%]1M9Ioj`EF#b,`1QADfC?ITY`g36':'+ctmU7UFFn,L4h-.=2X$'s\I;6(rkf&:5)g>2r`g8ZGriO-eTTFXD!nRt^;R7R.-m3]7^
%#tQKl\QhY4RM6Wgq+q#l!`DQV\,8]^?*7@+MPQ/`-+XnhE]I9Z??pS0<,:"eV"fX1]@%a_SW=EuD`fJS)?G2a#q.;>9DB+M,]n0t
%:5Z&lW>bO<cBT+AEWJB_SUdYVdn(.:!&MRf.iS=#'/=sbHJ;6FZgb#l8g4jNq6sri!uJ;?gj(3g<&eQF=fOk]6Hm(TANI8.l31[`
%.T)??1\Hlg)6?4tEeiG_'IBPl8kMtC5C>HPjsL2:]Hag4M:D7kf:pIn*gid-PU+1@4W^!BU<ICMVSqPS.6s<G>*MEIAEq_A/CgI?
%+_L#iqRdSTqXdu9`gV3NT;>_U,fEBiW)#u:b$E*:gr5_N6p,c'XYIr2]\Ae9-)t4>n&4%oET?J'`4n?k8^:_pmOufSr>fPNE.mF-
%g92b6^UnO8c`CD#4hkQ?Y1NZ=?F/g@/\r(Dp"EZSc1Te]cthAFH8:7kF1=-QC+TFLcF)A2X5-OOc,&*RXNe0,>cZ,,<f:UDcMld5
%rEWB?$'sM!.KMLFUYC]h1Dceh9/%0W\JY!td8B/3TR9`4J"?PUkN4+4eUjr,$-FdK/flC?Y`,u\'NOb^(.tf%1N[&]84(Mt`fQ$n
%N@*5QXpL$cei!<1:7pdclh#lh6Zq4ETMc_TQ,[+A)5U:a"rF-$n=QuQiPg-$[rR=Y/(SlAUs1Q@\O2^t2!_[FANWh6lI)#==R(D*
%`g:Cl7^MbTL$+;AOSd<;nL#Pol92=rpu*jhJ6SgTVZ&u/6G](5F]PG@lEqsIe&-?\hmL3TC2N1Ghsm5h<jZ.V;@=b+NEm(<a2GFh
%N@*e>-_OmM),LhQ`cT[k6igXj;#_m$V."K>claZ*__%#@eD%pr)3[-n)e\Dq6GHB4>ucJW&g[08D'\RZ,3"n^4$Vsg5Nt*Aq;5>b
%*cdkPm@eKjs6X*WH2`#Zs8<0:$o5Ur?VdV:juM=Ec?GlO9u;@cR.Hlj+8VAfHu%1Pl(.!bV`=Z3chS'EAtJUbB1Qs&;(Q!X[$1FC
%_juqi`"YqZ$:k`d%#Nf?<QTHc-J=t0DbQ&"?U;5-qf=lVjjN6jM]/Au\DoFIL&EYunb+D73D'!U#sGC<k+jB/9C9_&3?(Q3l><->
%/kqfqR&()Ar&7WR2+"0^k5&X6#cd3D5_AZ,[91#AXoBs&b!BgV&JWi4%DOq\NAD*9bsQ.8d+LO'2OgDH6r7kE5FXW7&oN<NNrS!7
%V;3'`,Bl<*'"+5Dhq8=W$-MnDKTV^*gBiXLE[CDlpE<WPX\Hnd[rjp"n2nbc1D2HXeq4%WjMl#de;GT4D+OKr?Zj4HM8Ci'?^Va^
%$'\CGgKVU[DS@kdTJe?o2\XT7H/N6TGaSeC-Khf^bb>.l@2+IV0D!!&4Rb*:]Z^I2o>&O3nBs8].J,l</auXZ&XU"#RJqI3W?X1u
%ejN8"5P7cAOCmlNmB&]Ho>'#VZAE9X7m"*p"AJ]('1ll)p<+eGcnOjR9dI8'A(iT*87(sLrDmphI`8'eC*!,HU"P+2BGBWr9[&LV
%jH];C)oqbK9[dDiDs:k.]n&jp;!s9ZSDV-S5A2&*@_VdV$p24PBn#s-Ut@N1HZjGk(MeNG`)#jG0.BN[2U>1\:F.>YDun\j3;Wi4
%-c$<^(5HUpT#.hK-HBUfBLqW.X5%C"`I@*[=7,"A)71LqNM)Y8-3"uk2G'<$A/bIaI=T)=]<g`19\[kjMlD?@ZRKr+m;@2_ZZ%pB
%8luJ]a[h"I-3ueu&Wm2#:(RR9;boZsT;?"k'$%64`/$.2&9AR3/$J7qSB!@](gYDH(fMEpYig"bW<U0+%)al`cnLMj9Wb3SO(6r[
%9082E9WK)(a"c^rN&q`oB_dLB?)BfC1&'!,/5kFK/q',r&IF&,GK)()6Hms&hF5=8[/BKq=t.QJ#5-hTJi_^`m?L&hG3+hLrgDt>
%N-OAS&QPs(Zq@I;Yi&qc+9:e(9BARKosC;)EI'[^2+-PU1WVM,+75_)8E,Eu[D/JO5LIna1hr:$ArrKVDNbb3\4!B`7(q(s8&bD3
%UuBmLZBll^mgVmr9CmL_r[mi5h]$Z-mL;d?,lS%P%JmO85H!ngH+QacI@#S<ZZH"8,.D^K!t"Sb62j<0S[C^s<rnj$41fm,68hDM
%F/HV2.gZO2?LXf;;ScEY@cdi$1$A&O-PTa['k\p5h\q8*mogPi5s<LUMB1,',uJK,C;SVE?g`E\QV43nkMG"LS!uuf/qLU)HZRY%
%_VCWM2Ibh*gt\Bg>&S9_bE<Ln'/B7EVTYT)Y[qm"DXPfph76iIk3h$[SP/=p]rT\@QOQ.ccV2#*QP)+4bp=TDgAO$IQMe9]`6A1j
%=n:`fmFN1elp?G[#L01&?mTc2k4_Kln&LsUO#asV@d6s6D:F7PIo@dl;L/3s(M$4:`&QH=n_P/78k@:XS,8+!3SWiNP1S"&Ic5TY
%;ib[9^JJ\D>"]S#CpneXPD%].FqYXd4:&T`;Y9_OM4+2_B2W0,)q,+.]I)Nu\ht^YD]Y"37f>4iTK;U]JDM1&:]@Dldk:D%m`Yuo
%h5XKN-f^CMUA]"(MRl$U&tKOdLVH!E)J+3S"STSa`Oi$9jeUf^6DQcH-Uh$eU;^`VET%^cUh'-V:M>rhbo-j4_8?!I/QLM];Dt)3
%PM0UaU04uLb"coH;Ga6?-&`DUg.iJKj[uVipQO^`<rU@#YXR4Up$NgE:!iF@c&^H4)+9hP9!jEFmD%qoC6/]-h0`dkTgCTh>9LVK
%YKW]s*#-X`dI2X\3@:2)U@AmW$$G^-#">k!TR8831rjq6@.ue9*R6m#_71PPH];qK)GQ*qP0boLJu'M,N9R2_M&O+"TGC;\ls(':
%dmJbT*"C#2%+B,0B<>4D>\Y;TV4et$>r7FfUXZlT"GqR\@r<9a;(5;QED3*kVqj<ZTjcZ7@hN+:G2mg?2f%[fA9*;X[uGI`3463b
%/k1rc5;kL'T]b30MK`\trmb0,8WK1?TAUc;\&_j^Pr!Y<dJW1Umb5WJo6Y)I?'>Xj&-"lX;s29t?0%&<(c,oO(UX.jS$!cX]/cV2
%j=XW=MGN%S\8('42J]Ui?+JNG(e*)!X,5L2Ho$'_DLP*qF:1r\(,!^",sZQNInRer(M0$@3J[W)#CImJrHJ%"M8-A[G9Bt-$g]nH
%&qn=f2X#7k/uP:BfM/,)\/hp3.G7:3N:>*uO%Ahop2`J^5s^qs$hXEBB]MgGIjpb+(R)]fs#eEkhMLlYe.UgqR,GGFA#VVn-`g&5
%m:tVT:9'FZ@^<A9l.W5Fg!6,4-I$.3p6Ad(U;\;Bio$d3Bu@,409Z6r_A)S=XUcCFIFR;#3:0JV::3[n*q5\T53AQ"E;j,5Q780`
%*mWXX^j1du^JeV;0?rF@5D$8(fbOA:G.#uu0dM3[iR->Z>4m\tiEK,ViU^l)=fTKVq;X]Cl@8[O:OSRDZqbQdEg%@%A[V5EQ2_#*
%=o:Z$oh"#S&5B?Arle%`V+SE@F;jDt+o[@VM=CQ>5+WbC?YN"H\moN%g9s*e%"'b*D3u6UZ99.6$.I?Ls&TKHmXBDQ5rVYhdedDH
%f,fA::=&phKWZ>/T>'MmnIPKe(jeat(MSJ+^5VaPrn:=9?(W.rI!.&Fqs;r>I5(1%qEpllqSLbHZUKB-^Q/73e6BKuT\8jOQ\fp.
%.7(#4$epUgqo@p]9dN8bD<Z<%3:b6YWtd$<Nm<j7Hh#Q>^#*W`35A+d"<u_&([KiQ`?5+?.L]LW`T*lEZEtYO4,^kkVFT>-`&lG[
%*B3H9pjZeOH^OfpJuW/WVS&%mo9Ui>.d+2p]))Hd3hYs+YRs2_F1"?H64QB.Dp_00S?56k^m4\-O%!84lRF2!:hZEN-UFe=fCEK.
%)*p,nBLcTAK9l3\dT4jtbYSf5GduG#`Z;tgJ(;e.1s.NLY])MK^+Z!.5,pNeIeo&dqH2cQNUatiB=TgfB(%tQr)-P:j%ZgOj]^V(
%(jkogcQm9%:GV@q-h+cJ`D;>MYG\5*`%rZr9'd0%)K5UN1<&]8b")dQf0c=!U4h`,,0<B]dh?AIgFIucT?5Ubg.hmjK?cfqfrA&L
%5lLY^/@sF)JHK>/8Igr*lMlRnS;aYAqS/WJCl*3(im0(3mlR2aS)mOVG1:b/#[qJKa+7S=61``D=J!@4.8ebIEmM^,R`:XBWu4S;
%:!tcX=HX<q`\(&]q^]:B-V_,!*D9SA?ejaG`-ucO$Ad/3ZaJL8b0FcS_A<$b7I.0T\f;e3jiQ;*Bkh#YlUM[#k2.3Ya&M0%\;3YY
%G,1P02(JV#qZs.r7B%8cCu*8Pn`Ean!W%>MHO+H`NQ[t`J-l=Nk&)d`R5\KAV(dKb<bo((;m6(X,U\W&K(Zc1/Y"PMb#5V^1s17j
%@AG1*r/OTUXW8NV3U55RH>2_o@4J3\I$!Ok-.-=igJM1C2Hn/iW(NF'jOeA1WNk@@c-u]pa5*f\Vd`9+HE1!orKf<+;`-:Mihp6,
%Q([4TrRS2O@^hbapY1mW:^lq^M'Ok-3YH]!RUjT-:^#d,)sdEV!]',@IGHOlqisXiDdN0"#0hIre_eY*QQi[noE[\sl_S^ucjV!2
%C?7p/lBtp0dr*^CA%tT-V=`Xa3\.Q&Bm%031pgkodOoaiE-1go:&IKH]]M/1=s9bfKl+=hVbr[ng[_C0rT6[q/5)H$k(`N)8aWeq
%FS9loj0!"$/^(AQ2\iTpSK1)0K:mM?=V)o^3t@^eE]ZbffY5\D)]i3V+gd&,[-MJ/E*[7gLqHp'5.YTfLA+mQobqd!A^IdpgT<O0
%2J1r(2X*38UKNh=[)^:4,t?kGeVN[ekTQ)[XGrj'FrL;/d^G(1Q@E3jQWb!Z'P=9#S*AXT^O"T,0*CU?<Zei)\ouKCkgE@q9@Z:C
%[MlR>Nenb-\jb'de$Mq(eVR2B_>b^N\tm;_%\V@4^#E*t-&j2$+4N"$G<K-$g<ZEh7g;)%_f@iNIhX_Y-#'FP1YAC,4G1Z,ri=RL
%80ch0,Oj+0fSjZXQk+uOHenD#/_Y[C1FW"nBml1_0FOb,dP/'*kC2+IHY8RX'm<bVa31Eb1V<I+\K#JR>FH[NA?4,(jK)'OC\>1m
%mJW3)M19A2?gj4p1lp[ihC^a61g%-M-i%u?(,k`jVI`*f*N$&2()<L;(T.N8>1P?36aWm_D7@AUl?D6#HLJZ)r_50S)ePPDQZ";,
%5m&greP9:sWtRn,*QO;Z)ZO!r(^t0/74S[Gj2M27B+cQtp1X8"3T000X]+hnSW\u`,!G&Ek,$D8/gJ6H>J;L0-'mo2VA:snd_+[L
%`nu3lr4=UcrVJ[HZ=,iM-RPCnr0I&Z<%Z]#*2$"&)]nd._*SrVoVPggX+.^cmn5g0iPm]cn&kDi+d#-YAf/:AH*+E([i<R4Z@-4h
%ZiAltf&(i!M-eYLp"BrX)Y97T:pH",9CIN.j50'`f(B154(0CJijac@hGajYUj[\h.i6=W`@=Z0(G47APFMZ[F[sOX=#=k4*qp".
%=9!KU+(D*^oj9We7%`i5<X\#41!nc!*;*7V'+1)!:Uq"A92Q?rE9lTG#"lDYn>,IgaGRa2&IbdA>CH\kjG8#IncQY@?Rs'CN!.$0
%?tdq[ho$eX#<<e9S/Kh*Vm]A\.8i@k_)jf!;VRI_ldo06/iO$@H1*hm\Tc,s]ne&07ZP;BXZ[8C0oCpO(Pn)DN5aBR2X^T#NjqSu
%$@ZHkd/nRXZ:HW,bB!GnUa+Y2XuZm30DlS[!'F,5"?!a+i8@Y6oe%H"]=FNAnaB7NMh.R?Jlm;A6CtTr[]WZtWXY\t:hpbtidcl$
%X069?hX@R;'CHMFNkf0Qhk9`="E;08$tS9)F?R7G59SA;0_@k1L3bL9btblgMhod$:&7#0?70=]k[`V1H9G36)Eh-RB'<Y$NlXfB
%+5jttRL0PYj]75.X(WdaifjJu&8gcK2_M]<]lotoVmP4_b$>J6hl]_sJir,;TT?T%m6I:N/rs_t]Iqa\aVDBn)Ekb<3EV8Q!(%S1
%8+ug\AiNL^b;`en*EO5'oR"";h<IF'Mb/_\#D9%aXtQf?WpKM88$`D@/pgT&TmM1BiuU9_+)e1;`Tg[h3G*V$a%lq+Z.,qp@N&U"
%m'Gtd<!g%<@M':(I&Gp>9@.T@\N252diU@0.iARrNuE\HDnUei6VN;aGn:I-g_f+LG`>h7iNh+:*ZQ&eM/&E.?G0^%8+"HL+VIWK
%G=8oHDkpB1jTqhNUS9fY&;:*H.rBATg#"\oeDco@m1!pc;^/N7$SI7XU3?N/b;DhE`D]_6DcV3=im$<fr=^(*l=pku\C$2oH=Kr@
%od4eJl)EH/=1Uk?n=1E9FKKPN*^0%t;,j):oV'P)>+89*@iPCe219@B06]2'K=F?-.TDl^Q]rDraRP3n_OGps=h.9dJ]l%j3X6K?
%f;R&peORj\U=r3UbItMDYYh`ThP&121fuP>NlCSo8lRTp?@ni1RWC8j%5*(]o$OQHj::ZnLJa&RU;2T^VEXB_fY$ds7KtS\0sDMs
%PLZ=O_s#%.rDcYf`[M-E"Z8WJGJrjI7BKmpNGHo][0#-XfM6&OqHb-ddq&2e3SN$#8EIXhr+`X'@iEa2X?nO=i`]l4X%(12W9"P6
%N\cEfI9t\l3Ri_h9d_7=Uop2ZQ\J=,*Ru)dPUc?OPC8Eecr''2Z[7^M%d]Ls@)03!NY;V=h/&?$bJMo0"3q,FMrnH[fVXU@>;'HV
%b15RZW#*MJWj\h[;E/CH*+n.hj?`Y#U4`>t)FN&^ePT51j/.Mn\of60\m4KrD0L)K<NeC=E7Vlf;TG3NrcSAUFYRQq0!"u%K\8WW
%I3)E>NpMs6`]86R6bdnQC/t1/=pAhDUW,"Seo/Z%nIeB,+`TVZ\nKe`pZ/Ci7QE!AYQISqj(:P.01^.jeJeII3+b];p*G$2)hKJe
%U26m%!.';-7tCiP\Nps]J^H6LN&(iACd1FsV6+Kt>2>`F95>[%UFjSF0ROrT*'@C!VBp93`jKU#%Npf9*Jf'4qi0a:-1,.YP,Ggq
%8C4rK0+p*ZoHN+2c$Qh:?ql=J'u+bEm$i9Pf%l`ABH3XiK'#3P+,I^Y#]2MQ>ckdb[8E*g+C`$(;6,_AGQq^o.$E^0(*U=*[/."+
%\'h&_Lbs!_-MG+X28)\Z`.5Oc%Vsl/2[sZ'')eU&6mCL&&a1,AS9bpg5d[Kj<Yufip;_W#^_rEl03!C[<3tDH[FS@)PHX@AD)+t8
%XZ*Q=#npFs8FB@>YFp7W1bOAtK]god(@gCV^@l]a3hSf)UG4a(JIk,Jeu98GCY0^Ebj`XtK'!.:9EV&BR<&*K!2^,.-L_7.)oOuo
%`_mf<nn0?26NsSSajDimkU;]1^!`nW)R6DAgUuE[]aN-CQ@_=7Zp%BLnplrp/;Z+&[>WlYPWG)##kaiLE5=)S6L1GF*,JGmM<8`F
%!RL$fmNW6Oq<j3_cK&_i<n5mNQ_isqIlMc?Zr*iRlqp(aVdSE_K.V468M4\b8dbJ*aQj9]-/1;FUF)h)U=>2&%`&5F"M]l8Hq(<?
%dc2SZUSg;ic=o8IWY\HLSdZGk1LA^tQ<u4eAUX2'KQj<kMJ^0hDVaS]Y_:e"K>a0l8CMQ)>=6$kUcfn\o^n"t39`P/kc6rV4ZKP]
%Aa'-+$E@9.V.BP)[TbAnQhW_`DRG3'[&NjqI$lG7c:Ji8nt#?e2!9m'4@E,]f@08n>$J%k#1[Hg/LZqS%8T?6HKgcr>,eOYj.X@V
%=#:i*dm98/(OE]R_\-.0A,j8Dp=4N):rqkP<R)P;LWt#$$5;9uk1HNqG,@_=a!9^o5blj^\e?PN[<D3](DWd%q!9_\/Mp)m0utMQ
%9fuX`GAP-0(!(Ed9F!&T9]g?($cbcZ6;5K@eS)LB,rR0L*=t8X=]?R.<ioPaHW!5nAFc6W5acjHa5as\:[@@,K\MW#8=JEC:9WB:
%o;Z0_ABu&V`V<@.Va<FMUT36PClE3W-<kq)Q(sXs0k-cZ+B6KLNpdP&aQ3bso@hOF&<SCuC?L%]hu=F5c-elD4_3%]adO@Rf]4p1
%A&1E(ItqU4M'h(pk&8gaO((fUo/-84X[;1@cW]?i44\s&qJ$H'`A3DNCR(]sg`/WI6*4<@>g]Ld?un8AQ+QMa%9TDa).aQ5er^<U
%p=eY5/Cj"+]LF_e3""9>2#A#a3KbaTkm.U,Q0-jR'#g]*;TIr=m-]m;jJ9(8^/07-HA+ZgYP6%WNI#Nac6dgd&GGCSh9i7*=*ANK
%e%d6R/]u;X)Y_''F?=)p>JXP)C&5%jIBSM6H>g'_(@(Eja.+GtB*[rT\K0dD.p]*]4.%i3+RE.42-dU,NuU->(GC\5;2BD:5c^fU
%E]%'YAs#+,g>-nR*6k;#2af9ccOV+G>2FMuo^TNmIV$iMFI:3g2KgQOCR<RuHhi"=MiY>>I_,@%Ie.%'I^$9VB'7iuq0[&ZoAbJJ
%7_@U>\)i1Q+ADBXXuCFZF-eER_p.kXkpMr>/+r%:o;,]g@5ca3mkph?H`cYrMq@iq)eO&p<I4MCO@uJn?euW8^\E?aFE7222<X!p
%/,0!8f)1n=a]*$Pc-5TIlY?6`rLf_-R1J1d^R$%WULA0ZqVM%`hB"`7L%G$2VpCd[Xn:B,UW2&jIG*Dcc@=MPCSiW*\WqklIW;91
%6,W2<jhHpgjt=B\F0aoPo)#hQlr@ieb5!H3<oi#1>X@`Vf\C`Npmp]+-JdJRHMOs<T-!sPm1sp7AQ/$kLRF@UK;tBYHb\41@D)&e
%bD#>8om1WDauinca=J0hQF!bq^+F8@4arUP$JJ:I^"n$S[9b9VfD&<KhS.XW;F:h?eTVq.LYpZT?h]H2o"t"=WQ+MlG%Ud8d16em
%[(3npA^E.)qV*ZmR;1]#AbkT,qPmKir3YNEX3D"sdjXR?jm+eOl*?E*CVHX1EukS34$t[(Q*s_Ag153mF>:09ABW7q7FCU5IpmD6
%GN6NOm1msaeXj>-:\KERc;s>uo#BGDV_rc!i!];VXL^YB4gUbC^p\Wrhq>36=K6#elQnV-1?dKP^+R,^3685u)isRaQ9R8]N/]L)
%E\H4$L=+?9n!a08j_+CKnC,Chm?ajOf#m\FeXQIZGDUt0lc[VGD6M%9o?4%?8+3$eX;AXdqT?G'R5+AYR'iYsW)\#E1PIL<.>Ys@
%a(Q3Tr62a=c(4BFP=tH$Zp3:%$^oK!pZ:2LlH::(^Amt:einTTHK.H^lriKCWmJm.4Y.R`:8It,a>dNj4J8$u+1L-WHf"1lP%*8h
%DZ+n;mEI5\)_[p[qbYIAS89!e8Z?'HC&-G7olk/;cnc-;I3t9;B$L'sq9;ChlA`>tnEr=*P&$=$2XTFdQ/ui,qqAfR]qi]85$BGD
%\`ep*=^QX3?HhTT,-108C\65=?;_e,Zd3EVl_gl^RFAiMqrVYem:L2!UYUFW\;+^pctP_mV+gne[?&!D^\FbAZuoq%J)!6>2kK)^
%7UnjtNh3CtAti>%ZQ/j(RBo&m4L^ILQA<Pq9]pT64+=+3e?6A15:S<BLL7@mq5oQ<<u3O9MtsJajTB;H!W0*b/_a(YFZ[':qbKFg
%?^s<)g,B<VL?9'fk'!mD!ZLCt#*b+@?`^rAh4/D5])mCaC$jF=T6oGc](r@E:"FNX[>V.bZXgE-9RSsb9+Q2QFQls>efIg^VN7(Z
%A-^:RpHJ"6UL&BrSS$6X$i<_C>%bfHk2b9'DRK+Y0s<XJGl5G(S0$042rC4pqY>"&om7Th@p.^ggf]d9p.F_;bWiDbhUBKR^$W]0
%O%7S'/1>(:WTcpF*q,;qI/5gD>cp;J[sRMW+BA3hFH3PrUbaYgS5a3iQq!,TS8FiYNt/YmJ"2B;'Ct3]mNV8tCQD%HcKEN>mThOj
%Uk#KHM3`;@pMIhMBQ2d;H"*sA+g\aYgKlll4JdaZrJj;DrPR`0:Mka!c((kO<jt\tf0p6p%o#f?042FajYsWM-2s40\U7:Tm8"6N
%(UE-c4cTF:e.ks'I9q5/DS?R%a8/ndUVC'8Csub1XSu*31[<HGLSl2AHN/qqq4$neiY$GPa'K+BqVdns(GE7l2o!h>-1?XsMI)?5
%i+M>Y`Hn-04[5f>hfGe()Y5YW^)`gg>/`S_@4Jhe5%<"0]WlZdb_=MCF2I:B(GuUsL+24:n^"&uM0]s2`cU`)GeJTl_F`W)Fao$F
%LPOh@(I('D]tW)Zgn7\dT$q&=1@`moNPB@#$b>dg[KpV>5<aN2p$suhV5@n77dTRq2PY1<'K)H+OS<pmoqJF?m6<alQE"Rd<4hQ_
%("4l6@-F1R-u(d^g.P/'D.+@4VhhMFg\<ufbV8`-`u?,hmDnJVo#jbQj^EnHQWeH:N+bXh<29!!F_(c6;-hLl(jZ1YlD8I8:*70u
%M8.4:IsT[%.f,o;e_YCK6k.VW[;,NaV4&\^`ZUBMQQE=r%cXQ.;T%81%;rH+ad@farV\OkcpV79;J5a90.D1Zh"k7!aK2M^1H#;q
%^18<TT9pl8U1bk;IT`_d-?]=D#S!JoWFh/D/mf7LHs,pE+.:Te0<=nC+g,OHSV<Uj!\;ir*CDCFf*`PnZe"B)c#s!KhX^BppFd`F
%Q?jCc(bqi5mmb:Nd4joG-r<93Grb$"$'-'pQWa2?@D\j:6es>,rSr>j@pD7R@kXOBUh+]kBGe4eV`WY4Pm]DBo(`eP5"tZ$a;e8W
%hIKAb]9VdFrRJmDDp.rNDkS6J*61]XpIpRNqs!`Ck&;ht`5j8n?'V"h+ZC/"XI%KT!ccd!DiQX!kIop2?K9/:5ojL;(LM>A0AjGI
%L(<D?B&S'6Go/A)9Xo"Racq9MG?g'uB\-_#?bqgKE\5Y-j1P1#]ZaZoDP!qqN]n%fDZA?e@,-k<5E5B&L:Tu69\`k;1+J)YNqiLq
%@6XGah:Yin]=ke);-CCSkkdcpZ98$H36/uVAs_f"V@_^XPeV=P!^haVc'IBu5Nr:\T&hS'9@),oYDm2P#f%HEhRZniYdIY\p2hnA
%YMQ,@EE0/uqpYAD[gZg]hhRsC]EL-lnGlF@IDu(,O2bcebia6C9X/qG%ZXk[iHTJ#K3mFX2HB3,Ge$6g'pnOLcCT<lSIa!LH0s?a
%QTO=qJ%r2U/Ud'Y@7!`DNX#LV3d:++Gt/Cjo/X?\gfC/jm]9Mnh"$[Bqmu=]HC0(?q6+.s4NMGBgY_(D=)fH#fN<F/qT3jeqg7#J
%8"2okLWZYO&CCE\OEpfijD@)i</eQTnpKhemTd6IO7`C;kOku*h&i/K+0Vq.>?@HcXXucl3BN/olV!\T1&WkSIBZD\s6-1-]PE>G
%I*H!@Vt[c0F92[C>-UuVM,hMF/GR8'>Qdg\JC4D]U"QN$UIRXU:VU4brmq)]NH"0!Y.smRT3TU@HbGslAkmN,he@##2WX"iHQMVX
%Do0uB[LBrr(]4GYg@M@WRs3S59e)H`q<Cm#Vp4V8\iASPJ+GW?$`Ze!I"2*hIIo[DqSrP#,HR1'r9$e,VXl"^dFJ2h%`Hi=q:`eA
%^(Hp5Vi_h:HV5d,7SaS9Zm=tcc907?S&*3K0ojK]@XJK:c7^3'fCM#gUKi9AiQIFS>pb@3`;8;NM/d_=m#%,DHh5J<CZj-d`RO&(
%X7+X\RrrK'cW@TmBHj]hWrAbob,rBbhi*lnENja(I/SdGD2,COaZU*`l+<i//AKD0%\LS=otZ\kB(iHGI&,jfDJh*lYqKQ5XNQ$"
%./VtU+7A:F]-!mBM\kQCRqqKanZJ,U<\D+1N]8kspr:G]qZV0bZfbaqI?E=\<e9u6j*E>V+7:r)YTN5$&+E9T?Ci4nmuHkL/ao<p
%ja6uGqb42Ba^(G!&0Th9W?&?%en4'nG2]C4e;'d8B]eEn2/-.\^=->8oepm&^Bo2X;E(MgZ+/IXH0ri'n`lIKdT?0pG5^51lqIo]
%./WXYQ2"tk$,MqRDt7Q,=0):pb%Epg[*tB92LdhB"Pk`8?gWf!?GB0l(N3BlB=,q!Br;JkV"0F$DlN1eEPB1<]7"cp/ggNHPq?)0
%$Y#RjO7oof_[i7&F\gd</o8RT6VSTqFm[;t<nq5f=?QV'ZcU6e:A6q9c>Nm[FlkODMeq'pi9G@E7qm&3n9(-X/Zro-n.K@mSeg14
%,2pWaA<'GEJ)"Rr#L0C!dt?fF>(4;sTA/gY[U*gaIGTO7G%>N]NDe_6DRXS4PVq@?erAMcqVWD4'E*'&EUW_;pYp8.'a!H8,LaSK
%0CAG!%l5$4b6MBJB<@c^,*5cMdd9ZC61f=4eA-F'2O5C:S:Sd@[a/#>epCi9R[\[#ki#,4m(oG1U2]r"p=Jc8!f&@G0'Q,Hq`Oad
%ObR"#=>i?S:/;tflX?4E]:FEF_k:&O)uE5R8,rKLKM,W6aDYY(&9cja7<C5U><0)P@7E+]mlIe'RW6"#9@*O%XUpn'I:s;H"WtJ.
%;Q@<Kg4=*:%<A58?Z0gEX!:?'/Q_U8"8W;/f8j-_=nBQ02_UbO2BO<@28ju-]e$$Fo.\e.YK/l[Y/LRkhQ4OWmNFhf"C&kJnfU,B
%h*0DCHgas`l,-@KoC@M^`^YCQnl7DGXEZ6Y)%W1j+t<K.lcZFh<[tZRmE1<CCa\tNeF2t/g@sBV[o^kG5:J1/qqi;2q+S>FT4=gJ
%9EQ%q6?)>Bf';GRbEj0K$H(!;-`R$P\6-tYAWH4L]D?E-%)M2.rA:-lQF.Oo<c6MB0AKAmjeF,*SM/#[XQeN`h>:DQS\:2nZ-ki4
%OPePlB=.3ZoDH9L.t[]S2gEH.,XKF/P/la'XC(#0if\=ISQ"]ePlBBAkY'lgl`csfgoY,"X3[sjjE!fr-i&J-8UBN)E4K[n5FPlO
%%+,Z8lJaEk"D40f#?r)Bo3ubcQ!P@k$sGgJ6'1mu[G!NV$JU4!N4G=(Zb>!RrrS`8qU\AYY'f;)+:1ek(d?0cITA(,S.=mQ4PhU*
%Z$r+?>oc+c]2k[pQFXcj'TNlX:>Gg^B+V:S1?Y:rI,8#Yq;N%9>dn4&>Pn4L_ucD=)4tlJP;0GXH&tZ@?>[WJpR/]mb<K-5YmDG=
%$fl#<Q8rTg*dECJ@33bOHP<;7*ijN<oBRq$]70`R:5bV4HLW2opi=E5mkhB;ld$+276,F0?GB;HV6o\uAh3W3mkFgMq4dk`,G&1f
%_o',C2LK09p#/d1V#<d>1b_rT[p(:=ac9p_1rZbks)tX)%7^SWCE!OGDB0Gc*t7#t#\^_SD7-Tr?@.eQe*ckU]._q<\)$r7b4;<p
%c0fOS%$Nf'oq&V('WV?"lRaH62e[nr\N$@DI.?8&_=?>_*@&hOoR#Wgqu!444ij)Z/@e+.ON1UMDGjVZ8Y)`fbLu@AO#D'k`Rh6I
%hVqucq:&]8H-2BM$6uG8et_&JdEm52Y7A@Uqh)\$Li=:DMVu46bj-WhA2=T.&Qd8)m?YK`BkO2:/0\g7[M2Kg?@=tTkJ)G1'l]Vh
%aj#<o1Xskr)m]a1GdS.lqXl5A(%2r[(Q[hlm+0A2e,3?/^"PPAl0HJ<m7?i*ZhAP;"<"&trk1%PWWn"We'FDB+4iXFmcA3'h.a;o
%LHn+Cf71Qg>^ClapN#`GO'JpZomV,6PXk5f,dVnr-Va/WeQt=%I$F8G]^(^Sp#8F>XS!m)hg?E6p1Er5QBtG$7"3#c=mO>^PtM4^
%m-K+A:HrciT4ZsA0!.X?5#'U*@ZgZT(iH1U_JRugm6L=H;OL`jT/M/Z1Imr-[=`)'ef.>jm2s2,c5!ecleI]PC;JRW[Y*t.(VAFm
%O<unH+k]*%_cHRN2jM+<W6#Nb0XYRa+.^l!037\TG)"J8Y6fqG:?D&sbQ1kre"uF(qF2rf/U^o2P-R/`T,,&X+A+GES\Dh1[?gB^
%Ze6t6jXt&C1Mh%,+C+/Mq;,YBC]!#UB0V]bj,Q!_3W"&2Is^9Mp)^mt/)?:>Y8:@%cQt-rZQE!:Ep)nD@hQCd06TOLe\AB+m"j&N
%eaI<N(g25Yl9(>]?oME,GYWeQ3@X<]5I*DL:.SC!?>P1n2XE@m`DmQ(2_4\-Yt3aElf48chRs:[:4m:d(\ZT*(E'Xmq1X60Xfq=k
%@rPWNdDsFFm\9DdR0-.c"5fg7cano^TC0)8orjdM+.(b8$_X<RnTLUSs/UMA_Dq4IQ+ckgfui'WIVLnaSSm'U9R1PHhmP/@nrJo#
%GC([ml(Dq_A84>tX!eiGb^CpgGgMZNm](lH4oan8G6rScmFR#N&+Yd*(@j+.*P[FnW-8d$\\7)0<da+Olf!$GI&4nq$1HsHn8[Rh
%,OGCIJD<UiN;SU?\c+J:cCAc4BB5HraUqlSq3bD5aEM9pH8-0kl^R3IhIN2Bm]"9U\bmW`(H<j^Y"$*el8U8V+I4pAjrTbuSU\#Q
%?gj:AV=-S<hV.[0l-_aiIJ>5"n"m=j=4O&Fd(=\WTZOp`I:l]f<P%qh1#usB8`<07J!d7Aag^\T4V?a1<:5r+nE,*'iRS0@r4cn#
%P.]Xl],]^bY%eBW7mBse+H@8i<4i.!OQ'R<'GfQ,(QA<#Eo4(b0&ZJKEMi2cfPgV,A\%[5AJ+oFZd<Lt^Kld_N^jU24P`7%j$/G@
%h#,ig[U8-R_+^U]ka,6)m,kZ4D=QsGA*]*2TMO<T9:B#rrJY'0e%%b=%(pqI?gGCVDH+N_V'`A;l[8e,EJC*!k+AAss5tL(Bh,pT
%S^oCW(`%Rd>8fQ$9FF434c'nEHNsI>+'b<7kMUt9%*&X'"WPW18,oNqi#f@-^I.,h;le7XgYq>on?_uQ[Jd%,h`o#E(W4hW#qJ&4
%hX6o)>l"%8G(MCnr(Vc+qJ8^mfrtn]A()N>Adm@i.K@4(&>FZ?VGR;8N:=T*pg8Ta?5*7J,F9KREG/mb%*hKEgU2[k>kr$2s8?;8
%!2#cfQ($Ih+Rr5Ngj#_uXEoBO*=U9o,->d!MbDe$G:[]=R3TGs/P))TFiSUo5t]&&=QWji&f]7(LHjaMiBRS&PdsW#/B>\)\9hE%
%1Bhni*E@D,]:PL8K^4e7\TZ]R%8"l^1G*J"dA//=NanN_7tj2,j#A7M>1/9k'uIsYD*-<Wlrdt;H9;,Y2:;sUGC(%8E76WW.lMSF
%=TO-3R:c2=SBRqX6)5<G:KLq&9V&&VV[_,KTF`\Hq@G`_ldA\rOT*lZD'H\P4]aR)hO]t6>I7Zo<a+-iO(`-b7iS&N-.>GHKrtea
%IR74P9D?feFD*ss'qk8:iR*P;d"E_uTF%7Im.rZk,*?VEN[n9.dmsD14#W'!7W]oXW=5bK%8R>#M)622D7[qc2V,kJM2(2iD-NnI
%QY'FAj@h#N_@a.4dS82R>2%^qraVBRF^Yns#'QS/2]\C%-,Yp%9UZ06TG:$3`s[@UfsGKuJ,I?-BHKo!Q!r.!H^88:,;"U<:Sae[
%4]D5CnjY-EH;\c>Mc;\oF'u]FM+'Mk8K6-_Blm/&Bg3Su8@)%82Y!o-*AWG5>`Xh.EKj1)dK$kH[OgEMRYYfQ)?H<P/Z]Nj#2XJb
%Sf@&:9p-i9)JNC]K-"G(ch5f"(9n<nfqcaEXtDS81SR_Zq'N@%&OoR3gbeVeL%Qb`bcf`<g@iVYVC[lJBc;6H8IOJgA]0JE&AmBr
%\cEab]5F(%]qsQh^X/.?kQ12saWS1dW'>SrPIGY_j41JLVed<q@L:#X2XQ&aXG9<QZ-k=OrJ27](d'o,`[.n@/.]ff]',9"<7#AW
%NttI-()H&r3bd'KKP&UOV;m.?QhK#U(8Dp&S+sfdNu$+rD'F^84RJSlMhR7,b8'Y%9hPcOfG$%_$&mn"Db+]=M`&ubBO#:C46FnK
%C&Nl##\@C!VIu]I&"@$k4RsEM&U9oh;:hteF.lk^hSBuf'<+/oit$n15i[sE$S,uT=BL%3(hc;/Am#mMeY!)_-O`Yj9\PMdPqg\k
%WH=>)h^+8C-cE2HBb,;U1GBg*&r4OS8H>):2K,+BSdj5B5VE[+#CMAFfN1iT0%"EbV&V0CWA.S('9i-gTkj6RL1eo>HJgFh(=+>h
%$&Q[;VI;aS3V7ihgqpi2(r7PI7I+dB=C"C0Y,A)WVCqZ5]/n'^D3&k%`)2:85p):].$\>*^t[5H`)F*[6V6MD_?dhCr$`VVFY%C0
%6^pMjaeBOB/@H(r4L?:/i*P,Y8>/[U8eN7m-Ad.fLH4'^]>A.'C$:^d_GZMdV+lU7Q9f<OkoMAhXc[*DNhP9"]/hoEP4Bg-EiG`E
%NZq%9Cg'\bQbYK'&>QM5_lAkNOb!V4P(G'Te-nWYY!`6"d%%JA#-BMG8[,24?"^$\P;K@X@*;9+j:Q,\%,=)Pr<g4F9l=(OM'QZZ
%Ipc?cPLs6uL()Mk>`Yar&=7^/cHP97h7LmH,[/V]6\hJbF/>j\c%5`0@_&`7oTnH55E5_BK&$U6$GF=1L9rK\@=u#)+RM`>"tedH
%)aYRo.)aB7$FXDl8N'-b92;kI;Fq[-4-hk3MR6%'q3HdbO9eFPQrY'jClt#K04_#c#^E.4ENfHUe=g;[S\aF9,h<SdGahEgD(6Ml
%PG(^GL0--nTEgHiCB=mgC)bmPYuq<`,mY#Hl[X/Bj:(F3)kk2@Y'#Bh*c*^9+7!dl;E"%N-A*=NUM!f@SX#L=cr<.1K93mtAs8TZ
%[jFopBbMD8]#:WpH*dt+&eJ4t4_[bsH((p01GZ2$;!!;E!n`n\2X1`%:KEI^.P\VhY7qF&J-/OkD5=%kJtCpaF*/<7P;amYEhH+"
%KC6gX'%Oqj-L[!p=HNAP@7_T/X<oOF?t^3&?'"WI`0WfG3k#e^PIJYgQ/37_iJ-%qg/3LR"?QY3+CQI/KEd-dV.$('9I2u8_-Hn9
%'8`NajRoB"phdG2>H!YG6O!^Y4-&#!7YNbj3*S1$-FjF[TaO!`SLS@@4K)[NVI<"0"geLgUbnjeA@HYsLe#<*0GAd!Oh(qnScdM.
%Ms7d\@UacfUIH1lRYk]HlB\'JY`]2_'Cs&A1d>(9QiflkM=Z9_0Y1[@#Mj>C\A_BhL"CUOn2\'&h^*YDY[%Mf)N96N5tk]RKje)E
%N&@pRcm1%R6ToT!jhk[DA<EOW0Hi$++db&[dV:,PN<HbraNcPE#/DsdO!K8]6J@0?HugZa)ak'<\df,`i<-n=R[1mXP$(/>T%+:>
%kg7rH")pJE./:]EJ1*6Ub6'f6_&NFW(,Rl$hD>[,@"<'J,=nV]BPlSP/8,1n+@qT`e3-Hej[uq>2X)E<HI-J!Rn"BL+9d2??%nJ:
%Abpti/@$rf)';1HY%C9!6kmj$iL`(02HXtI"]/8g&cj13XCR;.8/d:6R"@2e_T3RNA<q3<.0NRj8A>EYD?FoPVEc@@"BX2dCF>>R
%!#dV+Y9eDob2$Jn@mS:"E#oT#U9t&U-GW%Pl`<i%P&`ngRXeOp&P)""@0DPu3<:"LQp`a@'[T8/[(>m\es\XpTh/bB'@JD6agR`3
%+jEO:TabO+(`;I.^]X;7JfZ_>mHL<a!3k!Fm%Cg*+G7)CS3"<9i+0n<@8J]^iLg\6=A=lgQC'8uL+T2)(9e$%2?Xs*BEM>idR2ea
%4u@%f5qAa`O);rd9EQCTa[1eC8cMr#IKg?A\-PQnAn@DX4nOEeI$8`oQDFN%f[Eon!l$Qfef<bUO`hou9G0;9_Of43PC2n0RK`a1
%$(GKLADo;"![Eo5&m)o.K?m9O1BSEF+sfrOW$-s7FH<XC.4\S(b_2Q!Y>B/E8)siCj@?JPYU$kKhIMi$9bJ,f>@_;1PXucj+?g*u
%a>@2pdjI^k^FS*8)a0bReTAnO1A!D.aT5>`"Lt>4aB^T)k=afBL9BSo\4X7;&^pO&U04:<8:P\oL=hd0"!Yji2sl,](68_KN)(pi
%"pB;tn-;@@'t++Y9pg,,MaUbYW(&qu[aBR2IZg:g/:.B01`MX#YTW;.!UA'YC*rcje2968UeAi(&\?\1!"r24/kqp>!DY4`$2JVk
%-fia1c_Z8$M-U[LJQ*"Dl22`F,e8'+7NdIgNQ-N3OSL(aZ[cC&La@0rJ3aV->`7bOTIdVkm56$$7TbDRdmZY3S4=ejFmIB`&r)s3
%iYP26&6L+c@-^FZ,S6G2S3[XcnuAO.e^+qH4lY4@OkiFI]#<$2A6'khXO;W5JXXu;NJOtB00Ii`@#_$Z\f,hoW#:fLMutc.r+ZFq
%A@$tUN%-F!j=G;H7>OeAAr.HY]HKh^3Dd3S8ko)h!+C[dO9m6o+`Kf7*86VSG?RnC;3"$m7>.cseV9L7#TM]Lnmk<-BRC&S$72UV
%*sR-@Fc-FU6\h$BnW6%o&b6m[O9go`6T*frJKHI:4XG*7!/^p78Ib_1nVA_%2$>Q6,lcq[n1MO>A41)m%3Rc:1P^.jOK:(5%2%h9
%ERZ-l8DG(S"sTT@ltFe3&"LLGcit*P"sCJ$m9FnHb'-*9M>O&""(!9_PYpHYe'?Yu:5%*L/Ksb#.UKu$g'[MM^rbs'EH&o#3ep$*
%Lh0X)@S-WOAkW7s91q$34q`KIfFBf$-HDA_&\oVLYQPAk1lfr!q4b!!UWjnU?,lr`,&npDS,>$V7j<NqjL.Hr:_64(bF6a%)lDJV
%L_=Fk.[3^8IgQqq_%N*M*W^<tF-FKlQE?O-r'D,[-)Vd/%rcT^2Yq8q9It%"/=Xupi_B&r(l0=h)+F*16XX^ud6uZI,c3Q65q#9e
%UJ"6+=ZP2lJq2T%_D&?>U^_F5?SJ#Q`snU_Q:\&"p)I6&&[.Bb5eNVo*3C&$FsTPJ*kGX%$bD3RJ9;i[7ncB8PCsJP_Bb?0!1-<r
%2:Pidpb:0\s%YJr@/qI5Ull3dkqIWA&DA:_&.r,"E]HkP<:Vrh=H`3,O`g^6TfPa0f\r&?/%/3Va@JHd"D5_<@),(o_eOe!S-Gg4
%&Ypd*J1>9<OO<:A!t-5tK1?Cd"4mnZ/dF<8GSp+BLqU@#@SI/!)BgOYf\f:=c,@2TpI6X#'K.CRGVnngbu!ZQMi=`8=D6n,BN>qu
%KG`)l&@,+?A*J:V@j,3O26(Q1E@"`KOSMtX'sU%!!S"6Ui!+gUa(-9C9Hn=!:`0(j[%iA=,]"pBC_qQ0"#HtH"SotVa1qaiJW/:W
%;?_>D`(:HZDLf#Tal#B06]IXG5\@p3-$CD-bNjinXN=;!4Esa5C)%oBgc6Ql=@UM=3!t,2&5&/mHEsM-_Y?:I4,6mj\/5:1,$!ZL
%ltI\FaNu>(K#"/o?P@`%MJC7^2LrArb$\=0;^o#C#.qShga5r-")&#&7)9n<%5OX)K]G*TYDr],?b(;.;P3#B6<ZooR*g5Aj$[+f
%T"D+*:-_[F0V4#NGl5od!\30C,06uQ8>^mg_$ZBA.PD=?6-DPtK]E-OZF=@40cRr+/;qak6C3@r>YTLF2H*+]Wkp<K#nNU.!eOr>
%3Ilb7-ikfHh0.JZ&$;H-6nVHA#q!k.3ZBW>"lFp1kUNTCPOA0qZWZSP\oLd,L2nEP)Bg^PEB/rSO495i'8,!GKt+4qUojPO!s&p1
%JN=nT0/.D_L<aU+<Z>3MA<E?I803$en2Rh_!3:XPR1J6L!-o4a0!#3o=-qj+LA7@c@2]6./BC7Ud%j45R'a(I?:ZiP1/a3'TL&ll
%-"JGE6o%d+N:]#B#n,sKKK.`j;M#OT%2PDZ%nD/#4@eC4M%CWAO0,ImQ2mgKE.NP]hKc8X1a=2EUo.?Md[KED8'mrL3Q46./"!ks
%K116]"^s>T0'nojY^dTH<Yp>BKrN]<!mYO0jkr-n#Zf3(6A446)G,VJ@(KHa\CaVR$*>64AU'KYT<*rfhB??1G*X8ZNYt;j&RTWK
%(guk6XZ2n?1/+jI`O-CW^]XIJg-u@S\gWLS(qDk[7[P"7$kZAr6>e&'N^P^h>\/U@Gq;@cOeb?S'?2L*/BZ(.!tq9BD2RA=\tP@c
%l%"OsNH@XH(/10lF;f7Wb#+?f\57IP2+\$UXIKlIU_f7:a,aRN3/f;c4:eE-_(f;)Cr;F0%OAu(E6-FY;"<8$o)pnB&tI<H;'_!O
%N!OEr/+>D9<lsF4fLD.s8\kQQZ\iWo(#ajU[t0qR>8_,lB^E?a3i"-6k(WA5;nuc^a/K2N@O<if@6.6%=M"Qs8Fp!*kt)!9*]JJ3
%'Wp:IRjl6+%t]HS+bQuY)S2XF#0-`3PpH%hmAJV4@X3]C&E1&'S_$N5a,[3@m6Jq3^2T?.F1NN:2cZRs"b>T8]]g%MZ0Kk*bW>sY
%d)3*fl7j7Yg*-`NG1`jp<!>Fn38TRj6@g<botm"]4_&lX]cp3)Z!d(n'T\p$^]g/,HK&T<G7$Hl#SNnV(95G/0G.8U+lit9c;/.+
%GsaR.+sN5*:p7j,%]Kd_`!*O((m]7QH%DZiJtrc-+V+t*__2l94-7$t/3@*'n>%`QT!5niMZo8i$uH,mU9+"^0bU:Ff)mH+gC9(7
%3#\j08u=U(P6)FTD=1MM'\;?5E<6_5#/\Q6O1*&Z<A>3;P.ZXYZ*)?O"i;EC:BGu"6O$HqQlG>W2gknieM+Wh%-<G`Jn&4#Xq4._
%R[t,QR5brM+g#Y8;4c6+7%`B@3F.FU&MTBT:FIIgL3]h/7I8]k><jUliohX:BG3+b.(9@ug-^;mGuo/9OKX7TiIP]'aopDe>9uKY
%r'_)CW>&+QdML8rj:/u(@2GGr0'jlnY/nL"nFVOWO@aOkc";Je'Bk6!+opUc'i5'mL(=W=MLl.Z'b^!Gp'#]j#k:&EU+X"U@##<C
%+RWYN=W0nK*8Mt96E'AW!&:_dUO*6(LjY<ci8a;@4I?s]=35j^DBg>q6[P>,FZ>uO'!+OMfFkW56l^o&i1,l7F4c1VQJaYV`=@NK
%cDEqQ\B$(N4O_1LdC(8l9=BUgaWXEB@8=ifc9q.k4q=;S\cNsgScH5$H50T$)]\L>/87H(,83TjR+-l0q&'jnD[67h0g5[I"MHsM
%9[q9RAI:/aNIWSMPH%td!@,N_,nq\=,\`013'ko\(9ea.V?t9J2SbL3aHhO1MbEmHi;h1kE"ue*"A5KtN5Mim3Tr`9#bE4sC0=DB
%"a.ee-^Ras0lUf&.$R#L93rt8L<7X'-msjMVB/&lU]CI'a@fJM2M;GuN/-7p>nrHg%0&kbgLSqRN%eL9I6$4h5WKXnNo7&$E4H'U
%E#4'dFCcR4:*btd,b5&#9aFaV@W2YUeEVRC"98uZdreXjKOP<&nO5Ps&FqNKWH>:D@&mZiZ+L-oHdd@A7Kh*Sf/'/#RYWT5aI'2?
%89l>JNDpn_5bLi)6."$?*$T*3-m@Fj/mgs1"`YQU<!L]]QuiCm2EZdFdS7ZC-5dhI+u+@q$U2oWa`/?K=<^d$7l^k9R1W$r7i;G(
%e8'`c/4B571PC=!S#>Et,Rbk:eik^,T8I0D?J1jFJJ]X/J=O*(#X?qLTFqBUF6jm07[d&2B;mIN&r7e!&kP*=6gb#-D&S#$BGPt7
%d*HW%Q$rdMnkPWNd?"Nu),,-N^j\'pcRukG@L81`^tMa)X#R-W!h"@4C0];V7_Tc\DMSS;!Rc9D1.n"]i%PF6+*%Sg@mh>GS8$Me
%@9%80KbT40B_;qj@;?2hb1pYScCbN(,Z:<_g`RA>dZgP$iObS<PuWuGfZLne9F?sP1n]DMU<+i:6nsfu6/3Qu<5bn@$ts9FMNP3l
%#oIA]59NoN(rAc/K/,R!?%suKoGFQ%>F##G'ej#V&M?STbRF[,0N=^#")8Bi&Z20/@!#@Y@,8U-JB9KsW^7'<K5N)]>*$<0HC"aE
%'Hp<b_A@`/M;f:q[.%$ldt1^7qfE#b+%<bsetTS_KbdnqLsuonZQMIX$F&_H&m&oE!:56J*!^$b@:o>;6JO1`enHE:56@6_d=oii
%=H46\&2Kn+Shg;(JIo=]_Le#&LC0^hZk',<%NS`Mc%sP4jdWB8S;9rrK4+;l-)(i6hVAIN.?=BNg2(!@,BEShhBlqb%@9E(`C6&E
%_8/bu0*&D4-0/<tcpJpGBG>^/;(dic&A-;6Jhq:&PTceePS$3]L%Kmj8a#B+4IFZVLuik*ll;7_B6#ipL2d*7S6.0)_PPO73C6%P
%-ROT/3&.PIkjbOp-qfT=)EAC7G09(JW-$_@6eI2_,O-+O%\l;,+f)pH$a_pM`u@VgfNcqCcq8t')F5*klWo1gaQTpHjErhql\;FQ
%KOmO+QXcVi*S)s=da."\To8K2YcQ>BGh7U=5bJjC3/^k,J5c6!Pp2Ppi?_Hm\o8m&;>3Fe<7*P81J87:cuc*PkUEdA%_;.HQ&29f
%8YJCS3IGU3PDAr9MF0du0EMJ"9i]nmEuBHd7s_f*#T(qZe:BFr<BZ:e+"k:F/okohOgr;U6OTinC/RW$K;':<7Y#C`Yt3VSO:L^`
%7:JK4<_sjZ789Ar3?`^fjX;`*G@=k]^[3K/._:Y:Z6T^Y+Uegfm\6qJ+V4'&Ht's\aGm0a%[/NJa'L*\51B^V)*3YA%Ahl+P"$lr
%8<mG4XBFKldSgB>JRD`VP'kas5dQW]PX4,m#b,4(BsL*PA*)SHVB^gH)1lcU#?<a^6AA%A-E#u#+c=U>HH7>lJ@/@!X.7+`oK^V?
%-S.I_>2[=eb!AFeG$XXL'p`JmE4Ba":^/'#Jp/huAS*h4Ich>$4Q7LN:EZtto#u6q]MGVnf`1&b=t#N;bgqBt%+/Wq0FYb%_qTqH
%]r1.]9E_X\JH0d#deKN9B]6fe:+)^'JAYc"=iZDUI7j\qTZ(2=F"fN(:GB+q$J/eLmms"?B;rC\9*M-/i#^%I!'jAtl'_kYY^2C'
%4W#1,L"B)6%DI$d'Ul^S(Srfofr9rV.*ibX(Yh#Y:Oc;cPBePJ!a6RS`rKU!-m4[McG_Q(YK8(Y%e#WnW*gUs&:')i\Z2Nsm%$M8
%X/"rTB`D=:=K#'*Xo''>$k8-E%;"dKrM-#>SuO'BM_HsODX,T$!o`gX!2:_T.WN]C#nSS54]Oph,-5=Z0%H5(YQ7+Q\7DH%!#M?i
%MBetQ8t`[%IKX:m=<pc4koqV7WRQQb=s:eYfUC_;kGLWs^a6C[',huq6<-Gbo]5OKfnqcp/GAO9hAb\m`1,Gd@J/_*otY9CTu&1Y
%RWR+O8/A9$&:6hq%uGTqh@unLjED3PE1&U.*(b>f&U[Vb&31J+,*g,imN`@(8ro'c,pn01G&.oT+\K"@]#gEb:ekJ7W1i.t?k6!A
%Ta8lYKqlkH&pb0ZUJP,\,n^fgTk4G9FG)@4#o'T[*edFZP9/-[2N"f8kSCo=ej2]0'i\@eE!g!0W:\mJFf;n#3M9nj_(85Z4$c:K
%P2bmM<F?94%kg0_0#AXgh*nmnY`Bif`o,2d_D4Yao=J&DiR!^EPh`)UenbF&nrXBM%-#9i&Z(GW_p[A>j8b4<1.0,.)'!cXU^C%I
%:uRFGX*fIZRt[DF>IbL!L%(3L#_E:[3e2L)2]RY&::^L$n/HJ7dBdAN-10ti=/lZ/EK!_*D/[t@,I488=el34rGtga7;EfR_mmKU
%R;@QBE4gie<tV#UK?e*u`2:AX6JGnY.^"fc3>GV=;#r9i"q*E1Tt;MUa;hXDQY@>-ji/9/BJMObX^Dt`6Q:7keqV-QWl)X:'c>(i
%RsRJ9I4fE'i!W>s5;IX6a#cD.iO"4\S;!<LJJm0j"N_'N*=s?K9dqjIDHV>k!Q@_D6uXa@j,i>G3&;"u2o+/fFgJWUOubGilfuQ0
%HCX(O;!UEo(FYO('kS_OM+5N'O9;<S>3b@&*M0o*JO3Mo@LnPs48JNM"d)<_3BN#L)mi)'c)D3-;aTCJ(&^WGZ-1/o!5[XMfn]X^
%M@mt(;C9XcR<B2nW-oETa)NY94Z0&ckCg7k*Pb-81nP#"X,;#PZ"0-XE+BOC*K<Tq8`0RVeaelWe3l.C@Fdnu-Ccr&NnClC'`[kb
%&F:4)_hZ5P3)D;q/o']o0)8@UO`onU/)`V=+mdIYOW]3CVFO,^Z4_oZ&NM[ATb;bM8k:sl7!`1)2KKd$9[dr8CR?^C>bs@ggK'6N
%#IHT/%M#GM<V_,&$[bj,KF,qpFEJ>Ii)>"WiHA>b`?>lH'c^`lb99S[ipmb*"/\+`#URD$@T3tZ]dmf#g+e@Ch8W#0A;q##;Sml-
%)[p^TnABDhWCdI:Q&E[s+qN4^>[.8#6bN_s1dhI4k>ampfMnLJ4Fu"q5[4P:HJgl>A=W[[8rSn^jiU?$`'IP"*hM@(Laku=+on!b
%<tWPWJP_e(m*$&9JQ">$Y'a]K)hR0;."d.CfG-(_Njs2JE;U:+-VT7g$_&o0b:QQeJ--jq.\tu>3S-CXXt#Fl@U@,"Oo_Wc5H'g.
%8R<`A6F7;%<>4le>8jN,E3Oo:%W(X,_hWWL+=sT_i8]Aj.GHSo=p._7Wmo/lS1t#t/7`2]d#i^VbRsBJb;H&boXN#Y^M=&dRmMoh
%/ENk0>Sl"jnEJlXUZ#rbjIJWP&PJ(G*L$X]0F77`I',q"WcS^:Kj4p=39#m[<%!2L#;/]L:15o=Qs^%-i69SK!JcY,;*['S8!7JR
%S2k6BJ<ET)[6pgMCG'Vl$5%>`=F<@Ha[quO:W-UKC^Z@2EcX(CN)@![e5\W^jPtRQ7jI$\-kL)^kmDm^M.Qn,BUQ_RVN0XO*&HQ@
%,ib3sJ0G;.ZBL"OUPiq,@X4Yr77hslHhD6nDjHFAcp.Am0M!J'8<`"b0):#'6!WuI_qP:k_063]\/k_>Y%P>'fSYQ;ZGGij79Kbc
%FQ#^uJl/kOWYFrYe!,P?a(mK^7#[5@1K8jc?K;#]5[fF<TcFj-14&"rE^$$):$K6JaZU@bUM!+]+irm+:cj\'W-G2]o9#_*VI#&R
%f%I/Z_Q"ob-f@6PUDuHb#CW:\#X)Q<8USddj'72VOaYXYUltQ;P:E8(Y*m7[2+t1ogLgV6F1dH./Lo>m"<tNjn9JN/&>;T`(cb$]
%V9Ze"iBC#4'NDIZ#OL-c'^>so3j=?(,H"ZJQfYKilD]/7!SIIDMp%>$M]fFLYS!'e&jVV_j04Use.\Di]h!LkBe=dr&&%H5:,kW)
%?_@JJj0L*U'.#m%jUI@`M]0_=[8c*4X=m)dE.e?!8@cN)\&*)-A(lMaE)FRk/cZtp.GO@`6l;Uq$jHr1TTYK:BVaYrWqsYRH".H$
%jFA9nCXa)H,pKkU&c/"*pPAomF^D`mk&*l,)o.@ARW*D4bKcmgMH-"iJ>`l&[Xrr:\Oo>4!sA,Y+`9j](-%,r9Q=JH=#gT+]*>8l
%e^u;+AqJ*6;ADAJLIY)#A;4ach8hJ7A3ZI_]IXYI2T%U)pp<m*p^0iO]43g\5bZ@+nka7WA2iquOC<Ddq>MjG"7tM-D9*VtI/=J[
%#U8%TK/d:H!6W;i?)c0k"&"lgkj2j>7<"TM$?&E1OB4j@$HW!3CPVg0.Kj_&#Esgu+m<jo;4sGMStJ&B([=0qV"QL8[+0mUW64$?
%Gn@Ira@PkiJat,_!W68KJrG<_"O)-VQOa`P`9JLkK.1aBL'Uj\5Bmd3![7YalhEG$(mbmc#SN>@`lT"JAeF3rLM;P4EMn2[eKTP%
%Qth3)oAd&,]2-)W1;)]Kms41l$U81L64AnWYC&;FZ!]sI,gQe56pMFY,$CFT>$RqXAeo._"RY+sU!gmN_It&55e:[uq=Y#ZdrI8Q
%#Sg]t!.ct8,?Z8Eas#i7Ge@ZXMA?EO,^r!2dT4X9H^rk%7rk8eamb#5PTK](W&c+]QQ2JO4([c4^`s<3^mL$IhF??<g%mD&huT@b
%JT[4`E25a&Tlf3!8%HFg5i,!*Sd2?0TJk1p_[4b&2O@5J2'Kkqe.5''9kB$CC#MUX0]IiTVF=HUN&Q7aa,Ac`K;rV1'9[q)PPh-9
%KLJps9>dY]VP`>E4@-]@FVI&<#7+4n))=?.?<@Dkh6hJRD%V*4Jl<DCOQ[PeM:l_!Tm8O2ngT72Ba/XiLKKf%q\=(gbu#5:H?a]<
%X=<1-APMR=Pf#tk>S&`fC*92'/FHDTNObn6L8Kjii>fEH^<O[O$A1VsT7fLjKIm2R.i7Ji1Nf3-b*DX%+\Xr&43soN/4u5PBZtmJ
%V!rAi`A,6n"K,mtdWM;gJ^qT)aAaN:L]EuDQrnEPQl'I:&<H"FOK&^Y7Io@DEUgRJ,H?!'Z3EcB`o<PnUoL:bWNA$W0TT=lFg8O7
%+@Jg]5QU&n<."r,MMc;i^3C+O$0UJZCiO*F_]3Hm)@PV13?ZK'3E;o<G/B9L)@DAS%eE:0Nal%K)-.#Q<[\%XDrk@u0Z'$ViDD$>
%)@h<aDjf$SqAW$Ja#s/_2/5bB6UUXdZUDHSaO-]"/i?Or%%u\HlLkf#fBINp9t5(4fh[8;T`Rq:&+pir2PAW$//!7/+XXi<*ArVo
%_I3G;/JWIe6Pm^!<E>%\)=0R:/&O@Y(%<?<>=6qqZMt[qiE/[3.]DhO:d27N)&dlbjFaY!%t]INj@BuaTpjdF\HmN`,m>%$.PH+o
%@1+7.E-t&0"n.4o+AY_S7coJoQXek,T,2)q$lfH<WXO%57_]!CW2NBQZq*/;bjnrrLT2&uo+6Zp)+jB45*?<O,Wdpj#U<=&bgbp:
%43I7oFQIK*QqrF1!!5Rl>W@U.Bpa#DTb`Hj:c6amcSVEV@;#WWaUoKmk6l?-HUmKLO,/*#c@^(m*pRdVK[OkWU1,N)S.k%s-4nU;
%Kj*DT(9[(%#MN#4j@3@1k-Vh#a^bXqj]cSHT#bnsl<Y(<7i_7lA2mI/%Z4X.b!BRRG$*[AXcQB4I^8SuXu8W.#@EUEQn?V2'<a]O
%nrX*n$&?r/(_$d0q>eMLJhL.i=9F\ZnBN,1\d2$g24>BN!5'0l68486lTm%s%dfuS==Q73g6N#0!\51cX\kPf_k[We&Ha/0#["!(
%J7)o_ZRQ11A#5*ILCR)On?!\D][Oo1K/q=Z-[BB&\=h5LQ&t8R:%of_bT7"r;>c-8WaU[/#T&MGGbP=7'pQ45qMiB:7$S@90bq+W
%"m-dCf>uYQ;k&0W#cTNu/nJD*jh(uDk..";cWSE[N/Qd70ea-g"Ggu)&Qm4rQ'S8Le5@t<hOK+ON;>/ePk(m%:0:a75+p"P#m;V,
%^(/.[LK<>,Og`'!)4,HH:o!;\gCCt7@<WLf'iR'-V[23`n5KCZq*l^$8^`lE7QlgnM_toC_Z1(ei=MN/Alk>$.pmY?*j_]IRA#QI
%5NF=6&A;LcLbmIa?-HWci"mDVj&n[=SR`=u\<?oi'53"cf/QN@=PP?DX._-hiZg\S5DLC'>`E7YN1k5oR8=9g^p1dG:-u'6NcKkm
%$E<r?^:aZ,^uCRC;XKZg=Af(@pOZM_naNu4=1H23dq6Np*X[Up_C`_IVSfl]3+3Ft%uWg_LqF9%@.f3\+20st/#q8?k>ae;.'BVW
%PnV!*RZ`!G;\*^K9_b90FAiYk3-M,Zoh0]@S>g*$L+7c'6.:@J@5BlEf+'fs6dX?=:@]?a(3lA+6a!#5@^lDpPHRe9JlNX_Q-e<s
%QC=T/.8H.<M$n]hN&pCDQ[EdM&N#C4nl8F]HGJJZCZ?fJJo.%BicfC$Lr2V9[&/FN&99H2*CF9,]:95F4Tg(d&ID<CWNT5IT@?ha
%(Lf9N=AJC_&JCd<`%G0`Yt1Q>)CL(MD1!-;VMrWadB/0`7V:koW.STh*hQjc(3fOk%9&PjPE_1rYa+r9&:%)Rk$XGXW[UfB_.RO[
%0TCDi&2P]uE0PV"#g#@L3iF$-AA^'^>RY<b8cZEGQgZ$T;c5/_:db/`V_f/rIq(kE8Nn'8QNlH87bjD`<a=[SP)RCt-%dtca\H#J
%/X&SKM3"7LkV=_01j2a'RR3a!DZKmH3$a0pr[Cfn(s(Ik"H(@EU\'5c[L;el=fD-eT<crdk$pZ1b%9EH4Hf&Sn3m@+21te#r'"pL
%j!SZRP[VrY(r<Mq)i0$GfTB\*MR"6biij<lQ,TX@nLhF!*:431&K&Qqpnf[u:oX]*&R9fr7>EU;hF3-<CmlK5OPjCa/O8<HYJE"'
%qF#G2]?>=CI")FeZQrmMkW#TV)T!h$HA+c8;HHC5M'P'VLmUC6\o<jl.lbtsl\=2Rl[#SZN6cA#iZ"*[pPr+`@64^_=NO)%Sa^/-
%pKGC3\3M#lNLo-l<!T0<:Y"f)Ur?UC!Ps-*ipfa-*a^#)<=blIOe#<M@bE70JMss1:nc!"8d.)N3g:)FiW(->eM&9o'nALbDN?AL
%8=WI,8R!&p*#50MfXM8.hf(PNAI9<HOCmX-M,D6%GXP<(&fcQ=e`C1*SYVQH<)/0&(au*jl!?`n;)]+-geX]*,BhB,nmO4q],dRT
%3Cq="SN">)gJS&E4QX'qS0kaNP&S1iZIko/fU[T*aN4N:G!]"^X?SZ=MA3eG/p`CS-D-a$7jPsmC#BmD5),)D3^-ipestd=-rG0<
%V*mekBj>+Y_i3VZ!j5';%MtY,k?+Ar?13Vt#JJH_H'1C<'tHi;F2A"5\=nSZQXuE'.fu(D4G<&TT,?N;;`Lk<l?s[2&n_gPEetL5
%nR4]!.SNnoRmR+2MiXPO/P$an#Zk;$-MaHnJcfF]""S1ei:@\Q!7V!P\7WR#JR5jV%`(US[o:J,bUFX0A5MNi.cuthC6gur,=uk)
%4t]^k*&p^Qaj>2RiM@MfUbFg[`i@M=q'r5>1eCugK%bG(XNHeFHn6-?#4X;U\DUm9Rk6hf^fSG3p6ub_GeeT4/&HK4n.hdc@<U3/
%KgC)@WJ=<%K*u/aE`;0O<*17S,a=1n3HSC0%pSRp";X>5^^,>Gfi0mS]*`*,!'Y<=P'XcPbSNb$cGgGr`3f=]8]M0\-6MG,\4Dpn
%+jQ\fAJK4^MRms2<I5d7)'mH%UcWRpV=*H_q.q+3e>q1-)B^i9Nk[UrpdS=4%647C6tac+TB.O8<UOKKDp&9i3*a.QYc>f6R)gGV
%msqc/%`:lP506_\EeXo%TYSUu<BVO`kAd:%)$A!7VmmP_jmu+lLIrTBV\4je``-a:8_(sK`=YTjD#!Hq0ut?hJfuO_ekW_INX.Xs
%0>-9h99rO'1b$^jo,Xg?f#(po_DP<LXe>*pA.4Vf*P0Ggi0^OSS<sW'bAb-*dUG*^CLCDk0_TETf7'GFO)OXZ_TH#GOP:Oo>1ZbN
%2'nq04]RBZ#Nqno6P,"TN3L0(KX\We/ndL5&O7_hWA<>X+hoGli?K-9Lsr@d)2)g"1NZ@d\fdLkP$W5T+(&9KUINU/_f@)>9Be%2
%il)=3WU=@eIl_WNR*.d]eA.r$RL_>X\[]<YWf_9=UDV;dGugjWA[HnOmC_qa5N1XBneV[kA)cjPR]rD^L#Ps7X1Uct/Nt//ZSD`?
%2D'0g#hG`G6f<!EP`8^AnGqj\hu]cl?k/h?0H!K&;`<M^M[F4S$d)lf#7+-Ubg3bpWQJhe%160WnQ?te[78t4+!A@Ae=<0t<@o$B
%("C>Z'8P:>\5o/=F%#O,?V\WS`Ju3K2im96g%It%P/4\1_e)^J7L/oifBDF<CNe1@%5rheo&>QNYb$ll1-"[DaK4tE/B.pm;p_6O
%f393A4aW,bpbpoZ3piT@gK:sFMD(K.Kq;2/5iB4+gn;NnJ3'!r-n2)nU.WQJ6a7^c+L,00WSs\-I*"%:3iAITj?)Q;mGVRP5_1mc
%Ts-"R\&VG*hu^KuKo5@b6EL3Z\9D/b-/$l@Sj;a@2[3K2/EJ<)1@6SJ"iaA?QG(YZ&t=Hf\gU^;D8UgLkP+p,ZM-*:R)U8%fgr.n
%C1Qed,9nGeiBN:R<H&s30^<'i>BB$*(7n;NY(2".HDTWcACM!=>0je+\;hs<+Ph0WEu&OeVbid::'Q?[]=q&6cd1Z2O7%hn0GS8b
%LVL,2KLGBiJe&:6mjNE2';@+7jkPj$?qk0GM,K@c#GNV=59EiS.W=MbL/PE0*AS^C[iB)qX1P9H;hfCWj'f8>-l7rWN1.ur#dHY4
%7g*QEiQhiCYQta+V70k$M,r)o7o(CqS5W"W@\I,/Q%USL\eC4+ScuFG]sK\WCY1)&VM`q[.S9'Pnki/ie+OorIG+IZ>aJB`D0lG?
%S\Si==X(M:j_o_J\*u]O(]'R44(4'48Ieonog\6.>uGPfCq9"^jR[";QFAt6/N&'pA47N>q'41X+!;Y9Rl`"shEu]#peE/u9lO+%
%<E0UI3l5K"P7aTUX#:ReG6el!!Y0elQM[n%!ABP+%e#SgR.`Ca@8.H/;Kn[d_gX.nD&($u2l<!n1oGH#i#i`\6oh=+$&G['D:)D5
%k3#b,lq@kA2S\I5MQ(ZuZ'LLmpGD,i9ss@^Z;89'R27Z/e.sqE)K@:9Y)-i$Ag%Lj)#RYB(YrRr)Srg63''stUa[8r$EN&oQ\h'b
%%!sNTs*('!/s+,q=l=pr%"d($+Z<-WL*<#hhCIJ1[D^Xqjl6sR(#Ni`blZ0CBC;.O@=r1s>0rC:M<s8FL5b($Y82C"m7S[5^F'_-
%O%"`#;:Fk2%%?LrQ--)fX3$Z+,+::A7\0Kcri]^E>(VsaE/miu6!@M)d'4>`;s&uQ"s^q$r>tKo1T_U-^"(^OUnJ%cBZ-(pSe1^9
%TiKj-ls34N7@;4R)?1&W4f2>TIjaV^d%Xebni2cmT-75W@VH&+NjQ3>&G:emYFnV:#d]^[78^B!B8IO\Q.D39&(6(]].<@?Ss/6.
%^#U-J>YZ@T!U>CB!o`D7*Fj+o:2BVcE$2A;7gbfD-!TrV0mY6D7OOLSK(&*+n^Cl[d+S0YLpC1/:u&:U\5*lOH!8r[f5Mj/gGrC]
%1b;-hg4]/,=if;g8Aq9#LBge31NA4]C]SO`Wh:E)a4=`LSR/V+-8"GM+Xn8fn:'%dcCS]A29p=p\;gnQA4gJg9(O&#ot:5%=J`j?
%VhYO;Tno_lD!a?[6qN8eVQi*[5.sjG[/XfHeW"CSGsVU[O>:Jki7d/f2)O8om7ZsE,Kn/LQ/jQ%+C.dRU[,k]90u+smG_!(re;cj
%>FR0`#@2OiW*;=QqiUi/TtLWGe5I0eSbM!`$epfL$;bOW([7J(f-op5jB!auR)>XgY;72$i4$>p[k`5.]N-VC^8*kDQ/Bkb.B<rf
%n0RV=ZcdVW%2!Qsk9SLhLE[jI5f"U14aY,KWWQj2Yi'b@0;h.jW&ZuRJ$=S!05GJuNK-H//u&1QPSIKk"uDQPc]M9qJT"ohDLT_<
%IK@mih-;:nCdmLQYgm;DNbroq7&[;iK_\O]#(!an8Ss/T17Md_:4;7M6<s[Z@Im%GPW`HOH@>Dm)r/B6_/SePoSRj?Rm&'eOd#]B
%YZ86e,"XjA6L.HHhX/EaV_W1A?iK#8q$O\OBVA#HTr"h#$2*Yu(\OYdg;DIChc5jkfWeTiL7c9&N)2K/]#%0pGHKKr7(4VXDh*o,
%:D%><rkiC'4_36P_E]FhCWDXF'p\QCBs(0F&Oc[18dG^8Z^)I[$XIGdY)/4E@o4u9n9%%&#kgSH"cmWZnU#J'a<'OUPB'@3NfI%:
%?J73NUL!i]!))N;+_8_=GQpAg\!^UtUMon/(%&rIV)WE_iTIE.<[rpr)Z;J?$>N2G7S/VFTI0Js.si4eQW[/0\'YL,*Ga&E&P'GL
%_'SA'D@t4AO.U<qL?"[eNY9Zk)IAP?<c\-24^Z38GP#IVmet=!ekc3]MS>Y)8;[_VrAp;AlI^E2T1g(Am8EWER8%3;D/-^XkPNod
%I(g-;$%;ipB1CdmrACEYme&H6b!PH#:RgM\BJTg`p%kQ[Z+$3K+.i6,rfQerIPXp;R8O<q9i*OS)NlsQWTk5cI5q3:FG-jf2Z*SC
%/$SbJ/M'OTDdt#H#u9a>0W_od;4imheFEIXf=0)2+*Fb3#_b:/.CIe&5&;#[r8ZBf]oTk_eGJaJIm,XQMm)%6btS)uNJE@F?-1\I
%AW$k.r-_%KgBFYXI$$INl^.Ep)g]-f\'b!j?Q]#9`Tqm.k48Hthr\sU@3oIM27tEqW/Ta-4^Z38GP#IVmf!)/k>2"nMS<Gh$Ko$q
%0<.Enaj)3'I=')^n-;iS('kr?k]`s2\;W"TTjT"g#gO3^`B)HPi=r1\;00f[T[_bDH,.Kdn7nsK/]6]2ig@q4`raS7+$7p&rDAno
%fOFASElmdf7lp,TAm9b"_kO0PE90!j`q#=>+:2ES'N^Tm54WQl^>59)L+be'B9X):rX5YqP[`YS0=WT)/^QHS.]9h:IEoo?W#n!I
%LIGH2FDSkJ7h<raJu(muLh7maf'X?/hYiC^RA]f<q4jl<-cLH2pjJCZpXa]E#=ON-q3c_9Ft-i_nhp,!:Tra?RK!$*YR*V869Z^#
%KgXkP3`f(G*",4\I`+@J6Kmf,-M)Y:s7.diqpJkDUk")I-^O_7N!=V(N*^-iZS"UE,;3o;`50c=O4O=&2KI;tQs7hqj+U>:_M@$p
%HJVC,fCDjW4YS??m!@`;q'Z%?mm@)Oj*:/6jXD$*rqU]DfFQb)8Xuq<"2#s^mhtY>X9GVKrf!f?9'@uolYWT7PZrE&=eopMgr`!i
%\C<W&mYQ4_D;giT42tp)f7M$:LRE4G+'pg/2Rfgh<7ZGc&p5"5(a2S#XgJ@Njr++Q05mWW[ugEK!^An/c;r\Y'5M(Fd61g&msdkL
%oKLIe6a)o'NBWEkc`a)q73%)/(S/eqKT>2^W;G:CPNk2FUW2DllA8PI,.?B1n1RH5qf@EXWf'$oD<k!fkd53iTL/PDpi_WsMPod8
%m)VZfG"q?(62>R-H:JC:#T!LgI:.7skgiU[T#_ggCZ'8mmdg*Q"OW<_s-S>=&&"8QV6\FML[G?Mi2"XI^0P6C9j5^tnWOXAbE-lm
%IY01Nms->0lhs9K$I%orQ'*Gk!:>d<>CK]&;+=X1r*gG;8C;D9=hb7PZfN+PnlJ:-Q']S^FYp3L.cqp0an-l$_;K>!cuisMDEVSp
%ItKnHP2K@D6_IbS%IaP+=5C;BB9Upg'k%ANdkl6T1+%[,][#tOO$up3/Im/7MqOIpe9)M@L3HUWg.Df<^d'#r`)WYtoGRL=ZZX$S
%dtM[CO4]a2:eKZsrRUcA'S@(lXY$gXM!H!*SJJrB&=@%P:j[q#"XQs&5XfQ44ZGW,)24[Sri!]Fb!_QIE[8?.C`'lo9<CTgLj;G:
%anO.<Q(-6gQ1JsiYd'LqEu>;1"_.LoWlP.1:fWJS#M*=X&3lsAXI6e%QmJ(9FOO_J:_WF?e-JUZSBg'CdY.r#+hCMO9Xgmqa0dB'
%#CKD+afCl]KH^IF4m^9P\Fe#!/)LplD8hRi[%Cn'VKO%CdSr5J-i%&;4H75LEY])`&/pZaB0TmWEY%h(mAW(QZaLst1pq3Ga22Ml
%q6"PtCRb032uA'QUF<TS9`S$N&j!5>?K-*K<&f;>SEc$9W`[_Ec!.$?C#P$PZA&G*Mq[p+\E)c)K-4+lM+P<aVK@pG;7RHo0nG@+
%-AFWk;a?]j:56k)CsRpE6_7oXI]MIob2-(E&ok"5H6D>%blr:Q>q4?b+6qN,*Hh<bK\3-I9$8Dr^5SPjC*^q]YZ$iNYh"FVbd@]4
%0.lmCEo'gaqu?o4V#kt>C[$od,[M1rCUUW0%DXO@DUU]R?<R1mYG-0FRO"-I=d,tCALC7E6^QD%S"Sah7t=kD%(fK2Oe`>mLsOhP
%T`]`1(,2Uo.>M5HMc67^:5`WVeY.,dSe3+'1V`W5jW0FdSf;`*I>/!qU%;Gr:<L!E2"G3prh_f_l2Pc'RCpVSf'mjI*mc\oCG&dY
%]G/MAbMiopPsoN[m\?"5B>oV6NbooSOK2&,:s\qBPjsbJ!T7)pTDIb[O6TQ/@KUf&7mNq."9ZKqlU57'RuEqh3X&m=G!Qs4Z\@B@
%691%U"%X8E()4a.54?+Rg[><Y#!EV#HAeMe"E"SrSsD^<3HA90H270,aBaEI*=8G([=CWRb`q:$YHcFL,kgQU5BRG61q*@/q&6$4
%N#k_Sk\ei[>oCl-j!Bu03$'iZ@$']qMJn]\[J6,9f)2k:V*MueU_N0.WI8'LoKM_'G\HY2.aZ;/ogH:dRLWCOVKk"19GmdRPf3=,
%r'Z2/ZWD.4c]WZfD>h%@R@j);TeD?%2_P9[Noce9ke?4kT_FuDW^[*]=hR+?pnQFbD9j!YhYC<nZhQ+.%r8q?*9L[2E;#!kZ!%0!
%OceFAeE%a8]>I:4kDte!Icb(q[PNBb_PCgJ)2AHd*u'Bm.!G"8-`XY\<f,YMW*'WV7d+\Qf-OTN`^5Lr+#FjD:QH+;[(h,!Z1Om<
%=TCY"g]s@,92t@CCKATN#@Be4a*b4AP:E@;[e7_=ZQ6l](%FPL))!_XSoq(uP)JFu9=R8CHBUTQe36"ELnkL:e2tk#*X.8/<m`r$
%JM=M5J=]d//.>-D$Kg+N>c>#<dAR/p+e?@#UNc6&fZtXKaP[c$VQTX+V_SOK(n3kX'4`h]6S/iHg9%rgEp?h*iO#3SXI?8ZCsnM!
%rYk]#g)SSJRbO)Jpu5T(b6@4Q]e]BC]7\tqT&*lkr7hJErEr6t>VSE5[%[WTqSZa1?@[e+b/EHomZD&(j^?sARSSnih'u@\"okg9
%H'Ep(ggAcXe98NrOehKs$5?GLH(@jt6i#6@Iaj*t(5Z($qIQckk$YL>3<6Jj(\:Z,AP`*GhE_Zm9g6q`lfmOTocWRsL>=;1q:!Nb
%8HHVn_c!-[O#%^(r[14o3B<DG<JM9p?RZ9OCS;p8T=7S$06eoV4LXSN.Hq!Yb)ot8HCeGL7qR&X=t#`HaC-C!PPW5d\T.['a/!;[
%2Q8*M]"cQ[]g\7g[6]:#YSJC3i-s3.+:LE_%FO_-lGmt3SI%Js[eif,W/*>>?n!<'hOFkS/B(9^XDPVaE=L,F^72"-L9<[Sk3CCE
%EP<Il=jkoJ(3fOG^'J*AMEo%Gomc`@#2399BkR2alI;Z;GXV&h>Z$m:.,%u'`G8H]ZViN4LTpT!iFK>I-#DS9gO++UGQ"J\WVPM3
%]94)4O-H1NDG//**6$49FoF_DF1n/'WDkZI&k*mbV5molh^b4?UKA0k65S"S57`.+`7:a-d]+Xlk:_]!R2+N8Zh.[Lc@^jn<20C2
%IHa/gBrs.t0+->5FRXj`4nRa[<1_*TQBG9.J<Vps*A:fcpDash&P:=P'^k^?<pVi_</![g7kV//JPefc<TO`g3MA$SBRqbVF3/U$
%g-_*YWZ]7;A5`Mp>K6k=om**b[u;WD=/knomM>pa-eHsLUL#?kQB)Zd0O;G>JEDmY$-rs,&EO:+fN3`kVq=YC`E+Ua"*j7qX>!3b
%?(Z9^28Q>ITM\T0V&5,7H^<hnaNOJ?LT?&Pp1K_X[?NOsZo[P@oH?>SE@-T``ZXZJpFnWpP'V5Y=oEmV^$hr8Cqm`#EM'Z+YNc7o
%jhRPrme/jBTnDXE=3Os*lr^<)OZ9Zg/>r+X*Kl9$UVAbTLFpg<3Qr_q[8*-M)<;g+iT6Hl$&Z$u'`ce!c?ek*E[$CR1M_gk5U8MY
%&7#kT<$JImIdY#_ZY'(u2]Q"?.;;,^MTch-k;.C!$*;F[f6-P\,]nlL'>[k:9(7Qj#,Nqj$VBa]/WlYHo-V1Ar$D0G1-sQf6RKNQ
%C=]BY_\%CVXn!uYm!F1HA.l7R8p=[(2P(;_df2'\H.Lo>i^%ZG'HVF#ku4ffi,XPC\!5jiB)r>R#0;.UMBm#UkD1R807L=!1_70?
%k!m%_`CWC*7QF(ek\[I#\h&=IB3^Y8W9XC#)/S1?GM"nos1-Yp6r9tB(ff-E(!89IbWUta2D]qdKRc9-99,B'9c"mjXeER[eJjOc
%WO_1AlF#/D[Q:g"S:.f=CPd_*i)OCmHB-WMmrS#oH(uuGTkoUArp\dugXt\Z%h7EFqU<DWlcWCak[1J^ZZLZBDLn/3Y`@FCb"M7g
%_L$^hqJ%j?#3r/mH0dTW*A'jVj.'>^>"QF,m[/j7b%4n=E5'h.hW9mp!n:aW'7aIFa"^iKUiu0b[<"Op(t"aRZZ6I:.rpT)H^;Z&
%<ZkNh($?H`S"nRZqK9@I/pH/ELs\X\^@t]_,g5m>=94_ETqAjG\k+W@h]h4V#se+!2=)$C9!]0I[*l\^l>>%eiDGo!b?MbrgR_?<
%Hk,\gMEC#>DiJ:*1R_`JX]9L<!D\GSq'Y)VT%/cg@%B"[pt9T4ns_>.[-fs3.hXr0K\1Cs/!@/dT\5OP/B`Bu4SGO(l<5Z6b,hIQ
%Cd7c+\iu8n]BmfMog:ns2U89i,=pXXW3%^+END<-'(KsnIRnt/;%]QHT>1;c9X>(E*NuPZhgFm:XfUhA(CP\j!K=.taf&*,XE0]C
%7eBHGefj#Y7ET[`q;oB&53lgA0lX",IpTs>rj&NIlqLLsjpk%F4<%7fSj3Ch8%iL.E>QUjf9`7qD&Jht80n`6[H!d`<q?)>F9uWX
%SH1X^Xo2U5P2EoH=:6a$q:l%!ri:e&SU6)99,XTE`e7jQF.s_sQrqf"ZqnOE-nMQT@ZG6+i!MSdlBJQ\:6gUQO^lD27p0jM@>D2M
%*bkD_52AHPS2O#_E(Bc'!7#>0pNb#:`i]`4nTjsh;n(Rq.>h)B8^_Y(_NNEbA!VAg>?IMCg!u?,cf1lsq+8rk*+t1V%?9?kk2L%-
%Xt'G:oU=M,4QEb2$N\?1F6uc;\]]-`(0dRg^!1>"CRM7qjj<0f&s'<2oL5;CAY";hbrjG6q&8[tN_])IZ9m!T]kZ7(:$6SPko@WK
%/f%o5EUN(u*4+;Glq>rS[hum1)<8l1#%Crji%N:H2]]5I<lOK\-'3sprG^nj;2357$rX2&*RS`d!K?/Db)9=OKGgQ8m-b*[2Rtdk
%_fe6hIjZ"?B/OhJ6>$tk:q;fN7B<WBWeg-E\-"l>(c%biiUk<,=]kt^iTLp,"e/B8b7G(!0kYI[*`C$pRk.@l3lN@l/jW14%r"JQ
%E;<AqG#Z<.=)f7goHPo'qeaO9)%geG2b-k:qVOmkJ8dLa`Cd`adM<DYXeAk<!1m:%;CRj<g:"C%Rr@ghC8$"5\We"&Nu<sNjH%?r
%\iOc`$E"<C<H,^L]_j=7?e3H1CMSnY]B:>')O5ohigj"MK/osspGKQ&F0m/\4,sZ"%G]fq?<*Hgd?ZAUO%]A4V^*gWn(gn?QpX*P
%hW,Xl(.pp+VKB.?>c3<(]tJj?Qa,-_I2T27J,dUc'>L$2Ds%a^jgsVh]r"]1j)U-_;^k3tAXPOcCZ\1.H/?jDd-J^/8*_P:nZ1hH
%aLKp;bjLNFp\6Y182_mNs)pCOHWB(fQb3d@mcJr)DYrh]k)]CODSDZ/\fT&/I@\6973f3Cc_#:R5sIn^fJEATNp)9#:#4%jcs+oe
%D7"cKgW.Q1GlQd48UT@TgDh[KqIL"pZe?Pn)dWWM)gRFnrOtI.rhs2ejSNFrb_H(_\YB58pRc%m.a%<GC)_S*p\1)&)g\!a\'[3W
%YE+$BmePSGH$d0@[u$jqRF^`jlHs4?i;&DBTspM:)kD3OqRG^trAlaL.hf;Tb^Z%t^.G*sBb'UQW(<,U0Brn)?gfYcQa+"]Iik8s
%na.QnWH`jeqb4`[l2+F`28>G1CY7[M/akd\Qa&3/o[iTFrO7i8Ic`T\oXbFcj!ALcfD8AY$@+j=kT"b8-"<@jc=&#$.P=lIT&n/J
%8;NGGoP7PDh=H^%O&Wu<Z&SR,q],M'oj6hNT@I3Q#5.Wq#2Uf8cS'S`HFp#_d<Y>%TD/9)Dl2drq#m7[@-)etEOSnumE9=;bA?#t
%hh/\tIZ4$UGoM(An$g^?"(*/E9Z-1ChrjNPO71Ogh`2Fd\*%^[Zo*NGa7TkS5M4TOZNQk\H``N>k2tDYUg/(\ldmS]Mm35o*g+`?
%Rr&Y<;I/23inMQ?L>N4$LV5ldrqb5*^<I\rSj3\?VQR>ZS%f/)X?>L2;4mkHo"'gi_.d`8k]Lf^^Za;&pe>FC"h=,7efZh#rUFIQ
%<->acI#Cl2W?BGiGoq@go)!,!['u*c^]3\Jh^7gZ*oCRjn751Nr`kH`:2B=%n,(JtDVdnL[bj8drjZn/ju8tl*fB"Sl0U@,0'pPm
%&dao*Q8hC^6]KXWF#WPTYM4LJXl&mHEH;oP^@uIWhf&(&(0?D5g\W/t]Nj01Y@[\sp@^\_&'l'Tonh#Lp!!X<k#c=Rj\u$EhDj0m
%-Th5`MR0HPRO5EkPu-+u9!TqnIQTb_$e,qB%M99$^;0l?E],ab!\h!pg8gAIg@jf3Kb6C<9un[W-"'\dn7M&WMsUSkcoEg\6u##"
%)!Z&UA@AHJA#0Yu=K(1I3QIV*T\Tk$I/Dr_YQ4''+:OKTnE55Hho$&$j<0bf_Yj?#i30O5/bf;V%,"QA52:>3;*1&^[<@Cq1'%E%
%a@D*h')=9I3`<%_Z*RT,C\68UnAO`bnqTBV,rQuqmZ&-WS]Qm\(c(^W6=A!S%-RgXZQ]Oa7CJ7_9dJTo8P8kfEJAK6H7rA+)6s6D
%;f!9r^\pLFGMGYZWci1:A`n#NOY&mg1%ReN!oBR_NKg8=b[]8/=ZoBB0N^-,G<0cXgC^[>/q\hT@@=3.F/\4CWbs0cmA%Tg?tHU>
%1c=QlAakCi0mcOP1u@GWRq&].=p"g$^\92r#keG56\Znpi)?@BO@+g<SOfGNW1Z23[\DU2X%+R>S%9mTfa0Z/EIhRd"!rb2<GulD
%!<h"ECt%+GPSR=l``WRY/h)!`M_l!40UfG#STjJ/X1h[1X8UG\VEGf(1Je4@VBP[CWo_t[_u<$`L<*;0AHN1TW.Z\!l\P8UpF9&F
%%>WQ#I>6%Qg&dn<llrCZBZI(^I6Vd>1DRO2Efm(7TM5O'ZeP<f1BS\24(A2E/"3c3J[!P7]h3)L**?GbjAc?K0m\\L(.X9QgSaa8
%eDBG\;C/*;!+Z\T?Z_F3Sp"\HB-/)A24r)*#R68gb.PS8(;.fAJanX6Giu.86X9aX2YT(&\ua_3n`$!HNTe3_8(KjoKteE:4\Rg,
%WV.2C7V7u"q)+ZA<F^Y+f(Y#iY\T(K6`O\!U,M*Z8*)7:Fd.-#/+m1?U(83Iifre,2>lCB$S&*1RJMa[GhWV!+[k>h%HDB'fks(\
%@8Hs1D4/6/Z'HBZ_iTgL(ikZY*U%QXeTb'K$]JcBDJlpjNBZfUF.j$(\5?rWes<%390)nUI`V4@PnN:2n>`!:Ud@(?%k?s5YLr:d
%rm1N\9aQ>alRW3ZFIqDhALbfdK?1fBfs@IWRZgi1!)g&:R^f8J1*PYmb%l9g/$t4(nPqt>/KU8VR;f'Knt@nQL)suAJ"UV8^LWt\
%CTpn3Y%S]VH3K;G4*U,E/Po12R;4>'=7CI9PBH_\kVNBV&XT?[hOES=W'f,[=I"bM/-$A=5Mc!1Z!S`i51&[Ep#*!6J;#`,N>-;I
%(""Scj(o!#\,"n3MOS)OF[TgQ"W3t^*#8oP<_fjR@5X9Q.IF[EVqO>tgpQE>61[3\rY`<F)WQ2e<MD'<2]\aI]egT118/7Y%#Tr%
%l0s.r<it'/^$VThg^@g"ilnR.3fNR%Y;Z(#me&p-UU^fQR5C=)'m%glGAKTSEBKt8ZbI#N#k[Z41rOqQfd>eRVT(IrC.d->L>H'H
%GHR@8]i@e;6f#HW^fbktl9>QnWUj]Y'ET>=e[%hTa)g@oUI<<U7sbn<2C8_0]Kb0bE9Uuq-ta(&Vo[(uY@TYeC]$)s5<j\U'fIpu
%6Bc)ZU%FZe/8in^(juiU'H#K5pETR?QEs47<QP&;ggc)<Pn4CAPb#%[f_?ms3<J&A;dP)Plik_#]a)q^UHTOb#VI8\._CI8LI[=>
%Nf$#TW+ru?R=f[+h>qc(N^jQ98/V:cKX-os]fW"\E<*W$GlutK"NA9L-_Q/mKFbBF[S7f9A<E!VY--\tFMpFQEL3Y`[RJR!,=\f6
%?)=ChdXZDRPbg\I874@8DYT!3ldHP]M/Y>@9fDamZps*_Oe?=9HMO11""PhmZ=HsgR.HD7k114r6c,cL1/dsVc.RV5B64,X%'ap.
%dEltcE@KhbaAX[a1ONA%2V6m?&"6A43`$lG<m/f^lJ%#j3r4RMLA!I+7tA;YT^iL8Ks$bnrTY-P%DX%Kl>sD8_1WDXg"m?q!__Ze
%L9UA:^*O"i9"!:.0[Y)L,XHO)r&F7KpS[C.^Ip\DQ_@@ilK+4G$U"I#33br'+S)2Z]b:,kR:<Cf"Y"9$ZpThdeo]7s"jk?pGh\[r
%5%:A+DU>h#/rCKV.G\q,CR^7qb4B8!:_F@8Vs4\t;hj:<`\&NVGRCTgTHfO/[UiaJpGr6K;1/D^S>,m+)23k)Jb>=jAWF%/a[^m4
%5iBJ/XJ\qjrZ>BF;X$sDU&[%)Pg3:J&'g#ND^\eT.)iq)%n*2%2VtPdj[ZO*(2X_RGYa@$1t6\7kO&(E[D_n7;4&9O2=@s(Dl8&9
%SJ-4h$d0V0KF[0cp_6.[EbJ-TFN#6.b?o2c!qm*phJ50$R^;Gn9*dNr%_ai0:]U`kY!LRn2e<)6Oh-0$!!qLL`t9hj:L12Fg*:nE
%"^8U2W*:/+[^BKb?kgqk<Zn/R;(%5P!$SFd<`?h]XT7@gO"=ruH#aj4pfhDS+<beJoeG2]*!c_LT*^39Fesu5*/`dH-#MY0d20DB
%)K;(B7`7gBQqMs`fqP1+G>\6E_97K57,.5'bF14<hp5CeN4<#bl%lSE+p*UV95kLq6<u'?h?_CnI6qCbODIVAp,M8Dh#lkNUVh_N
%dB<Cm?>c>:5-t+u7/7%d><U`HZ.WTm8LlQX!#*m/<lb).(;!;]]:#`Vi:>UrCc\39@oPbSK.LIj3',55pX&!!7EL\@<RQ$sc0UK:
%N@*sBFg*.]I\c2]2'%a<+/ng7><kk*._#Kq;#CS.BJ.Y=QLX^-*B*8a\PS4@1Kp`eR+7#\_hb1[i>b1]#E!<iTMGr`i.9Q*(X=n3
%n0B"3m@Zk1k'<oIq:s,.Z<&c<F7i3s-[88J(hXbMH02/f*YUkBEe;a3o4K;eTa`&RgCd*a<egF[oVDVE??2I)`g*Co*c;CGn:JVc
%M5K24N+*]O:97N=T1)M2H6t,:4t+WT$Sk-/I9l/6N>T+Q1.PYR<JDI$!#*$ojoJUK[*U.GFt^1JMFX.<@?qjH,U7"C8CI4LY@&76
%<o#OEN=g+<_!E;.\&t52A-?69<lVjsEsUcf]1+]dX2-3;B8c/7E[]l2g1@BT=TLUt@$qm;H6`oU]jtI>GbP^?"q7e5aBU0E;)_`c
%Vb9?U*jA\9X+%;IU'."jWDAc&;H`B&:mSUaWbIUtg(Br,[N)6_<$#,KQ6TM<Q2EVBG47976`$NqZ3E:ar!$qC)fr04/p%=tf*M1i
%PPhpRYJo,fk5,KBZ"FaHeFUc\b$\G?rADZP;=h[dOk6U*D3"fe'q_\1`**pV1n\7bhgu#]Y!MjD$)7Q-9$[E!W(F\iUZm)CQ54MF
%=DrbD"i*C*k*djt.p3j;E/=@m4GAS?KghO*gfVH4<M\<^"sK?&?K\aiGS6F1/^:%)1A2>*EkSZ-El%)Bj<XqPj^7I6\4-db&*#UX
%,2^0f7'KBuVS!E`Ks!=f;6E1(,hn?RhT=b==:44jae20peH'WY/E7N?+R08C.KdKNB"8KfbJo4h`mM6Zq\3Us&kod?4b8&pb!.k0
%KI;JM+<5mLd::WMEK6BO[s(t%ZQb"%$m%]K/^`2&f.3/dN*P^r3sjJK2UX=i&gNsZNJL4o7L5tOQ1%^gAV^b=RhYgmS2_?nlY]et
%C>%]#K_%aLU0_0m.BD1DDs_,b!C.T3,7Nk2MHL=)R:Ej*gsf)uhU4TMqM'S*#-i]1(:I0/U6nSp[-SW6,+:s7XF;'@#nsD'>/Ct#
%#'fl!,p%SHq()2SPpDH_3$j`Q^G\Z>BCh9)Q7p$Yn*6WgQ6UEXfnV4eA+<jSaZ`U+p^Dac'r&bE"KB2rVGMat*'%r>.M07)90#1a
%*8lh&@`1^Vn#T76dc!`4lA1S)DP[M93g2?2J/qf)[&$a8hm]#W]@$AB(*m=Fd^k8Kci97l>G<<'8,:,$UJ\\ThBo7JCGqn=O;mAf
%-RH>of5cj;qaqN#lkmSq4Wg!o7&:tBj,mfk4k^7BL..D-pN-0YYRdQD`a;mDE4tUp7^Nk+YFKa5`:=)+S\uTs+hDRJnKc4\h$c%.
%/;L's#b6_K.[tp+52hDC3NeuWV;pNYOj/u2[k$S0e+i`Z7m!!sB:g`i0%,kLD!+p<aWG$Dr.r5s",U%4+"sf$/t:"t-NuGT\Pu(q
%2ddDo8(2,tQZ6L/?H%>u=)h;f>VpdeE@p1j=G"Jb-s$*/VWHi+odbpUKWPA=)K@2!]gVn\eFM''E2>DYo$m<R-ZMg&r3T4I/Z<#X
%hR>#"NASLQV[2BIEpBu_rYeeA4gTX'qM[dWL=WTL59hm(6I9EVN'@F!p2H;M_5*^BpH#jD/CQ$2LlA^,(S.9<P)_8g3jj4[m@b=N
%k>\!0SN[*,q/k7:kg6r3P7bDSpA"f-c!"an>`>"X6.a3C:<qi/M?SYYgA>Fu&JWT%5kUU4R+$+?+ND1=3#V<VUY'-@aruI@%KK&"
%N0uk7jXE=>j<np]5Tb^rX6&!8)ImcdSCnRHP&a[#U_np<8I+s`3lj$+1)t'7$O')u:Yt)(G96;@Z+2_3CN^WW72J/tf%5bu34_Wf
%>@>RYQ1)_!UmQ5G$1/Damd?dk%F;Fe)X#9=bUPDVIk<$;"FP\:qIqC-^T#ZUT\kcBb$'`;9!W2acTt$BQ!mRc+:,iXeVLX"3]n,]
%5GWIJHL@cB*"%lYSW#XW$(e=28YsXZ.?iVHgKn+<j-i5d8:O+S*0p22XN>=L(/E6ZMEjoED?%DZ9m.#(&U:iIE`Ks[>tAgZ#1[ug
%4<@8;Tl^sW$=ebm48rIWNF31F@7MEio0G<Dm^1ag5@j[6rWO))\ZF"90]t:rKGR@1O,SJC;u@6cGOSfX9gmg*pc:D$7Kf_'h\#Ls
%+eq+PD+9+f7sZnC<HHkP#>59b$tJe2-;`7^j3YpGLu)!dk,Y6E#J=W]dAW<DeD^7$MAm7&WH0-rYud<9i\m]JrRMX*]#VQ$da-,(
%2^eQm(*if0)^5_;ot4G$Xt_9_^9)aRHYVmWd+)'$s2YN/i1\XbP%Ld,BFG.UZ*`NJ[4cOa44k=0,4Vt>O]q?]j6=";5:IgOUN[Ek
%%\>NK;$9@SHuo:I3_7?hr4_`Yq+t8ZjLQYSit]QY5+iLF1,TJ*j6"X^FS]QZ/I%&aF:+Ci-q0HbMGk8_lS[GlS@_C0j<_K6kScD+
%Y9RBq`37L&q.'A5q.%&:hnT-Q4$`W%hu9hZU?$/flTDT_Ni'\G7XR^AB0ndln4JUJ=TkX?On5E'0r_)1Y%0B:kqI[F>SM^JA*3]0
%__dds9Lt;N+%8K%(!3rA#HGnf)<:+S9r#WEN6>pokfWgu-tMn01"hsEH=@4^bnSl"%t=J^RAKrGhu0VUks,3s^]"b9s7@E4ci<d$
%s7r;ep`C=lJ,HAIjZian+91`Cq>:3in,CT3nW3_7hu@Wpr1EueJ+q!5c[Yg6q>YgG194'ml;FsG+*Ou5_EkW50=J!\l5Xrff^*k1
%O,09G/hS:[I29V";__Y#7ps>]OA5XJ@1#sl&>j"T?a&u4o$NiQB%Ja@,"V3FrR#M@Vpq@bj.33g[[0V,j<:S2&L!2]\n7<8(%H2<
%D:'h3EAH.KdBYbN\aoss=js3SG:;Q?W[KToTeT=\m%:PIjO0`HZuSK,b*XGG#er:=NpX4^gEe63A"I/)nn>_L:]&JakPsT.!mf/(
%)2AUgnk<k-qViq;[O()KFc,"^n,E*s-S*W"#W%KH&TGZ^]-`V4R>MV4>(e6#\MNdhrX\3%RI]\`6o3=pn7%p3lpPB3pjn+[O#jAA
%hf9YjrRHMSJp*h3rZV/sGWPsGCH-fmpIkPaYOebBDI=cgG\R<)CM/)#+(=#sEi<7-R1eMnBuf\Kpa2ZIF;IkRU?=rma=_V,"`QrG
%XEe"+FPTV><H)[RfWb+;IXl[$5_E'4Tl^DB-.=@kai?q$6MiY1.$Sn_e[Z$7WqLV-r\iARO5:u2]L:f0;u">D$/*fXnh<?mIdHGJ
%^#DMB1YedZpO#3k.<6g"5(Z3KHan"QN<P?G&-6]K/g#L#nqX$k%uCkPU2`rQ3fTf8R$j4@#Q#(,4W&$);-IMQrU1sbQo*T\kbhDk
%KlIKKGtF-NI,^+U'"L_Cl93rlYAH,PLojdfd<q'Nm0Pkb_lR2%C#hRH.Gb+?IAc1T51FlY8(:\%o6TGSR<W/DCi)>EHr]CSCSp?o
%eEX*K,dO*//=[93hD'EV>eYk4#SB<OB],.@ij24Bf$i#VrkYbgg6?lR%:isnCCP$8;0G!:721[4glpu-?Si=GjXX)>p\)2\akhqg
%G_26j.!Ru>A6[pcX`PuLL>Z?[71k(>k7D1>hA*TT&Y!*cC[FLP>&.]<UU<7h]W9Il29L8co3J<,<O(]j\0D&U0q;sGq<Ura?L2mK
%>rlKff!TmsqQ5&38po%\@L5`CC]\gK=G!T"H$*".H+<9H6t6;2?a^S1@lL*>HCYY&EYa2653JWE4U"hr"65]'F;l#?7q+6*58VRK
%4YQ\W9%n"HBNTb[Vn*.Z6B4Xs<BJ[O"nU5UqklG-@%>LTW8V6?k&NBJB8Vl'V>rX4^G4WeW@2*)C,=T\Li\T2fU9'1:_K[^CI>&8
%_TbF6Y,/)^d<ie41t'..mC'&6:A(arVAo?NBF#d[Gj%Lu*h=@(ku870=+sC$$85XWUPR03BWZZI-'oN'G0:FNXKjB@c%$*\"/=U"
%-u`]tFgkHLMu8g'_`-"H]qTh*8RJFdaEAaWrAntJ3LRVMIfAl@3QpuCX8hp4s7(p^.,#g!b'FctqH%FD%Jr1*F52m=Rj4&HV,tM;
%0H:4<^+CQ]G>nR!!e_#%F:U34O&Un)0H)r0R<TG_n5b$7+%En-DqVCm/+iMKro(WYFT7[Kn&tq'LTm^@$nV40L#!Nr3m)%L!W:sk
%!Pn+i$=!/sfI!$9'5EQtIL<r^YR:Z"r7H_(:*h?^P`&t3W1Pld]f/8P/_Qg<4F/d\qHgt2[qd'q"OM,_40n0#6*7p]MhG9\3?E(P
%&dSp&&'31<"PVQ+b1dPI!$aW-Jko=]l8qJ<EWP0%VL9RjU]G`HK484Hr9;F>.Df4.k(pHX*%f?:V%dt!Sj2Hm2>G\U8@*WRH#]Zb
%`k8<?K`Fr;L`3HY;Ip&4FrCV%EP_3rV.ge-hpAK\5]BFdIh]ihF27QBFKUE2H9]"M!)3bhjs(DJ5GE]1+8-"1qNr$Wc[,A3dH'-U
%AQ8@6gJX[=?DTD^)bID=5nSD4ER>-R&5\7Mmqo554ef0Qs.Y`uH$?JX;/2>&+b/L-%`l[iU,-Dn?4-POqfn(QhWHHqJ&igi$6^5f
%P.plEbqYsdYt_aa;/O\-jZ&_V>a@9.e$&0@gLddQ',284h-R63d0LA?'tk^Cs8>&;RC@\A^]1UC/X]5b1<(k.?&ZNJa1i:U[o&!n
%>'M$eoh1P33,;Rd`d<J;8abE%.VeWk!Y]*@:63@R#8B>7it<P:.56T-CPtO4&TJZGrR[/ERpLdQ?FGD6Suo?0V4\ec.@qE-.,N@8
%gQ7_[JqlOEAE'c+WfsGs6)6?tM+6BK:SlHmf]:\\e>0m?Qgl-oFhOSB7;;:p`OfgV,uU1l@aeNSheMbbj`att#?T8&YIXYoRJ`pg
%Hn=5tma*W.-)5^s7ZQsUNV!YL-::9P`U1*-G6OSmN(Y[>PtTTOde:7rpTAB-=PK);&e78^^!3oMo61)GWE&Xi)D`\m<F(MtCCel\
%8)4F13u*h8,*d0_Ka`:)]TctGEi&fA>6I&pdZ'QifYXBr^'a&qbpgID/167%LhPUG]i+2r%%p7c%4_XeNBCo*]aeal5ll6\$BC^*
%\RG5R=@sTLjDWd6nImCsEL2YWgH!g*JMhtEBTt%-<H>JAF8LaY??0kVn/<&<IF`Khn=G4;QUerh3b<.KV<C>/ROd@V]`\CtW9H7K
%WhN-dIK-bBPIsI+&4?h?g3-&:D2Vf/.m:2QB=3]^fBB^h&/L!+gRMioq6g1jpfm%u;;?tf%3E,Y#PS\r4tuU!o2u\fqh"@]GU,%V
%JmFYYB8('04UXYJ(ATT<nZ".nVBe^6W+MLr*l>=N1rk'p/tuu)+KeQucD?m9Pcq6SV>>jENJYR*jah6feE9$\_B&A5M/feCgn$lM
%J,'jK*-t='ZA%?MaT@(thil-k6*gQP:/KUj(dPJhd_OZiEN9`2$)W<`IG_5s-R%.OXiF,[CoS%NDC&uaQD3lbqr[G?0(\IJUq.m5
%1**DOlJ"4Gp\#NSdZ];k9DO/t`F>ftAoeQ;!go*E^orF\$\m;=)*"_:Ag/SIJVh*Z=_W2AdmjD9@X6B#_j(6p@!E$j^OLuR3iiXp
%^f&`H(;In4V5W:0kg_(s[Z^=7)[D$J,)*9ifHX\LN;"W]N>tZP2YqN@\7A(b0;gsc]l_(B+1A/t8:UN.WAYbAT!OF4\l#PiE7OmS
%7Y`-BQ">@!>^)7*"u=L,I./'0;+/nFVrdnh"+'@m88YXgcLY2fc;-O!(@F&3V/.8G3UJdj2<\p;@uf5d)'PQX?8tfL8tO_\<\.AM
%4gB;8M:@^9;S:%QXt=GJn>fhhB2JDR[Rf=*a4(:h'XkIp4E+u:#X3Koau:(&+N(\HC#jPEJN(AMVVPaiSN8VOcXF.i9AKp:[))@2
%38%0d,o)t;Qj,YMDi:*k4"O*@\ui('=W*tg#d`rdDBc1]e8X]dpuUW5c%1?d37iRS,.TT=9G&T;l.8%m)7!ZKFbjdXLA!'6f>C/&
%kU=^G&<>_27tm%Y^kR`b:cmQX4LnTo.>kpLK_nN4U@d<NC<\LjYs+8l/9Zk7h=bSI=`pN,E(&WU%I^Ar[OrK)EM..fg&;blm1ikg
%-cff3D<6STQh]\ENKk:-):bu4hWr^iM!%B1(uSMcg>LqJNV1Pp!J@N!/9@FmSBIil%0t<fdeJ]Vn41V]kL.&X(:!DNZp<6:`^-.U
%%Q"$JKi&1V'?HUXf=L,-#.ia5;'Ob_1JskT"dc90f04>tJQu,ahl'&:,uQ^!8_kKcnOMG>^u-L3JomkqllsdcT)(I4L%cndo5acC
%IKF7)!q3#,_RAT?TKi$+[a%Rq&Z-WTTe!XQ32s/mT>3b/E)Tm#TYb'f9&Bg[NkC#WX2"-o7k'*IBO\Peh]PF2>QXo*UqKM6:`0+V
%KlS&S$hS@]6fV%Z8)=`5DY1rQ-R@O$Fd.+M)dmd>nF)>]M8/Q(,(2<6VD\WuL`lAH)ZF&lHBdb4BsXYF8sFJ&f7:5E4`0qgge632
%+nhGDCOF'.oq'"L_Ur0t2?@`TH1((*OnUhhd*"];St8$p:B9sJQ6>8#\(dZ9Z#TfUA+$=CcrXO@&!4JnIG@W#a:j:I#Xu2fPO\mt
%?#'4!Ss^oNK\Z4Ip-MF6XeKkf=A/)rH36g$;;7?8`KtdaTblK;N?S9=kg[/]kC>BkV@++;1PpT'XXMCpJ0tJ&+]rOWZ>T)E-N%n@
%H-G#"hPnJiW8:*N/MW`Z#aXg:!k3r]G4.Spe?tG0"gg+p;(e'N$?L&\eFY?Q:h7*Sim&"_2+V=`\e,=c*E#"BEH`'a%PQ6j3ouTA
%f6sb/O2qLkPG"[("eBdFa;&M*]o@-Qg)88Lc[%uZH)Da@=9uAW<<#fB,3u<oo%qX<BLQk@Ae.:RS:$_/D=YERk?iFcn&*8!?sri*
%^D"gKQ5D^%*7MS-3%.*597n\67,Fh&j9(B#q))"0S9GE4G'JI![gAjmp(-o25]MDR27=,c^eaUTKLfk]aM8+V)5`fq,cs^"2)bj?
%`TMu!"$U/2P^kHB<7>-+&_4EmbuC#`'^seU)eD%IM*nZR%iXeeguXp)U;&A/<J,ra/Vk9tHbgQ2$1jmW1'8[<DJOPYN+dh9K?)bF
%($#r6W5_9s_W(oNi>mcW&iQ!0fJH&M!=Nk:\>O0:AM+iX1'\t=6IK:MV&?lgkZSj?bUf_udt55F@EXe]4J5)k6.4QD3b_3YrH[40
%)MbI^:7suFRXR\0<L0=J9>na4=bU'/f"Bm-Yb.G(?oBpJ^cn;8kDU(clMk\W7obmlS_Uh#8K$"cOZrNbhcdkHBLTD[!pT-85`u)9
%UQ\3!_JaP&iT1t0*Q6CU9M9hUO)nj,1.=lh4u@7V,@^jC[g4(cB=be.9/o>l//u-3jR`,AAq&/GCEr*lpV<BE4:+#6l?uUPqo:r5
%"RsD:g,DO[L#_`*DD,:iD9Jg0>!__uk4;qaHUIc##ir?N_F=2<b8%C0!fC]3j"Xi$a7DTPf^;joXBTLdW.N*UN6/aR!Jr]Ur,)rD
%l?;SdJ9`2f/Z:"jNG?ZLE^A_N"(KS?Dk,&[)%[qsCMrL#LO/E.kF.EVGhZ<Kad3M5UJO>j"^f_!*4`XN]9Kbr4c*pHe[`B]EXkH2
%d,K_R6j6M4HPBf?)OuD)M&Xo7$d>)[1Th-!ZC(\tjb[$qUWX#1-7+[cl;@m:3,I.Kq_BW\/jVr`K=oMVllJO)DFj27DN.6qfM1dA
%L2Gn*N]=YMUbbK/`2Jg</-Ah(8Zu1)PR\<LA+sWbgWbUpHoo2qk'onI]>HkV>2[^QhPnN0Z-cXMb0I-9N#%+?"W)P.D--uWk2B]=
%K(V/JIQBrIP?;ZVEFP.'irbE:?18`m/JC;-8BdIp7$rp(&P*d$Vn0]pTWNg5DrZuXmpW23[]F'm1Q@F^S>Ml-K,A7f'@di+cUMdC
%RK/.9=*W!oDC-'\3kL^#3IP*i3oi7iq;.7DULLGnB[cU2`IPA]Af#8Xg9)h#-A/[ol\%`:P.4C8nT&9b(Ng?SIocc$;(OhLdk#"E
%!G[a.MYebY2JbN7rFY8S),,)7U)UY&.EQOCg:JNq+j6._TqAd@?.u,6i2,Qre`,q,_+!t$/FW.7>_4q[H`0.nqeqflf,;ft-]ABh
%=]F0<B.c/6].Q#,+;u]dZbt.hXY#fOM_IB*[SPg#2/K9RIqD[?GjG-F_@Y[1;eFmPR(RSrE4ZZU8gRL(@5N,SX%YlA\A25$P+c`Z
%pEEkp#&t_2o67&W+R975(4L-`>DpG=5W+.T$/<pOl,\gRkEH!9Bq`u\f](#Yc3*^+b,MtH(^r4Q@j5ngMK$m+CGb>*Ue9M6+_Lbs
%*$5<Igl/6LYA+$\,<Dlg4Wal(mBkjEAa&H4r;M7cH^WY"&.g.CdtrGtWB?pb@<L+P$-sb-1mP]JBnL8?cQotu%n:l\HhAp.`_5D[
%f%h,]r<A]-K:U]=BL@WRmplgEA8N;dk30b:S:ZD@qVsElXe;.%>^f9M*uq`'N"%tU`og(]([VOZ:knA;=tEp*PUP5j9b(`Lg<@&k
%.$o6p1m]ojAnA(UA2Gkj3.)epCe.HD:9BG)q($(\C#j1#J7QR(dM':TQ-g)j7`mG!YRaJhaj#"k(4E>el\]!eQBH=qJiWhug`o@k
%jec<9&R5B*q#V_IgbJI0>?8*>0&mVqgY'5*A(V0-XDC0nLK(4R3p+b'b_MfR"/'em1O#R^RVG.:AC8?KK)G/<8HEA5AK!MG-X75m
%&Oj.'2N%k8Ze\MmF#C(6a51U)#=-P>]/Iq-6mZr2AP7"Z#6jH=Y_716g<Q][U/'Vob7Yj]BpEd.]heqfhY].cCCjTK*pq=[P)sE1
%'qp!QYDElR"__,EUQmeOY@j%V_50R"pRcT)T3;,s'O\4hHi4YY`\.;CDs^.?Z6p-UPGnBQai,7*7.5urFIV(=``g!;f?W5GkME0q
%G"N3]MHtW0rFl#-(!2Pu:68K6,HoX/V1la2miGT\C(j(mh$NI#YO9H)Z!2/sSZl)EiF-Ngh?4GYCb"H7&lKY1m6)8G=n(6>CqG\7
%1.*;g<HY8_HhdXD\0NoHh-a&upji*L`pm3W#jTjc?5p8h]4E9pT:I_=L'ShjZ"W7([j7SOZQ_o=>p<LlOE9rc&mIFQ'EB[]i_mE@
%8#(;orJCNFNXT1o;IUZ=pT_^fH7a@3caZ>E\9s:U\3[:;QQ`1m^0\F<(Ali.[d5<N&TH;2KpncDe(Nn07m"kcG'\+-+4^a[.HP8S
%[Y(V+.r]s>BAPh'qHeIPe^e6rf'.8NP+h"`:s!:R#"A,L;aHXp(D"\FK6MluBICVq=&qXh:VZ`9_lB7Z0oH=X`Mdemjg7MMga0!I
%mr?&]FBI^3Z^aKSbg#lZam2H<gD[$!/kH7q$$r&M$qd7+).RC?KptH6R:sT^n1=.=`k&jDA#^V7*aV\mKRN29#383bYNcdWiu:4b
%Dn.bm\ANrTQ\F7,<HMiYo@R^@)qt+X+WWt'B0N)ZalN24leAE;c11dM(]Z.d>QY-5m"-c2#).C%N:I5]I=*,Rp9>-F[+dtk&7F>O
%EQgaR,!<<I5;TlVPOu+YIQg`t)!*Ct[K9c4@[@rpEq2BJe-e%eg[pKe*?GiMH6IrX#,ABCbm[?s8&7_n3VYD*A\g;ti.S+JaVo4C
%K=dqR*((*a0kL@-HmKnZAn3rRB%t'oiA\+>rTjWsQ(.#0ElKXEjS/p>i\c%\eT^+o&X,M90'p<'*b\@2lEE$%4MZuuDqgP`JjHbe
%-ahcJ?C`^UaQr>*oK&!nS5Npr*uPV#)=]0G89MF>IoT"+c0NP/(I/FP1a^mNpH;K=Vr4Kf^:g]Ro9aiV3%C[:!lp%c%S'6Xrs(ho
%[q35g_do]aP`@6_.Ph82b)?,rEO?ZEaJ9DPeI)W;WdsE3]f`Hr4^"K;d]GUL,EOsD:5Au%c&V'Q^NEUlTIj^m`9l5jb;"is0E3/]
%nUormd"h9C1<S$KMr"HGYBKD5U]FjE80#5qp'FFbHd>*/++$kE)F.+)V]Q7/'&q8C<jD86[TIYE)GM#5*Zt9dRKXNA_EEl5i=X>C
%.U`rW]"*.SoUKRdfP'^bn7jG]:WZCeb]5mj3J`5qF02O1%rf[G076@CKo[R6W.me#e2J@$,XU(mFt$cj:cI)No70g2G4IV7R4._i
%5Nop3@osE+_;`oto&8&`Of5[chnVoSTcV/"&S)C#P*p'T:6[-9]f't@L5&)0N1j?;ZD-crZd3Chj(I]O.J'sP(*GqDcJWrI&&VfN
%H>Y`l?uKra3j3!]iMQ?42;+?)nkq&^'U]6j2DlbHZ+0oY0ZnY-+hqnQheu*u&`k)E,Yr`.&1JbQ2=qf@Ag&_r*]d2N@n;s/HYABg
%$hjn)2[Jp@Q7Br4e#BC/%4kp2@So0-a2W^c*87hCcLZkbW$"$i7iUPK,$q"[BH4O6.r*g58<l<B]/,%Lop#IfmBn%PeQk4-*+gHf
%>sqM1,(0a&BYq.;>^aEGdArP4qgQ]1T$1oO'N<1X9]R*MKJA5)>8LgESm!#!;9tZ!.D4u_nSZg<_UkCp[E3h.0niMdJZQ<C`U`ID
%C2^=)pO\.%iUmFe:lj[C5dU(fL3g-&62s96bU@"Rh+#[n&a=kb[R49"Y?eJL)&,K]mD8C++Lj12/8L=KLSdpIMpCX%89LcE=A@:u
%cRgh^,>*)fKfBPt-s2MC=O0*H_(m,%qW1bn,0ZC8Hjh-0oK_3*'"Fa5$NA[1_[!)<J9p8^,.-$k'ee@mo&VeeR0rV=0'1<(kI?jY
%C_hB9^tW!8gL3sJ#c>YQ2=$l(PiCILGGR/F\-GIW+a]nnMCNIP(#BsVZ!KML\M`$DfkL5kG`DPL!`2+YPfrC[r61XH62^,@jlKMp
%md&6Op\iip@A!IW"@R$W'h:3`\T?8o781\t:eDJKOGgP;NlBBmN+O,TL1]Xp3>,-p^$XhSjAjmV%P/<bmbNdRCoQhkl$ofri]L?0
%:TRdcLjLe9J=rE`Z(GUc(9*o<Upu>kJcZ.Om>MU9`n$53L1H;hWmQ:U[B7K^EnWB.28+B5ib1>P^a3?*.AQ<^X3ETiRM2EE$Lb#p
%Ts$9Op!J.ooNQV[.3I/=S1okM>9FujdDflGq1p2*l`?(N.ansT("C)5T1f5SL!3Ef.1$roXEO>)$2qBlo(@kjn3_BT?#(%lkmPLl
%jatm2MEP7OkiJR,A50k>iDHK:W7jXMkRj=O^W.7W73oQ$OZjZ5DP]Ik`qdZ3Ld0m7SPWfrJ8*Ssg/Sgfl^l^!Dno5XncsCm.hJd5
%T.L3j_/XlPBO-Add.F<>-H[2Mb4s[&]XFFji5.6K<M"@r9Yi?DQ[It$O%@OdK]5gMMR>T!e6]!&do')HZL$h6Em>r&Bh=;S.ID't
%Rp97mj(m&h+SE>sPok^SnmLM53=TcC5?dip[_a6>F[snsF'jNnC"/kW)nVog&bOJNagHJVTX`Zl@3k;=:6bX$G!!*0W:lsq;(RNR
%bsc9YBLPnA_F*C=O&QK<ii1.4_jTN:^/'G.@r8DS"--=mWI_?a-q1lA/8*H+Tf%SWF`!,4/"A8<L&e$nO%W"'"D5;HA"p0[ddQ@&
%O[2d`?]%P#/&8>g-KS`fl!McB+;nTnHjlSog`%ao=e3!/.7pHJmZ<CuROL_6-Vp:sJsJILk=@dNgR%Bb6fN^D=l:rNn2OAF-W'30
%36&+HW')r>b]?"K_BB)_.ZR.XeY@:QW5Cu$[d3o11gV$`j_$[Y2=7`gUMhZhZI8"(`;==^Xrbp&m&9V=`VpW+]E3HO=kGrg)sVbW
%$?&:=*pmaMLK2SqeCIE9<'kRs83-:l5O,Sn1]:HV"^B<;OgKbRk_(Qgk#Ft>?H7JO8+L&_/F!/UpNJpMDP2'+ram\\c'D]\=s"Q.
%bVNIP40R??T@*@3bUs1!d$Q6I+0.I'F4Z$/BThNml_+E(2VTi1d)QMiBMsp&Ib=KF'/=`G)1-4SK<^9ng:k@#fW[rr56>M"Bh/=g
%f>e<iZoaQl,"D:7p:TcNfUKm(HgOq!ImD>RbtE`rVY>%gI"tA)9pohdUR/TIm0]>Rgp!q2$q50og'Y%pB]I6&gn-0PUWh?WSs(bi
%N2Dnqe&gHIm1<EO5&-^/[D_DihbR^`4]#31pHYr7FQ,@b%s8^B8N4]dF<Ps"O1`0=`m)$aOsXTj@4@L(Hg_(WnDZl/OOXW#b^P8;
%6^RL,pMRl!Ch5jT6d)31\lBXI]R$)&gtS-k<9=<E\hBZ.5[+eK[0`_AHr@!+XQ&80=)O;T&JQ8_K]g!8en)O<<5XI<mOb&l0_ZW#
%O0>g'V0q[]a7F?'R1C[:K?drq<I0-O0`)N2+SN8t!H_GmD-P8B:#8'oaO]Dp"M)j\\L[Pnh3MiNZ3+F3/s(`b?*A$hZOZ+mCDC22
%PP/D%]6kEIZDK_1]duVjAj<Kh2t-Y<=[$:%Qsb=NR&HLmD?b<S@Pq`u&Gb7CLu3oI?oc<%-*K38QUSa&+o?3bf`*q4<@C\YVA:%&
%a"b_*a(l'HFcUE=/?-"'n"D%MNoPs)7R*LYe5BmBOd[sP"E)2oq]7dB+\+K.Bc8>E8(C5PbaI*B/2G)-4!i=<RY:KUQCeChHS<[U
%p(S.&qpWLAY[NjTctEP;E/3^RacTl+Y#Noq=YV7tUoK:+QYHKrE5'Z>'PT:L5U75ggg:qY`kaG\J3D&Gh7&&g7F)rC>01.?'7d/:
%TMQErg@o:XD-9s8a$_WWe@m-Z1ltl'@>)cb[K[Qd@k;<9CCQQq-RX%n;I:.ngkRW=(n;*/o+e(7nk2qG0UkSt:gl.tf1sk&@?qh<
%0K;1m+t(Lf6rJV4")+qD49j:pa?i?rB%rr&lI9)$N&F(+5j.Ym);$ee1\:Z&J0)>$A=IP9)R2FDMecD-'L_p+<s&)N.)Pkj;8k^k
%%ROf\',roa18,q`DPjNq:L"5,dJ7<#<3q^=5gcC:^iO_mE3<lXMKJeJo?k@28;PXSoC#XLn`d"5^MG3)j2P5l0#$@0l[>pP"\dFo
%94sRpTGhIA1qAns5-TZF\SucFZc^C)486fdXpLDhm&[G\Pa1oF.$[F/<JDGnT?h#Mijl4AH3(b;m#VkM<IB7LI22lZkAQBTq%i1[
%).RbScR`,[Zkr:?EB$$VVl6.brQs&k;5,q"YUa0WpU"QK\eKhbUQ6=9f`Ehkf"TF,"\e3AEQ(1.[F3o!%%"8ol=QPaqt,&O7'Tdm
%SN0J@e$JV^P_ebM'5@oC:tfY0S[UFiWIZ(J3sGS9C;?CB,]AOI,I0_=53t6YjpYPc[,"TEl%6NPl+%,+&8VW270Jo6D,J%,9%lIa
%[Q[@<;+[70J[VrZe&Z6Klhs.`]_hF%B;7$S]F/HR%&n7W1h5)l;?5dS(ka9@pMA)*mXO_8OP-LLPg9;C6bE2Hf@5Oe/o?hNqU`-F
%(RCILgc9d:MG1CgEX?/1mp.u8X^Wi9KV_h+Nr83+,f#=RgD6^,KMKpI,8!/K%,CsFjta#/LNQq16J\7,pARgcVV0PfVkKa>SDP;T
%916UZmYm8#)-tHBT2@;UGD7ngLs1pRJ1;Gb'??YVNF2c%$$-iPbBP<Jbk=Ll?XE#ISf7#Z?7DlX)VI^P"5pDc^*[q*kgmJ==Q$:g
%-5$<XDu0Nl$b5pTgs?'Aij`m*=RnbRc!R<.aURF+!KKt*m$=[<$<p#((&ZIj<Ct=Sqe%p^fZ#/`N*@!'EObS\e`cJm=4`6Lobo9b
%\[sA+c4jAsg9!27CgbC.&ajl`DMc@jo?Am<+kUM>8m>oJ6/j_V6=u6CL*?"WIIP;TOXe&FlCR<P@f&2dqHf6[f6-VQE-*Z<Kl`\W
%fQ8>8:qLt4;@g7$aA4U5@3jsX;gA)bBAG[>#,g9\D;WX%:gdSq9*M+;H]6DU!U1,4VH&1L.;TJ2:]lr]lkEP6;G`,%1HU-59h@/a
%$rpRqHdq67$.hL'q1+7tj]O^`F1+>M<bdV9.L[<3)DuVR4h7f:&lfN*Vt]&rUU@sN?Gao9HNbYil5-$9s%8@u@e+an]!kMEYY*2;
%T8dReZO!@*<jMOG'uH0E`,[=pZ-bgUqH?LlR]'(?^aYlAU+<oWqir73f?aa"4p/o<`lISq8kjV-#_6`r=q;+^d]]j(b?IT+=n,n,
%orJ/"&4"[D2Q+.'C%*Qm\X//'WTkPL)B&CHf1M6os(=VA&p2fY5(fCCJhpb,o%1;HI45BmO:Bi8S!`5,p&0hIH&Z-Sl:Afq#o[-=
%7Rt2YhI08pr^VmY>,`O-N'lYR%:8acVQ?eL\IDU.<647(9:p'R?75au$8BdB;$oj11q'h"0++U]?^ikQ;&QC;!&9i8&Q"G!s+(O+
%Pq;"OTCeIIWL^bgE^ne7l_bq"'LG/rC=\Hd(o"oc((S?FeT2,&o:?"J@'*EC*cJ,GN=&k.Sg9DXDZ(9>kgZ$ekFDYYNsqk\KNA"-
%eoPpLBu=i"n#>HH!\d_j"SY560=+r=-CBephjRa2&Uq,6$Vcr^\@#Pq+H<kXchBW"Jq5ufb=W!cH4;iV\o\+ET./MqnPQIC<Z'">
%ni2-5W#`jH-(Y7Ip:a[ihf$c<N5fXG%it)Ai479@T7b1KKQ'?V0Uf74qOuZINgN,UFH&AE$R&#L-n(*sX0)HS7fVhNi.)*_O5.ol
%4uB8I<!`I3>V3)<P@O#[2nSugPiRl5-JPWe,KT]T8oP1BQRbuVX3't%i$5gZg#b7@X?NhK".]9K<CQfmPsM&Ani<C#a7G1[@YOLn
%(^GM=E^!qO9k^_Mq`Qd5>';D0]ZeO[fu_h.QKk9Sr;K^E=_<-9,0(_aX4QD-q'gb7`rRaF4ld/n,)u@JUM3[jUM:iQ[s+c]%(8>q
%+=j$1l,V"Xi8goDY_3*t$K,!!Bgc=(C^\\%!n"BWXoK$rnq]SMMo=RJ14!DC,dIMd>1M51H/sY=e/Z"^dCrqu`#s=1<KkJ'^2pG>
%[c^%_;bBL';@B>^8R8%KAY)ea(M4LSVb2/!mR9MsPYRu*n(>Unl_Egl9;TC\MN#+XS/.Nk]7BMGphA</H9C(K`_?[,r>B5]iVQ]2
%63,5kOY/^BY6>8L$s7@,bJBK`G\Wk&Yh>jtSTuV=MHe:nmg$\DYH;P*I>^Q6`rlO)bt`1!InZ46`+7DXYL3jB.bY_Vlg[eT6^O#$
%7(41&;i#Od/QVP!.gj3s"Y'\6>(tLT\A[+V,BTV*2V-XWrn6u,>H\/YS,Lkmlt\HXFXrH6p_q/>#+qs1C,GOkZ>^cqE*fI(T8os_
%+cI8)KBhEKA7-+(T;c&?&M*D5Op"7/GfK58KP6N1C6FC@0B[]g.YC0Y5m,g9.!=jm2doce@DoorR0hBIFNA#EDSl0nIOk*ofO?A1
%O&an9HHl?:4[D57R)pt[&O-4m]^9!shK)4JDUl3_o4^K]8b!<(QGYm&]\hrnb/cR7V;)%$?]hqe9u[<D)>6!21dV3(M)&IX?e;(I
%lPLmpc8a@DnUR9*BkJ4sRh`'MqZR$6H59CYmd6;pbtnZO!1"6`S9f1AL)0=DRHb)_Ku.<#`M(XXq/ea-C/h;$&1M^!_QY:W$>D8<
%3puG8_n%nB*!'T';#;6"!g4=%#>T'XHt>9h[N9KqgO5.jQTK)A8+']$^(Wr3GR4jjO:#Q[1:$5r"uhA@R#ua4nr7-0XT0CkD_LE]
%@5(1CG2&gTGi:rbU,4RHA!K?YZFoQ]EI=9H]m`-LB;T<sAd]a3M0R5Zi=\do/0Fb<gN3M?1<?H1TE5-&b+RJNIVoIHh.BHhRWVKA
%dXojHKG&;s[-]%?XQ:F>@cfgpjj`URO)I[f#jT0*`jUVZ*%L]=Wo[8\?N<MGV6)R?`Kf5^*"S)7"9YOLP9O0HFUeWB@@F1q)(WU;
%VuF8qJ%t"W,osd>etcA`q<JdqKfK>dbkDE))d>M<9U!ruj:no'(M!IZn/8HffH]2ufaQ$arhpV&3RZ(H8Dc`d$6Mf_7,\LJAul?$
%:eNsoI?2(tYjNO+ZO3#J^Bb(RUOWL\MiZT]cYS_?@nC3NkVaghU'Z&P)etRC;j"CED=Zb7Fe2fP!%M/'X2goaIbkDjrV&fLR?Nu%
%\;jJ6\bj/&/sk(/<7b1&JF+J_.EJj7#j1SZ_Xmt'%_&),'\b):ZNjQBI>[]3IT4g/72T$Q7G!;-3]+O:U(0iE<\Sni-^fjaY(M'5
%bcP")1$8[+\ZRsTml(d#TX1._eH?kCVX\ClG:4EHcWGAJRFh+eRfn-_T\J[IPbnJ:\!CaL0!;UDKLsU/VZ)HZd8[hGKEN(G]d0r-
%d0AK<V5UhXdWA^iW%=ct&hGN5f2;PXZY51`_iIXj^Pr+Oa,\d(q]G>\W[bmFU<<[)i((LEma<Jj0;M(qf^*oL"&<8F?UHeXMGF/t
%d`4e2L6GXr50*_uE;eU$\fH7i>ZlC[OJjMl2.o=7(a*&?1k/cNo,"S.(/kpe'Fs%imdjrBD@BIsh#lTmb-X^gSg>R7(GVD2Ei5oh
%CrO(V3i+aLc.7/'WUkr),##&VK'Euj4B85@.*Ee:__;5ZL+R=*\'*8qKF&B14OudP7.a-<P_ib!X@*^%nb?(#-Aa2[Uqb1&)L4<`
%Jh?i74r1P1"WJ[%5i$f>I28IV]6G'H/n^^5aY@#aZuD>qADa>&QACBX0Na+2R#ORBiM.CF'<%pG4TFCsiXJqg(o(uDZ3)R`cc8jW
%jOb+%<f8&jT@g)X]"nm0nF`V\#h`kF94+88opC%@=+N82<LpV$jLLjfs6$09qZ?sjUH5&2goA,p6SBp/e<jcYX?e#9_/3cH5DRCG
%;/38_5eVWB?jM3!&1QM&HE3p7A_R8\nZ"AfIHYU6r?@""LOq!A:'^TVei/qDmP0UAnWL)i2/C-l`6@UGjKKCpag*Vs*%OLY=K6nk
%hLq6Q&JTZ'j,>aK+?,n10mBKN=_JJK_ZmE%Q79,b48)dQb8'N94%`YF0h1WR!Sei4<>26G.a(X#*hbZAeXj1&k=BgcjFNN8QN@N'
%Cu88JP0j)"OMj4W_nZ5-D=Hb'&g(i%':gQkh6Q.2ic)(,la@/bX@MM*G4-nNFpO.0fOk>=oB[Ul.b(Ar?dT-gB0;qFLG'uZiCi^"
%*`t>L??U_73jR5UNcjF`B[^Lj#<p)Al&2>+r6lSDD-$^UUbh#@KOt"_.`Wrtr!3M*g-XGR]2Fc2Ti7mHc4NW&e$5Sjk25GUer'g]
%2sPg>.m%1F#"f-5C]I'C>sa^7]4:IMh6P)5Hd_EnEkA.9kjW@Ed4NN<lj,>1q@.3&c\t;p[`<hhKs.>fhU,\:g@&BcnSSQ9GmF>K
%B<8OANH$H3A'G!SkpX0sZ^;#c$3U?]US2BA0K\'+'K">Gl1CtmO88iL2`ecf)YqC)?sP2a>s'^kN@&HU%ZY<GWk2#9OcISPC9;H(
%8l'8O*3WH9clo:`aU>pP]4-8m!,Ti^>XeQTh*Un.S4Y8d1]r.NeS3.H'&?P_4f5^olV3[sYRo]u?,b"Cqb,O7;Od-Q,4[".%>Gui
%ZBS:=;T*-b8Paq&\pru+>Yt_.Ih@m?&T+Qj=oKcFr2:iIcZso..V*-)g%=K1f!ji>dj"R9WDN(clqhiD^G8%=hp!nKi\2>,n20-u
%e))K5"RreL63693'0,#c]QF;\aq1f(.S;).fINqk=/h'`])a"e%XClBY'GJZIh_H:.Tj7*M`;ZT,8`MKVm*8<2Og_G#(M<V:fDl%
%F9!X#jZ*U(VZL5qg7o3-$].tnZE/lY:d3hDnmNb<FOBO/8k3Y)Vh**-/B-OUi\o-L-?$u*NT<uL2K]Aa2"ldc&i.Ie"-GfRc94HW
%=pZ>(+QUcL?nEfmLlrqbg!"1&W:p=COU;qU/o$eD_u<(C\U0`W+C_1@lQX@6?nGseU%(f_[Z/?)A$^GM[\",&8XBVZ/<d7fl2-L.
%%UI.;*g)X<#o[ibN"L8f::*N6%.jkMOVBMGp:s5H(l?UZ01`]Ybc;qS_uTeKrBY"Pf$k4-L,2Ok$=>?5'8Aqum:poA.%Z7MhA1fu
%MB0Oh!!Zge%"_T'&-68GHS5n]=Ljc7`Fl[mDI[3_OjjJW*G)/ADpaErdn8KXR\r9sFAZof<!3ll!$7YG]oGA7(l9R_48F31H(>rV
%MD/(t\-&'Bg0r%S,M+Np5UFOOO@,K<>7&4g25UA@/^PQP6Mijg9;>Iu:1f_(3oZ45:2r?JeCkRi3.6UW,>MO0OM"P]RZ]ZnH-4+E
%#E!<t+$nN-fMM,>%uJ&hH7rZ@%2CQn,=A-i->\$/2hB92A=Dc5E>5GX=D!6HfXU^$"Ln`g=M08&\rSWY;UK,o0@>S^/ipoiFBa<%
%gT-'q('l^5Agk8f8XG_[\$+m*",B`:_JY!m#[8['ORn]h4P-qkb8*U3'J.tD`PI7X[kr9\%8MC4(6OIi(UA@TVJqpk!7dsQCr4-3
%.YLpME_,cV8ZUDeQ#jcuf2X:S>NmSVT3JZO67E*<Fd=:B'0FX=c`IIeGOe4<*:u"^,XHX=^r1ntC[sK]T@@^ehV$%5p-c8^83#Cr
%!F;b)J]5LdiB@E(0NgB>K+c^/^paZ(+!C[<\:0t:51:#XmXdNS6F=fBak:t5U0fgVDmqEd]AJ6KE2dM.ee?0q*#$P_>%M/pm>@ah
%el0/__R-lq^lekH5a$"FOMn89Kga?H$MDA<m+"b?-K5geL\=m4f48SG%Cp-41Z7F(@K%p0G5o_\B0?6,0l7dW,u?J?pN/-C@k&b7
%oR,[_9L"j,Hnr##.3X!?`Y:qoHfJpX3Lm5C-u0_rhbt#0Va]#8QFF.OX2KsVCji"+_+;C7;8fihN6Jjq#qoPaQa0nZ#D^]F^J,50
%D+(>qK=Q,[.8:Z)$2ZcbTmP6/MM7YsOKs;q*a1/^<MekU>@.alSS_(o6WSt4(0dEFL2;T"=nnI`(bR^NGA/]5YU3H4eCUCldiU;D
%`&E$7@XNnHUHBqdS]M:F*(:>37K34TB3.KccP$&t=idkWQQLF@MEXSbT;4<&Gb?ak3[&k/)1?!U9bO:+n>p96?Q^#O*forYd"s/b
%/^):<g&b;_FYZSHkD0*mlc.ObF]0bA#=?2u8.3DB&kc%kP?%Ic\G`t,l)k_L!_AB;,R:M1Uh^J6=]+29[?j1>B:I:P`FA,(l+O`o
%H-['_#kZ7CDXGC]pl(;m!oOc/kU!Oa/G/7P5qi9nG;CR/Mh$COn?,g*RmMn%UeFBH+So85$V*.fg^eSj&`JQq8;F/%eg$^1(+E<s
%g7d0f4A25<d/_kJqZO>YH%Kgc]P'0jT+YiA9g`)Z2:C-XJ<!oIs1ObG>q:epC3"bc&#)kk5F/"rdq<&;<c7,9%;I$PYp,i2.FN=(
%>0p]-6i-gQPR>)u$7<-0rsVV$aQB0_E$eAa%rKb,dk.>Yg=NnMBm@gLo7>CURgs)SC[_761]MpI#L$nK".MEaXaanY=O/c/N@U1i
%N6j.Vl]@"1_=CJT>@:'>@MCkc$C6W$;3>%\<M65=VAJr*.Y$MG,!keK6-f7<:gNVc?2%TtoUXjN,gHe!=A%;:B6#SD*mI*50R+`F
%U"UhDRf%pn3Wm#X]1ub1aLN[C&0Sj`_]K'HY:\E>[62&T&05jKYBWMFON\3ueeF&7JRHS<c=2iB4%BP:bnPcG,_dcg?S+Kg%r[FF
%A;uIk,7&NWMdIOYpJ5rcD&Q@kchQpJ-<X3<A*?H)<n,,,0AeZ><PZEEV*l+K?s#=[j[>iYKag>@qd+=fo@_C"'p_d8C/^^tLacOp
%P?a9HE<Q5/T.1b+](Sg;Fj;$6Z=lN?ZZ6S!9>*r%(,Tli_VlLsjro#)RY>1:[c9n#)6($CU4C7mprhf[>3\579:QItSeS*tH"IKa
%RC_;Q5!St$[V!dBVM]6VnMP01W=rb@6\U5.$,;u_H`Qt<(j>a_[j]XCn>IUgd>n>l*d.5ki<E8#%C;,?_L%EbgZ3lDWiQ3HUG'cN
%0itQG]2'.mlB[?ri?"3#6XsI=l'"1>q_%R&/)Sg3O4Mj&+MQFR:CHPKbOM+.5P-99>OjJ.j#+hhS#SSqg89\u&urfkf&J5)8mo?'
%DNF3VUh;6Y'Qa#k".LG+0d!`hR'pBN@dN2o5k&se8*rPEFH)&TM*a`_2o7'bDMnj1Q>GjX#daYNj+GjaW+:9UXQ`?BS%k-Cf9TlY
%Z!^R.60dV=_$T4$46Hm4VOEGQ^hSF(rb2$kp(6m;\s>NI6k^>IUeZD68QNL$pSVZnl][2Vr)Tuin]a4-]p$^Ekr-[C6<0)&%#hli
%)33h.SBgJ\LT\KahICCCIh5m^Re>"*EC^=C54&IF9(>6ks+<:(9ZN4P!_p"h4Ut<B>H=c'AVqj%'@8!!CiKr6*>t&j[O'@!&@O*C
%22dhds1TTTAbNb9f:9jWVK&SL'LCfl4'F!$-ooog5u9Qj3jMi.NFG:$Mah-_HPfqdP/6R+!C]&*NGA(Cc/guX5FR7rd73,^8)K7i
%VfL!LM]lTK>.=!"2aI(ne3D@<;TuUAe#%"G8n"/MBR!QB-=<48m9.UCQ;us$hu^\Zqo((A))[LK'G2Y$n=->QK@Y#%bl4Q\Y+im7
%1E<+<.eSagTk.?#WlLg6DT`i*n]R_8([')6i\(i$gTBc@eO5k0n8QDOk:2T]>=SkEf.$q%Xc;It1aI7(^B;ef,.bs189OVcAV,r!
%O8]BIb:S$CQrqF.kGp-X0j3S%Inu:]-(Fq5T>WC,pA^bC[.cT)0@$dF']NA4[E_'Hf'I43k^]dAW\-^+c.,neR9=%^(N+CLp3=Z_
%/&3?L^%Wc.7/OMXX>!qZ\K0-?Y-V$ee2Gq!;;0R%bfY>O<-D)<cnmqN=NednnXi@X=6I>SZ_*pY>2++;fKj4;54JAl(770gkS38j
%;=_]H<,1N[O^&(#ckXBHg2Jr[Ug7.gq6K.Rk4Duf^g4#76!-\tb<J''dVe1h^:!p>lZtSE;IlM5F?JVSCXd*>pRk?ne+MAEH(k3M
%g-Tr53a]DBVZL/oR*of+&TIs4NnKV+E7;4KqVi?1lf"1AoAaC-I/m]Qnt@H^D3M_$)O)/a_D+c,_H6I:0R3D/gdcTICWSH='Mi*^
%/?L=JJcK"\,(QqZLp4$u<BU.?AkjDM,hs98@cb*3hhuP0cn1+]3ms2/n>+#dr<V.X)T\VDNiIhHn.=9+p\O\"oaZ[DMO[>!7C-NR
%8.Mk6mYP-FnJctLRNLE*8`ssimY#4I;SWOPWnYU%dFf5/!'%B<@D!mh@mj4^5Q;`1q'C#CKaWV#+kC\:F2.n>jH%k@f*[=9Z-Tfb
%"P?cF`rADJ,>Di:^D`sKq;&a_q-W6.DGS6,8kQIC%2@nEeJN@:]2okr<jm"I-ON,rdM7@iO_tQKpE"Oe7$48I9A]7[NJJo7JK;7D
%)kdR.J<m/+\e'[nO]'KR1n'8n*&78Q/7rQf2,u=2i!/HS8<+.UF%MB-Q*4lq="lQ,/,N4Pp&</AkDOqdM_`SjfS8'O]Nf$dl1sd.
%=$+=),]l9nmpLd;S-3ci=K<jY?F`oP1#<$Z"dTsnGX+.c/DX^l&<mS!?ocJ5Q2LB@AhoMCcU\4"krl]Z=mnS9%'V<j05Q2,1T9bO
%G%trsa-5IY,Ho(d8J$,`_*U??[*X@u@q\LhUde!]QK3iHpj'dpUSG/\0K3]tm@>T@kqMm,X-J5dD+CbXm^ZKQ4P-lGf-,<*Qil?.
%8oWSH(q"-dOn*9SAsWE/q5$i.Fd%YFI9#s#XqE>"8=]'G?5+lQ?;P3.IApf9UuS6VhAP['Rf\XsfpZlCPk4$No><\/4B\@i,FEk]
%U[P?2dZ[NA(O"u87C0p+HC8^';QW"XXnBq>asbl0,dlmTdZh)CGn#q2=F:D%S=82=+U#$m`Sb1=oKVdQh^>p<&VZgHhX8KlMs<n+
%Pmi+602#/>Bm9(MfBmr&Ws`jFVIZeA?qHA01Z'!OX_t#B(\!hUF?)o&1jNH&(4:WB-G*Q6F1AP8h7&Cii(h3o(d>C,mN%=f]'*P;
%^175P,]fMf/3jch:/-WL(TElEqG(-gWOe2CX^+jS)n<?<XA+!I"1lQP(K::c:]m]EVSZ5\'XlgV"V^KnJekohA&2qtNIJ:?ULgnY
%'<koCd;.ua8_kgk*X*`U8=I-gBp#UlU5G,4mY=U_KuAuid>9pL>tgWMj&4XcK8-(YZ[sl>7"q>3Z`sk""_+<-T_N90:Fn.VRslq"
%8]oV"%K3T^^0Qjt^NFX1!=MOL=X83TB2J9o/^(e0$O"E2Hr/`\N^oV\pl^;;#5,8,=D*N%g4crRgSX6'B;m0ZB]9V]EYVT+?mMm$
%JpKEC%E;R0P*-S1AL@8f,!lh=7$Ntl68dkPZ)H:Ch=WQ/M+MNQOpYf.r)U$IdcP\65,/*=]5ksY\2>4dg6l7r5[J4E8gJR1-q$\S
%`u3?CK^AC*_8rOEUjL0kHrAtBXT[e]W;S2,qK`<AUu4/8:gl2`M6h#\O/]2#;5lueoi7&t!00tHTZ*++NMXd`BJ$+t"kb,l8[=G:
%#EJ@0oH@E]"67I?6>,gLZM[35D*]25JN`?b2CXSkY4XTRg'?.ff.!hdUJuiE$!O3CV$eU5WPnt$A;1SY[XlB"j*]E[[NMlj@mmRo
%81q+7_:*$b\Ig'j.BUi4iT:[!BO.??-)X<npbU<3NZDP&]riTskumn?4L^W*m+^jro3:kSb;O>,eFHo^gKi'Z!Cb3:jr>@PVn%gS
%?_N,m5Y72tdS<.1Lm2:q4A)E:D]i0MIpV\"[j<=iY?94GgAooXC[G#G!<L'&_BK1`##&b9`WQgf$'NX8I#fmZk:NL#J`A+OJ:<bT
%#G.jV&ZAQnG2.1*2#A;$#4\'d\PjKG#3p()f(;>>CuCb=d]8,)jP9o7"OX)!]MR(4%[QGBLq9$>\?H)hE?-pFihM`k=m6g+p>*.o
%e7cbPZ4RU/o_][e0H^XRG>7C(:+dG6A"1]'MM\j'2XG#h:/0d9%t#GJ0@3:U"EnU(!2Bs3\'cqB&d?/,'nJ3-*gm0k[FQo+%(17=
%-hSl__c]hbMJ,AGG9^\"eHo"d;o*V2bJjWYfi\Ch\'lcVS!"sqN/Wo`3(uC[W$uFL^N0'K?3S.52Co%-g=U%^"ClMf]$99dm+l8,
%<@CYuMbJSZ82)l=Fu^Ga5]J@NZ=.'^L7m_-8.us)8q!o'[(suOL'^3T\5%pNm(HKS8-k:^_VXsP*\gZ(;0!H+/FE#"f`4m].OT%Y
%^;;YHXVZp%qEu4bitNX<3"S`OiR:P:'OID19m7Oa4c0C/"O>M8GQf98L@NE8N4I_[X+44b]7O=YdKK%l20?jIb>",=VYM8Li\eT2
%`9L7qAPCB/)!hWA(=l^F2[Ki;TOr00E=0PSn&Qi\S6ZETF<P9k?C]9Q)9WZ.Xp\69-N"Yq!oI[-\gj7n:K"i"TFk!!1Dag!H&Yo\
%P7QsC^ea!UPnh,k/:[#p8#pR`YC`?r:IJuJ#W6P:iGJ?Qo8P4]YNMsJbb.)*eHk^U3elHI2P=\qrFH*1G+\3r'\7B58SnA56u:Lj
%RtIk:OXc`^.rTj5No$YrXQpa)[qjT![L+6EKY",2(9qh&2t.>UpO?.9W@0J1%tYc>^P_0*2DF[+Z?.D0m1V$=28GkU#i.%lQ=PBL
%5rMW0>4>ZQl4N_Ul<HC.+qpurC"Z`K(>sO?4i9kEe#T;XJ==(g/lSQD]HH[4laeHBZPan,%%NB0/S^p]ETDR5!\r6?$jacX7u/83
%8LC<%W]-G0p.F@sX%]8,).!N/IHhr=LY:6Y22uel18n%NO2ihj4X*/2'7=%D#mM.Q/=32'<eCHaY:'AAqY38-K5F:>7Ipb'AQ:E_
%-KZ2AasF(mbDgM#)PMeA=3"I"WG)jK)Z[?(2ML!!n6$bm-C*pP9_]4M%]MXID#3i<kVsX]%CKQD_+It'"^elnJL25cjHfA4_)3A)
%lftI)McP<sXIGOQl'FV5Pj%E=-*&[8=t^Ka]`n\ag1jjj6@)s+iI\3I+)S+kH<6Qn7[[4ukm)FAmg:k2\S4q"\r),4G\IiH@d2j*
%'HVg?E<+X&1q6i>K'K1F8=N=q_N[M*EQA4^ic^_1i>nT9(4Imjj&Mp&]0J%uA2(fLku/%Of[;gtF0o71MrKEYS.\d00=o(e[']\k
%iL[!uO[?PjWQ"3o[4!pN=/d7JbB_`l_6`bX$5R\3F&uhDXZoD#[9'iFd\o%SCE0/X,V]\h&sT!ULp>2A>@+OWRiot?P=8-,Atd-Y
%+.^J9Bh-^to3<L<8',CZ\PNec%6;VHI7HhY,l&?)6V)U!&p>dk!#uU"Z>$#1`8t`FZGj>HlB"%ICLj$n.)6H]mLu%u%Uncu8h,9o
%9,Xg**ZnaUIQd0B<"4oQg"'bXZ;M]cdk'D?j!;0R=Sbp/_2cPa(lGtBYG4NX?:!.0?'*#XD2NipPRMdui!FX[dj`roWi]<FmO3K-
%Sk@%S@N[ph,Nt=l!h(EHL(ZD::LW@rHsTce7\hun]4&X*!'s5<PL!B&W2>f]HJXNYFHO=L[6?WC@q>Q7'DKT/nQ)%<W+![qLCQR-
%I*;RUcb'/K">u+3!\:Opc(U25)7fnjHU&8ZF72Nhr7\Y*)c#Y/LWd[r)a^i))""QqTDfclLFtUT$NF8!Jfs\#D!MfBUEuFso0E?s
%l=\F/G&2<gY/l"O4@V+89i1MRc`'8mKEnJ6I;$4#'G:ciLgF;7Ll1sLcE`k<%W#<JD6b[^;9e[KTds7P1K;Q#l,1>4Z5sZNEi-#`
%G+\/d&J_4K/m>8ibb-"P*+*IOnkj"U*-(9VP`"t-S9a5&]<nLR4G/XoF+$+gIm-05:TKb1C]SnV'NHloe0ead_-t\OBPf%s!d%`s
%ZojLN!-Qj<.jXl_B[_-U^QJ^d(kT,g85H&8YH=`<!%8Mf$LQs@'SKTUd?6h8"(4iK)bMGSfKZm1[8._O.-)qh'b.*@"88fA7^bYE
%FEK`A^sPZ>`E8*kZR*!7.#iDX*:L@J-,r$5A(CYP+5<GZE2Je2L@\0c9?PD4.o6Tuq'u=UF*C@<@tJZe],QHfHgH[Dr)"*$K\'Gh
%ca7\,Trd"!*9si:VC0$&KRApt)$CtGP1LQWVb4Kh'6\!Z?%1q)5fE;DPibUNd>(TU'&p)AH@1hQ?SWhYUthmDSQ+ZieG$'W^II[e
%9BN`VY&.+J'l57_$l6b2-esaH>E_tSQMrTcqb8]g8t#kXqi\<@U-SUD>/ar""J.LV,U4!Q@JY6>0Q:rJ=g;SaFe,qTe[dd*(LaS)
%jX!Ei<o^KMJ=MU"'o+$mY_2/@Nccf!:q\$e]LLfA7N4kT*d39slG!Br[X^9Vq@pYV,\bI;om]]S7aZjUEo@/PfX@SR&O:q\/BW!t
%>U0R&]hSsg4?$*t\!JUAitFaAH_`Y7;8-$k]3(,Ej:SB[j/N43?',4c95ru7HU9=UrQhE,>.#!%@5U;d?r&YqZ9+)Rb*GSIX@fQs
%>"eXjb[l'k&G2QYa15s*]f\3)jVPTNL%h!587Y(#(#Pn_kD/R*ZgnN[gIX:uYf=#Db.dNH2;"0kkp\g#]GZgC^PdQBl65UQpdkJ6
%g7@nN"b74d874#mUV!)tPtt,lAkrk.+98]IiSA,r6:/)$U@.77pLI5Y[Ff/9"g<)2rA9Q+<4PCBT8l.Sg2si#4'7%ZJ3(Ck65'gJ
%(;.eDc8R<rkrCkR+\*_.G6,p0l-$nSW=2:.j_j/B`3\rH[&JL+U:CLq?i:l(1e;>.d`q?D;IAteTiPRK6u56=?aEk"''NYl!o,Yg
%*)6PlIMcG1-Bdo]g4p3;`RI)ocJ^RL4W@.@]a7$r_39N?9!(HqMfgP-BD]SWVC&C-*utkqFo7NoiN*P24G=h[Hn:s/OAYogSa<ps
%G@fi3V>msOIU8,n2l50sop\$c<=4]Jgf!ck#,@AT/e&1RLM#I?P[kWA%tk1V.,/`CTHT\s<P<^9e[4TBgdpgE<DCjU"p83;^5<EV
%Tfh0H,0ecYn/X;X/tih0*2sfGWL3mm?TBpQE"?]B$Eu4MKDJp=a4((A=TCUBH,t;dX\Fl4`8RM*lJksqZThP)<Xrp):5`14YS159
%.`L`,dOE_piP$4RDgir2(%UH-!Tme_"iS)Ko?U4mgP:OQ`WiS$m$\t]'k2"T?up93-MMc?_PKOriJpGe3K9>`5GRQgMNm/krajpO
%e=br/F]E;-*$0j1-hh6fKA(T_cmaN++[T)UDKbiH5_fbX[2,*He37@_.\.`Elq8$&LnCbXmBL?Z%A&k3B+aUS#*aFd7!^:cH,LIW
%@PL7G5g`o-L;HNfQ..'uT]r+kl9:'SC-k4(KUa5WNXMbfi]anSdWcMi!1!\"&"OTE4Y@F.`[u"lAEuI=V9PPM&AfKO<]23,D>.kP
%Ar\QgC#mK0h5:lFI2a3iO9;kU7d2fDM5h6Wkupg))+jE(h$Bi7Q"NAAqXccr[K>Zu4F3.d)7'P8RRtTRP>],sU7W7V[qh/'I]O<c
%8I$ju\[uTbYSQE[Y&b5/C;9hW`O(&'Ktt>c*udr9Ph%:""uBp=pkC.<;cge5L<`cC!ngIIQ2Q*:^Ndm0P'fiF8[t2jPO'iiN6nl]
%AR5=#Xdr[3-.``_h[TPqH84(1`k?`neTl0T#7MtT+>u2e(_hrH%u`>2,<O#^:Oca%DB3L<j,cCIN*SL#lEbhElEY.V6u/I`PTNY+
%9qo:/9ud>r=ab3':8S^5Kd<2_KhfaIkKcoTUB"XI/n$-%]23)N."r/!T57.fWDqB+\6=_Li2@<k9Sc+#;=tQb<>bH\BOTNu9DDr8
%!d/9&'O1:RU&$qG.3"#aX?5%"M4^ctM%g2-hbc"qL;[p9OhV;HAHfM,HY^;+ls!]fcVCc!%^GIQd:I,&n/rc9.#`cpHo-:X7DUQ%
%R$ap@,akM0s,R\bZ7F95Hr^sdlJ*bVMj[H\5,N#']Lm9uCbT7VW1AtR)Jm>aCm<<-Ps?g&gS1+,5'fM!K+2n'9p/bgn%_E%a-<n<
%5F>Hm;`:c:$!MCn.C*sl*"9L>-_5ce`;#9Om3%tBl^$VHBg!sR^uEt46TB86:p9Z8;'t5Jfs_]T-$Z;kLcD((Z]le>?08(dYK<$h
%ADmPlB%EYU8!^LS@;S27_G@B-_4@RXDJM<(-3SVf/TuRsZ67.Q)U9c3E+bI_>3't5#:&mp-KB*H4m&h<$6?md=Zf,4P\$5!+.LL)
%%eb-c1=h!2[HlS]Yp:WhItCL_DI`h_Gne>^Qb#Y[#`Cg[G[8E"7C(0e<Q\p2.>bDYK;"!f,#o4]PrIFJH42spOA[m9dK6_5%V\(A
%0;JWZ1m4E1:`6`SJl-Fd$/dd`LD&B$:s<*`Obu(X^^V5b-H5U@k:i)8Dt)`Y]_<26g"-$cc4_&1&UP0L$/(cL.RC@pTt1]oK#3UK
%J^m"`Q<O[r'd+s(M%IQF240#\P')V1Tu]]'3K$C`d8"Pd;?S:W$i%KF'L!"b\T@]s@+llCA3+ZlLZ"!-4df8*U!*gD['\sk?Taik
%Eg,"cE(NcLr!ke+CWe`SLhDu?Y:bjk0qKPTlUiKsE\#\f)QCIs/au]VK41i(Rr3(IRA=&f/sQDaOkQlHFi28X3u1^m"\<6g^@D6=
%^MNC=f"_FHFIA8bU*3f-[3%Fk,mKH6I9^tA1lVbUg!%#tBW,dqcfSee\G%Jld,QDW1,X/&g;NWYr'n.Km%B=EQAmo7[t+-md+"@Q
%Q/e3G4:iG,ko(W0._L_S\=#,.QQ`fB9d[XgHjf@l<&BMC*?YXu-6m!o2X]`+EQFLVgB>V38e[]L5BLnC&fep4*\EK[Fq9=]cHTd@
%r_66HK9TijSkC,)ICmqQh,AVkqm"GJ+!Ta7k_Si<oSWnI9Yn&r*p&EQbndIOJ;UC-E#:V'6J8Rk!Uh(-'R8tT6C<s/Inm[+[De,S
%WiTAe)@hqgE[[7KO3XGW.=fgCcYdI4$FQErD@K0:^C8fX_p"MYmI;\+"UMm^lK6[XTNEhPP0MB8"FGP;gH$&-(ke]f<AE4L5@e*U
%HHR'H'X+bHm=L!<IG6lTll$n0OXV$j7A04Z*Z2rL!).Jo4Wk3`D')c=SWam$TsW/s?'0V-Eih318.&J:d2Wom:'=T[Qr!jQlP/f[
%Rjn#'=>(J_._./p\J>la+g*$<NW5s0,/qWCbcB<n#'GokD%>-]oqI)-Logq25_roB-5O^YVOPtq7tXF)FI5sC"8KuP;q](&a!n;p
%=4*<eL]JA017o\=JfeLdUHj]1$7IGrE<HbY"WrECIABV`aJO/hG#bMS!\#VE"<(dM)T&@-pVrqUM#BsG+K>1H``=<u"QdBbn<01?
%T#)KW-5WZ9H.!b@JTMbl.+jj)AjiM8Uu#iU93#6T>SH_ZQ..sh6PNpXksQe4-5,#''mtT+JQg,7NK1$k"kmdYnT%PZ38-O!;G@>C
%UeYn`Z!kR>Wi9g^r'%TgTp+PbN9]B'IMKHRYb_I2AP0ugf0?/,pPEP25[4*[_]4K;Rn.Z)T2IJ*/W-aLRL"[/$CaHQ-0Y_86c%j[
%%nSm3>6Hej9VMBq)@<K"TY\VcWDQ%lCkD^F?k4OrpGUOLZT-0kp"WH2muX5e8)I4kBMP"sd-i;:=?L0cY]U):%to7F`mbUANTu30
%+U+JoV0^.q.M\A%]@MKt5ZEI<ab=2[j;T?E@<8b/\#$<^3VXc%e*bAe&N@bLS]sbia`paE+<K\7+K*r!%q$kH5-,8McgZN$F"dmL
%7hi2W\du*?=Q<4F#>E+IZZl9@eN\-7e0(L$Q(6gD:Pb!5jhkbnW<ZIZ86o#>1@l+hcV)+r[cHV9n\_@V6]Q6-n`hGKl@s?_MbKUA
%d>/Aa$)6K/55:;#=W,HM$<%Cg?*ZS7p^Dd015S6!RptX@)Am'i4Cs6+5r9XeWR%FWSQneiaQETdWCKS]"[990<41mE[VDp.0HmHe
%e49BS,8!<^.Q2P1&FsWTD\$oLZiFIfPN;Lg)!8kWj2mY=ag\dIV4GN[^VS(:QPlr/47r2X.^N-h1dl)/6e^'p)m8hUCQg<tJQ+J4
%T!&Cng^XIiE@N:Q6MBU.L1&o>_Dl\::KhP@,[hE2hn^]X\FEr]*Q$<]Bag6pQ.P`sK:,*uK*sft/8O#0r!ecABDHI3:qD_4)V'b7
%]_A<\cF>#-%K<LW7<[!Hlb-_THMAZM&"6h5%t&pIX]rSO%Vl<iWiZ5F_42a3am975O^PQ@N"-UA2aW0<ln[1gW[lT$U7&\t3*s$`
%#5rp.fMGC3Xb[Gh`u\@Urr*D5S.<SCc!JNs5W1[p(8SWsgXLT`U4J]f@rUZ/3=@K?'!8mfc.5G7oMI+38Jj:kN780NFZH:@)f(C`
%bfCfP\TT*e%Ff_LqTR$E+>S"2jGuOmaHtuU338R#72Au1&GV8RXt$lIPUZ,AQXoXHHS-gdn6g*b&;=X*?-XI)iA&IQe_&pj(HIdr
%<7AZNS2<u<Q>"DO*E8BF6LnDL[*_0].D<7qr$A?h*K4o'-b/,'Y#3Z@0#NhW_L??o!."?%V]'&@?fPn\HT^p/Zq:?O3VX/<!&?=Y
%X)4dVO6P,':DAI$9h%`%q&><'8,sW19i<c^;Jd?$C6k<5/TEFi3+d<<lG[s$p.=/Pfq29][uT7b<[7"nd'jE+H]R5`NkH^]AG;DR
%/]<;9<$5"=.LO5O;V#6Y0%+[/b2X$R""19>\E8WuOB6u4QR8.aVbg.Z.1iO;cgHq&jAQaR+\>mSq;VsV4,`7aU\&4VT:,1cgQQnj
%NVpChOU$ZLK1"3N[O-.j"uQC2=Y:n#F*gU)#nZ,79Tf3^BrhojBbe-<9kJZf>1m)C\fWag,i+;Hgb[BogPgM)gSinF2B0L=iGTI[
%LZt25"9ao6``qrc4))_e.]FVuWI/j<1P@7\HP?7XaW6E<?@%Rd+OcAl`&6=NmhQqVB-[(o8=rY>d@A#/#!?s<8_ld^)_Fn288j@5
%lN"<P\85UiFP3[GSYZj^G,N>shZEN9:fq(E+4_mZ/5pYSb^qQ0kjW.6ae$(]8]*SZ`R<e^2NfC<Va`N%OZ@g](J$-Qs%"JenCeQ^
%M&QH\[Qk[2D]qOU*(3EWC*!QAKFXB&P#]lW_4MCi!2K+W2XB:;2/ZjLR'Lqh^sUct`nn"I_;/1K+rsJjF/YDlEd8M]a)Bt*SE?%I
%<;!:qWJY,J,<:`!DfKaWer+'5NT)%GRN1,FKjf?5:nsC'6XpAa>*OO]"ei7Q:50SCpF.9Y+N5<4Jo?+GURoC4H")JB;Ccl.k=jFu
%aj6ci/K^H]l)6K?#m\8OfdPMJb4@sA1hi&56(e#Z;=lcd>TjWb0?rjW>fWfib_$Kmamp?;?e#KtJ02MsJ>-I/+ghGrM;#YCY,a"@
%0gNK30Hgk+o;0B]1<1tX^=rF9Xe0a`[a9H/`PCgdWDshi=;F8]:@ih4mDs^[KcJoQB<V!ugOD-O/S^Z;1*Q*\ZN8!^7c'O?!Ec.D
%TX83l.sa%MV:C^Q"kq'e^"PN0jIJ,]!H#30`-Rl9ZED`ES.]mQG?40o\HML5aLk-31k(@K<g]U_D4$MCU5soG!nmV'872Dj`-4=,
%3>+m9'^6:n+D,46+Cj>33fH`cqj/S2UNT[ten'iqJpAmtXhlh?j]&\`QitUJ\:q:k)/=#-*tO/j!O:9D:e*DuZ`Z32ZU'9=r=l3#
%*]E!A9Up`Rl(K\Jg^mUF9>BSj>.n;M,e;(2=Y9t:q\YDVVR(,GHlndApjLmBOZt3r.s0"o3FPl[P%:<M]BfPcNHHR6X!Dor*5j8T
%Che7s=@u_Oo20u717k#Lcd?;uLU%p6GE&rOPD21EU.%P[V]a\,YQPkT5ir=j&?rCV*($#3LW/MWHiB(b0JZr4f-FE.%u`JM:"#P2
%.m@bSIpcC>Dcd(SV.C&N"`W9m%'_L%7&nZ,ZNRFcH"r%;Qn6]u<+^Q7Qr>h:Fu>3=TL(B1^)n-,#,'qQ.1@]Ti2s(0mj#/o]tj+r
%dHbf[UU5W7obUe,Xn>$rW`3ZR2Q$P@:gQZgmE9ar<F(r:#rdH;8'9A&$:8Jb#tZJTK,&C"7mPYg8aX,M=C0*H9Nh'Uai0o,kbu=U
%.+s_NU8Hn2hCra<A^E+\.^/gm/NTe[rj`pOHUU=<DN-jSm)AqoomZ^%7V/#edW=s[IAic6@Y91Wai#4*lQQl(GssQcL*KH>`HZNe
%nS,%4I!j,dP9`o\`FA`DjbFr%B==]cs(C6hl1Ef`J%5:Oio;-S8Eu!/'\NH0qk*FgGYqdpEq-c"O2(J$oIoorpCHDti3I:X^:_a\
%4E]7_q=/pWJ).cJh*97lhV[5(rqfLcfC.Fa^UUnfI/e7h5JDU<o'Z?45;hMjD*R0dqhJb+GNjV0S^7(TWVQ"Qs6ag`PDdcd])V'M
%=22Dic^/R!3puS1p!s#q]A(O-YKu*2rqlQ[S'.;eB.gji8"\pR5BGqas.=4:If8%$L2Y(<p[+$FhgP1[qW@YJr\o8'pT?O6+lAc/
%Vr-r-pu:W(`E0N%:Q.Qjm=p]$Er#"sgUkY\Dm&Omr8?,;bFbsk/oP[chI#,Hs'u)V`N-W:GPe%=?bH:+m6@jpd;cum++<hF5CWCD
%IfS]`[ql~>
%AI9_PrivateDataEnd
